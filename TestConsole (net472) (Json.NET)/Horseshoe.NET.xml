<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Horseshoe.NET</name>
    </assembly>
    <members>
        <member name="T:Horseshoe.NET.Assemblies">
            <summary>
            Factory methods for assembly lookup, loading and displaying.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Assemblies.List">
            <summary>
            Get all assemblies loaded by the client application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Assemblies.ListAssemblyNames">
            <summary>
            Gets all assembly names loaded by the client application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Assemblies.Find(System.String,System.Boolean)">
            <summary>
            Finds a loaded assembly by name
            </summary>
            <param name="name">e.g. "Newtonsoft.Json"</param>
            <param name="ignoreCase">If <c>true</c> matches an assembly name if not for the letter case, default is <c>false</c>.</param>
            <returns>An assembly or <c>null</c>.</returns>
            <exception cref="T:Horseshoe.NET.AssemblyException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Assemblies.Load(System.String,System.Boolean)">
            <summary>
            Load an assembly by supplying its full name.
            </summary>
            <param name="fullName">e.g. "Newtonsoft.Json" or "Newtonsoft.Json, Version=13.0.0.0"</param>
            <param name="suppressErrors">If <c>true</c> simply return null, default is <c>false</c>.</param>
            <returns>An assembly.</returns>
            <exception cref="T:Horseshoe.NET.AssemblyException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Assemblies.Get(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds a loaded assembly. Failing that it tries to load it.  Equivalent of <c>Find()</c>; <c>Load();</c>.
            </summary>
            <param name="fullName">e.g. "Newtonsoft.Json"</param>
            <param name="ignoreCase">If <c>true</c> matches an assembly name if not for the letter case, default is <c>false</c>.</param>
            <param name="suppressErrors">If <c>true</c> and an exception occurs simply return <c>null</c>, default is <c>false</c>.</param>
            <returns>An assembly.</returns>
            <exception cref="T:Horseshoe.NET.AssemblyException"></exception>
        </member>
        <member name="T:Horseshoe.NET.AssemblyException">
            <summary>
            A specialized exception for assembly load errors.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssemblyException.#ctor">
            <summary>
            Creates a new <c>AssemblyException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssemblyException.#ctor(System.String)">
            <summary>
            Creates a new <c>AssemblyException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssemblyException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>AssemblyException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Assert">
            <summary>
            A factory of Horseshoe.NET assertions.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Assert.CriteriaIsValid(Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues,System.Type)">
            <summary>
            Validates whether the criteria is valid (type, quantity and content).
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">The criteria value(s) to compare against.</param>
            <param name="typeOfInputItem">The type of item, optiona. If supplied then it must match the criteria type.</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Assert.CriteriaIsValid(Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues,Horseshoe.NET.Compare.ValidationFlaggedAction@,System.Type)">
            <summary>
            Validates whether the criteria is valid (type, quantity and content).
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">The criteria value(s) to compare against.</param>
            <param name="typeOfInputItem">The type of item, optiona. If supplied then it must match the criteria type.</param>
            <param name="vAction">Alerts client code to perform the action identified by the validator, if any (for example, when the between hi and lo criteria are switched).</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Assert.InRange``1(``0,System.Nullable{``0},System.Nullable{``0})">
            <summary>
            Ensures that <c>value</c> falls within the specified range which can be open ended by supplying <c>null</c> to <c>min</c> or <c>max</c>.
            </summary>
            <typeparam name="T">A runtime value type.</typeparam>
            <param name="value">The value to evaluate.</param>
            <param name="min">The lower end of the allowed range, <c>null</c> signifies open ended.</param>
            <param name="max">The upper end of the allowed range, <c>null</c> signifies open ended.</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Assert.InRange(System.String,System.String,System.String)">
            <summary>
            Ensures that <c>value</c> falls within the specified range which can be open ended by supplying <c>null</c> to <c>min</c> or <c>max</c>.
            </summary>
            <param name="value">The value to evaluate.</param>
            <param name="min">The lower end of the allowed range, <c>null</c> signifies open ended.</param>
            <param name="max">The upper end of the allowed range, <c>null</c> signifies open ended.</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="T:Horseshoe.NET.AuthenticationException">
            <summary>
            A specialized exception for authentication issues (e.g. Active Directory, OAuth, etc.)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AuthenticationException.#ctor">
            <summary>
            Creates a new <c>AuthenticationException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AuthenticationException.#ctor(System.String)">
            <summary>
            Creates a new <c>AuthenticationException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>AuthenticationException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AuthenticationException.#ctor(System.Exception)">
            <summary>
            Creates a new <c>AuthenticationException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.BenignException">
            <summary>
            An exception that is caught promptly and quietly, client code is never aware.  
            Used for control flow and messaging between classes. For better results,
            subclass this class for each unique circumstance.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.BenignException.#ctor">
            <summary>
            Creates a new <c>BenignException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.BenignException.#ctor(System.String)">
            <summary>
            Creates a new <c>BenignException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy">
            <summary>
            Hints for rendering message details in Bootstrap alerts
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy.Default">
            <summary>
            Render details "as is"
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy.EncodeHtml">
            <summary>
            Display HTML markup rather than honor it
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy.PreFormatted">
            <summary>
            Honor spaces and line breaks (useful for rendering exceptions)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy.Hidden">
            <summary>
            Do not make viewable in the browser (force use of developer tools or the generated source code to view the message details)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap3">
            <summary>
            Classes and methods for creating Bootstrap v3 alerts
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType">
            <summary>
            Alert type corresponds to CSS class used to render different styles of Bootstrap alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType.Info">
            <summary>
            Informational alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType.Success">
            <summary>
            Success alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType.Warning">
            <summary>
            Warning alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType.Danger">
            <summary>
            Danger alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap3.AlertType.Error">
            <summary>
            Error alert
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap3.Alert">
            <summary>
            Encapsulates customizable aspects of Bootstrap alerts
            </summary>
            <remarks>ref: http://getbootstrap.com/docs/3.3/components/#alerts</remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.AlertType">
            <summary>
            Alert type corresponds to CSS class used in Bootstrap alert
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.Message">
            <summary>
            Alert message
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.Emphasis">
            <summary>
            Boldface text to prepend to the message
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.Closeable">
            <summary>
            Whether to render an alert closing widget
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.EncodeHtml">
            <summary>
            Whether to escape HTML markup for display or let it render naturally
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.MessageDetails">
            <summary>
            Extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.MessageDetailsRendering">
            <summary>
            Hints for rendering message details in Bootstrap alerts
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.IsMessageDetailsHtmlEncoded">
            <summary>
            Whether message details should be HTML encoded
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.IsMessageDetailsPreFormatted">
            <summary>
            Whether message details should be &lt;pre&gt; formatted
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.IsMessageDetailsHidden">
            <summary>
            Whether message details should be rendered to a hidden element
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap3.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateAlert(Horseshoe.NET.Bootstrap.Bootstrap3.AlertType,System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap alerts
            </summary>
            <param name="alertType">alert type</param>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateInfoAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'info' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateSuccessAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'success' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateWarningAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'warning' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateDangerAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'danger' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateErrorAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Same as <c>CreateDangerAlert()</c>
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap3.CreateErrorAlert(Horseshoe.NET.ExceptionInfo,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Nullable{Horseshoe.NET.Bootstrap.Bootstrap3.AlertType},Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Int32,System.Boolean,System.Nullable{Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy})">
            <summary>
            Creates an <c>Alert</c> object from an <c>Exception</c> useful for rendering Bootstrap 'danger' alerts
            </summary>
            <param name="exception">an exception</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="alertType">alert type</param>
            <param name="typeRendering">define preference for <c>Exception</c> rendering, specifically the exception <c>Type</c></param>
            <param name="includeStackTrace">define preference for <c>Exception</c> rendering, specifically whether to include the stack trace</param>
            <param name="indent">define preference for <c>Exception</c> rendering, specifically how much to indent the stack trace</param>
            <param name="recursive">define preference for <c>Exception</c> rendering, specifically whether to recurse</param>
            <param name="exceptionRendering">define preference for <c>Exception</c> rendering, specifically whether and how to render in a Bootstrap alert</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap4">
            <summary>
            Classes and methods for creating Bootstrap v4 alerts
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType">
            <summary>
            Alert type corresponds to CSS class used to render different styles of Bootstrap alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Info">
            <summary>
            Informational alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Success">
            <summary>
            Success alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Warning">
            <summary>
            Warning alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Danger">
            <summary>
            Danger alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Error">
            <summary>
            Error alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Primary">
            <summary>
            Primary alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Secondary">
            <summary>
            Secondary alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Light">
            <summary>
            Light alert
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.Bootstrap4.AlertType.Dark">
            <summary>
            Dark alert
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Bootstrap4.Alert">
            <summary>
            Encapsulates customizable aspects of Bootstrap alerts
            </summary>
            <remarks>ref: https://getbootstrap.com/docs/4.1/components/alerts/</remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.AlertType">
            <summary>
            Alert type corresponds to CSS class used in Bootstrap alert
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.Message">
            <summary>
            Alert message
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.Emphasis">
            <summary>
            Boldface text to prepend to the message
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.Closeable">
            <summary>
            Whether to render an alert closing widget
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.EncodeHtml">
            <summary>
            Whether to escape HTML markup for display or let it render naturally
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.Fade">
            <summary>
            Whether alert should attempt to fade in and out
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.Show">
            <summary>
            Whether alert should be immediately visible
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetails">
            <summary>
            Extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering">
            <summary>
            Hints for rendering message details in Bootstrap alerts
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.IsMessageDetailsEncodeHtml">
            <summary>
            Whether message details should be HTML encoded
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.IsMessageDetailsPreFormatted">
            <summary>
            Whether message details should be &lt;pre&gt; formatted
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.IsMessageDetailsHidden">
            <summary>
            Whether message details should be rendered to a hidden element
            </summary>
            <remarks><see cref="P:Horseshoe.NET.Bootstrap.Bootstrap4.Alert.MessageDetailsRendering"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateAlert(Horseshoe.NET.Bootstrap.Bootstrap4.AlertType,System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap alerts
            </summary>
            <param name="alertType">alert type</param>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateInfoAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'info' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateSuccessAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'success' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateWarningAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'warning' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateDangerAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'danger' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreatePrimaryAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'primary' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateSecondaryAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'secondary' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateDarkAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'dark' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateLightAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Creates an <c>Alert</c> object useful for rendering Bootstrap 'light' alerts
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateErrorAlert(System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.String,Horseshoe.NET.Bootstrap.AlertMessageDetailsRenderingPolicy)">
            <summary>
            Same as <c>CreateDangerAlert()</c>
            </summary>
            <param name="message">message</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="messageDetails">extra text to reinforce the message, such as the stack trace for an <c>Exception</c> error alert</param>
            <param name="messageDetailsRendering">hints for rendering message details in Bootstrap alerts</param>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Bootstrap4.CreateErrorAlert(Horseshoe.NET.ExceptionInfo,System.String,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean,System.Nullable{Horseshoe.NET.Bootstrap.Bootstrap4.AlertType},Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Int32,System.Boolean,System.Nullable{Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy})">
            <summary>
            Creates an <c>Alert</c> object from an <c>Exception</c> useful for rendering Bootstrap 'danger' alerts
            </summary>
            <param name="exception">an exception</param>
            <param name="emphasis">boldface text to prepend to the message</param>
            <param name="autoEmphasis">add alert type as <c>emphasis</c></param>
            <param name="closeable">where to add widget for user to close alert</param>
            <param name="fade">whether alert should attempt to fade in and out</param>
            <param name="show">whether alert should be immediately visible</param>
            <param name="encodeHtml">whether to escape HTML markup for display or let it render naturally</param>
            <param name="alertType">alert type</param>
            <param name="typeRendering">define preference for <c>Exception</c> rendering, specifically the exception <c>Type</c></param>
            <param name="includeStackTrace">define preference for <c>Exception</c> rendering, specifically whether to include the stack trace</param>
            <param name="indent">define preference for <c>Exception</c> rendering, specifically how much to indent the stack trace</param>
            <param name="recursive">define preference for <c>Exception</c> rendering, specifically whether to recurse</param>
            <param name="exceptionRendering">define preference for <c>Exception</c> rendering, specifically whether and how to render in a Bootstrap alert</param>
            <returns>an <c>Alert</c> object</returns>
            <returns>an <c>Alert</c> object</returns>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.BootstrapSettings">
            <summary>
            Configuration elements for <c>Horseshoe.NET.Bootstrap</c> classes and methods
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.BootstrapSettings.DefaultExceptionRendering">
            <summary>
            Exception rendering policy configured by the client, if not configured then <c>default</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Bootstrap.BootstrapSettings.DefaultAutoCloseableAlerts">
            <summary>
            Client configured closeability of alerts, if not configured then <c>false</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy">
            <summary>
            Whether and how to render exception details in Bootstrap 'danger' alerts
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy.Preclude">
            <summary>
            Do not render exception details (default)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy.Visible">
            <summary>
            Render exception details (recommendation: hide initially, click to toggle or show)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Bootstrap.ExceptionRenderingPolicy.Hidden">
            <summary>
            Render exception details to a nonvisible element only
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Bootstrap.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Extensions.ToCssClass(Horseshoe.NET.Bootstrap.Bootstrap3.AlertType)">
            <summary>
            Convert an <c>AlertType</c> to a corresponding Bootstrap css class
            </summary>
            <param name="alertType"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Bootstrap.Extensions.ToCssClass(Horseshoe.NET.Bootstrap.Bootstrap4.AlertType)">
            <summary>
            Convert an <c>AlertType</c> to a corresponding Bootstrap css class
            </summary>
            <param name="alertType"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Collections.ArrayUtil">
            <summary>
            A collection of utility methods for arrays
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Pad``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates an array to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Crop``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary)">
            <summary>
            Shrinks an array to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Fit``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0)">
            <summary>
            Inflates or shrinks an array to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Combine``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections into a single array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.CombineDistinct``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections into a single array of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.CombineDistinct``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections into a single array of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="comparer">The compararer used to determine distinctness</param>
            <param name="collections">Collections to combine</param>
            <returns>The combined array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Append``1(``0[],``0[])">
            <summary>
            Appends zero or more items to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Append``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends zero or more items to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.AppendIf``1(System.Boolean,``0[],``0[])">
            <summary>
            Conditionally appends zero or more items to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="array">An array</param>
            <param name="items">Items to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Prepend``1(``0[],``0[])">
            <summary>
            Adds zero or more items to the beginning of an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to prepend</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Prepend``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds zero or more items to the beginning of an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to prepend</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.PrependIf``1(System.Boolean,``0[],``0[])">
            <summary>
            Conditionally adds zero or more items to the beginning an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="array">An array</param>
            <param name="items">Items to prepend</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Append``1(``0[],System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="collections">Collections to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.AppendIf``1(System.Boolean,``0[],System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="array">An array</param>
            <param name="collections">Collections to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.ReplaceAll``1(``0[],``0,``0)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <returns>The modified array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.ReplaceAll``1(``0[],``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <returns>The modified array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.Scoop``1(``0[]@,System.Int32,System.Int32)">
            <summary>
            Removes elements from an array returning a second array with the removed elements
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">A collection</param>
            <param name="startIndex">Start index</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ArrayUtil.ScoopOffTheEnd``1(``0[]@,System.Int32)">
            <summary>
            Removes elements from the end of an array returning a second array with the removed elements
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">A collection</param>
            <param name="length">Length</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Collections.CollectionBoundary">
            <summary>
            The start or end of a collection (default is <see cref="F:Horseshoe.NET.Collections.CollectionBoundary.End"/>)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Collections.CollectionBoundary.End">
            <summary>
            The end of a collection
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Collections.CollectionBoundary.Start">
            <summary>
            The start of a collection
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Collections.CollectionUtil">
            <summary>
            A collection of utility methods for <c>IEnumerable</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a new <c>List&lt;T&gt;</c> from any collection.
            </summary>
            <typeparam name="T">A collection type.</typeparam>
            <param name="collection">A collection to copy into the list.</param>
            <returns>A new <c>List&lt;T&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts a collection as <c>List&lt;T&gt;</c> if such a cast is available, otherwise creates a new <c>List&lt;T&gt;</c> from the collection.
            </summary>
            <typeparam name="T">A collection type.</typeparam>
            <param name="collection">A collection to cast to a list.</param>
            <returns>A collection as a <c>List&lt;T&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean,System.Boolean)">
            <summary>
            Inflates a list to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Crop``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,System.Boolean)">
            <summary>
            Shrinks a list to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Fit``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates or shrinks a list to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Combine``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.CombineDistinct``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections into a single list of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.CombineDistinct``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more collections into a single list of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="comparer">The compararer used to determine distinctness</param>
            <param name="collections">Collections to combine</param>
            <returns>The combined collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf``1(System.Boolean,System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf``1(System.Boolean,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Append_KeepOrig``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf_KeepOrig``1(System.Boolean,System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf_KeepOrig``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Append_KeepOrig``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf_KeepOrig``1(System.Boolean,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.AppendIf_KeepOrig``1(System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ReplaceAll``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ReplaceAll``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Tests a collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, returns <c>collection.Any()</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="items">Items to search for (optional, returns <c>collection.Any()</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Tests a collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, returns <c>collection.Any()</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="comparer">A comparer</param>
            <param name="items">Items to search for (optional, returns <c>collection.Any()</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAnyIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Tests a <c>string</c> collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, also returns <c>false</c>.
            </summary>
            <param name="collection">A collection of <c>string</c></param>
            <param name="items">Items to search for (optional, but returns <c>false</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection to search</param>
            <param name="items">Items to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <param name="comparer">An equality comparer</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.ContainsAllIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests a <c>string</c> collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.IsIdentical``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Compares two collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.IsIdentical``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean,System.Boolean)">
            <summary>
            Compares two collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="comparer">An equality comparer</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.IsIdenticalIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Compares two <c>string</c> collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.CollectionUtil.Dump(System.Collections.Generic.IEnumerable{System.Object[]},System.String[])">
            <summary>
            Displays the object arrays in <c>string</c> format.
            </summary>
            <param name="objectArrays">A collection of <c>object[]</c>.</param>
            <param name="columnNames">Optional. The names of the corresponding columns.</param>
            <returns>A <c>string</c> representation of the collection.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Collections.DictionaryUtil">
            <summary>
            A collection of utility methods for <c>IDictionary</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.Extract``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes and returns a value from a dictionary, like <c>Array.pop()</c> in JavaScript
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A non-null dictionary</param>
            <param name="key">The key to search</param>
            <param name="item">The extracted item</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys right-to-left (right-most replaces left-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.Append``2(System.Func{``1,``1,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys right-to-left (right-most replaces left-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="mergeFunc">The function that merges left/right values when identical keys are encountered</param>
            <param name="dictionary">A dictionary</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.AppendMergeLeftToRight``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Appends zero or more dictionaries to a bas, merges identical keys left-to-right (left-most replaces right-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.Combine``2(System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys right-to-left (right-most replaces left-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionaries">Dictionaries to combine</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.Combine``2(System.Func{``1,``1,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys left-to-right (left-most replaces right-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="mergeFunc">The function that merges left/right values when identical keys are encountered</param>
            <param name="dictionaries">Dictionaries to combine</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.DictionaryUtil.CombineMergeLeftToRight``2(System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys left-to-right (left-most replaces right-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionaries">Dictionaries to combine</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Collections.Extensions">
            <summary>
            A collection of extension methods for connection several types of <c>Collection</c> with <c>Horseshoe.NET</c> collection utilities
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts a collection as <c>List&lt;T&gt;</c> if such a cast is available, otherwise creates a new <c>List&lt;T&gt;</c> from the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns>A collection as a <c>List&lt;T&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean,System.Boolean)">
            <summary>
            Inflates a list to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Crop``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,System.Boolean)">
            <summary>
            Shrinks a list to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Fit``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates or shrinks a list to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized collection</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="items">Items to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="collections">Collections to append</param>
            <returns>The appended collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <returns>The modified collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <returns>The modified collection</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Tests a collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, returns <c>collection.Any()</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="items">Items to search for (optional, returns <c>collection.Any()</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Tests a collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, returns <c>collection.Any()</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="comparer">A comparer</param>
            <param name="items">Items to search for (optional, returns <c>collection.Any()</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAnyIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.String[])">
            <summary>
            Tests a <c>string</c> collection for contents - <c>collection</c>, if null, returns <c>false</c> and <c>items</c>, if omitted, also returns <c>false</c>.
            </summary>
            <param name="collection">A collection of <c>string</c></param>
            <param name="items">Items to search for (optional, but returns <c>false</c> if omitted)</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection to search</param>
            <param name="items">Items to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Tests a collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <param name="comparer">An equality comparer</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ContainsAllIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tests a <c>string</c> collection for contents - either <c>collection</c>, if omitted, returns <c>false</c>.
            </summary>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to find</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.IsIdentical``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Compares two collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.IsIdentical``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean,System.Boolean)">
            <summary>
            Compares two collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="comparer">An equality comparer</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.IsIdenticalIgnoreCase(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Compares two <c>string</c> collections for equality - a <c>null</c> and an empty <c>collection</c> are considered identical in this method
            </summary>
            <param name="controlCollection">A collection to search</param>
            <param name="compareCollection">A collection to compare</param>
            <param name="ignoreOrder"><c>true</c> if not an order dependent comparison</param>
            <param name="compareDistinctValuesOnly"><c>true</c> if only considering distinct values</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Locates the index of an item in the collection
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="item">An item</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.LastIndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Locates the last index of an item in the collection
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collection">A collection</param>
            <param name="item">An item</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.StartsWith``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Checks if the supplied item is the first of the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">A collection</param>
            <param name="item">An item</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.In``1(``0,``0[])">
            <summary>
            Inspired by SQL, determines if an item is one of a supplied array of values
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="obj">The item to locate</param>
            <param name="collection">The collection to search</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.In``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Inspired by SQL, determines if an item is one of a supplied array of values
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="obj">The item to locate</param>
            <param name="comparer">Optional, an equality comparer</param>
            <param name="collection">The collection to search</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.In``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Inspired by SQL, determines if an item is found in a collection
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="obj">The item to locate</param>
            <param name="collection">The collection to search</param>
            <param name="comparer">Optional, an equality comparer</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.InIgnoreCase(System.String,System.String[])">
            <summary>
            Inspired by SQL, determines if a string is one of a supplied array of values (not case-sensitive)
            </summary>
            <param name="text">The string to locate</param>
            <param name="collection">The string collection to search</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.InIgnoreCase(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inspired by SQL, determines if a string is found in a collection (not case-sensitive)
            </summary>
            <param name="text">The string to locate</param>
            <param name="collection">The string collection to search</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Render(System.Collections.Generic.IEnumerable{System.Object[]},System.String,System.String)">
            <summary>
            Renders a collection of arrays to a multiline string
            </summary>
            <param name="objectArrays">a collection of arrays</param>
            <param name="separator"></param>
            <param name="displayNullAs"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Pad``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean,System.Boolean)">
            <summary>
            Inflates a list to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Crop``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,System.Boolean)">
            <summary>
            Shrinks a list to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Fit``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates or shrinks a list to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.List{``0},System.Boolean,``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.List{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(System.Collections.Generic.List{``0},``0,``0,System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(System.Collections.Generic.List{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Pad``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates an array to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Crop``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary)">
            <summary>
            Shrinks an array to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Fit``1(``0[],System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0)">
            <summary>
            Inflates or shrinks an array to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <returns>The resized array</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(``0[],``0[])">
            <summary>
            Appends zero or more items to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(``0[],System.Boolean,``0[])">
            <summary>
            Conditionally appends zero or more items to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="items">Items to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Prepend``1(``0[],``0[])">
            <summary>
            Adds zero or more items to the beginning an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="items">Items to prepend</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.PrependIf``1(``0[],System.Boolean,``0[])">
            <summary>
            Conditionally adds zero or more items to the beginning of an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="items">Items to prepend</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``1(``0[],System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="collections">Collections to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendIf``1(``0[],System.Boolean,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to an array
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="collections">Collections to append</param>
            <returns>The appended array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(``0[],``0,``0)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <returns>The modified array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ReplaceAll``1(``0[],``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="array">An array</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <returns>The modified array</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Trim(System.String[])">
            <summary>
            Trims the items in a <c>string[]</c>
            </summary>
            <param name="array">A <c>string[]</c></param>
            <returns>The original <c>string[]</c> with its items trimmed</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Zap(System.String[])">
            <summary>
            Zaps the items in a <c>string[]</c>
            </summary>
            <param name="array">A <c>string[]</c></param>
            <returns>The original <c>string[]</c> with its items zapped</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ZapAndPrune(System.String[])">
            <summary>
            Zaps the items in a <c>string[]</c> and removes any <c>null</c>s
            </summary>
            <param name="array">A <c>string[]</c></param>
            <returns>The original <c>string[]</c> with trimmed items if zapping resulted in zero <c>null</c>s, otherwise a new, shorter <c>string[]</c> with trimmed items</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Extract``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Removes and returns a value from a dictionary, like <c>Array.pop()</c> in JavaScript
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A non-null dictionary</param>
            <param name="key">The key to search</param>
            <param name="item">The extracted item</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys right-to-left (right-most replaces left-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Append``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``1,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Combines multiple dictionaries into one, merges identical keys right-to-left (right-most replaces left-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="mergeFunc">The function that merges left/right values when identical keys are encountered</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AppendMergeLeftToRight``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Appends zero or more dictionaries to a bas, merges identical keys left-to-right (left-most replaces right-most)
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="dictionariesToAppend">Dictionaries to append</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.StringDump``2(System.Collections.Generic.IDictionary{``0,``1},System.String,System.String)">
            <summary>
            Displays a dictionary's contents as a string
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="equals">Equality operator</param>
            <param name="separator">Separator</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.StringDumpToGrid``2(System.Collections.Generic.IDictionary{``0,``1},Horseshoe.NET.Text.TextGrid.BorderPolicy)">
            <summary>
            Displays a dictionary's contents as a grid
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="borderPolicy">The border policy</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AddAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``1,``1})">
            <summary>
            Adds all supplied key/value pairs to a dictionary, with merging
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="keyValuePairs">The key/value pairs to add</param>
            <param name="mergeFunc">The function that merges left/right values when identical keys are encountered</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AddIfUnique``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds a value to a dictionary only if the key does not already exist
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="key">A key</param>
            <param name="value">A value</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AddOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Adds a value to a dictionary, if the key already exist the previous value is replaced
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <param name="key">A key</param>
            <param name="value">A value</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.AsImmutable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates an immutable version of a dictionary
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="dictionary">A dictionary</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Trim(System.Collections.Generic.List{System.String})">
            <summary>
            Trims the items in a <c>List&lt;string&gt;</c>
            </summary>
            <param name="list">A <c>List&lt;string&gt;</c></param>
            <returns>The original <c>List&lt;string&gt;</c> with its items trimmed</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Zap(System.Collections.Generic.List{System.String})">
            <summary>
            Zaps the items in a <c>List&lt;string&gt;</c>
            </summary>
            <param name="list">A <c>List&lt;string&gt;</c></param>
            <returns>The original <c>List&lt;string&gt;</c> with its items zapped</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.ZapAndPrune(System.Collections.Generic.List{System.String})">
            <summary>
            Zaps the items in a <c>List&lt;string&gt;</c> and removes any <c>null</c>s
            </summary>
            <param name="list">A <c>List&lt;string&gt;</c></param>
            <returns>The original <c>List&lt;string&gt;</c> with trimmed items minus <c>null</c>s</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.Extensions.Dump``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Renders this entire <c>IDictionary</c> to text
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Collections.ImmutableDictionary`2">
            <summary>
            An <c>IDictionary</c> whose alter methods have been disabled with <see cref="T:System.NotImplementedException"/>
            </summary>
            <typeparam name="TKey">key type</typeparam>
            <typeparam name="TValue">value type</typeparam>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor">
            <summary>
            Create new <c>ImmutableDictionary</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor(System.Int32)">
            <summary>
            Create new <c>ImmutableDictionary</c>
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create new <c>ImmutableDictionary</c>
            </summary>
            <param name="comparer">An equality comparer</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create new <c>ImmutableDictionary</c> from an existing dictionary
            </summary>
            <param name="dictionary">a dictionary</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create new <c>ImmutableDictionary</c>
            </summary>
            <param name="capacity">initial capacity</param>
            <param name="comparer">An equality comparer</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Create new <c>ImmutableDictionary</c> from an existing dictionary
            </summary>
            <param name="dictionary">a dictionary</param>
            <param name="comparer">An equality comparer</param>
        </member>
        <member name="P:Horseshoe.NET.Collections.ImmutableDictionary`2.Item(`0)">
            <summary>
            Indexer for this <c>ImmutableDictionary</c>
            </summary>
            <param name="key"></param>
            <returns>The value corresponding to the supplied key</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Horseshoe.NET.Collections.ImmutableDictionary`2.Keys">
            <summary>
            The collection of keys for this <c>ImmutableDictionary</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Collections.ImmutableDictionary`2.Values">
            <summary>
            The collection of values for this <c>ImmutableDictionary</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Collections.ImmutableDictionary`2.Count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Collections.ImmutableDictionary`2.IsReadOnly">
            <summary>
            Whether this <c>ImmutableDictionary</c> is read-only (<c>true</c>)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Add(`0,`1)">
            <summary>
            Disabled.  Adds an item to the <c>IDictionary</c>.
            </summary>
            <param name="key">a key</param>
            <param name="value">a value</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Disabled.  Adds an item to the <c>IDictionary</c>.
            </summary>
            <param name="item">a <c>KeyValuePair</c></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Clear">
            <summary>
            Disabled.  Removes all key/vlaue mappings from this <c>IDictionary</c>.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns whether this <c>IDictionary</c> contains a specific <c>KeyValuePair</c>
            </summary>
            <param name="item">a <c>KeyValuePair</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.ContainsKey(`0)">
            <summary>
            Returns whether this <c>IDictionary</c> contains a specific key
            </summary>
            <param name="key">a key</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of this <c>IDictionary</c> to a <c>KeyValuePair[]</c>
            </summary>
            <param name="array">an array</param>
            <param name="arrayIndex">the 0-based index in <c>array</c> where copying begins</param>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.GetEnumerator">
            <summary>
            Retuns and enumerator that iterates through this <c>ImmutableDictionary</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Remove(`0)">
            <summary>
            Disabled.  Removes the element with the specified key from this <c>IDictionary</c>.
            </summary>
            <param name="key">a key</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Disabled.  Removed the supplied <c>KeyValuePair</c> from this <c>IDictionary</c>.
            </summary>
            <param name="item">a <c>KeyValuePair</c></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ImmutableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key">a key</param>
            <param name="value">a velue</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Collections.ListUtil">
            <summary>
            A collection of <c>List</c> utility methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Pad``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean,System.Boolean)">
            <summary>
            Inflates a list to the desired target size by padding items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="cannotExceedTargetSize"><c>true</c> if an exception should be thrown for oversized lists</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Crop``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,System.Boolean)">
            <summary>
            Shrinks a list to the desired target size by removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="boundary">End (default) or Start</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Fit``1(System.Collections.Generic.List{``0},System.Int32,Horseshoe.NET.Collections.CollectionBoundary,Horseshoe.NET.Collections.CollectionBoundary,``0,System.Boolean)">
            <summary>
            Inflates or shrinks a list to the desired target size by padding or removing items at the indicated boundary
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="targetSize">The desired size of the list after padding</param>
            <param name="cropBoundary">End (default) or Start</param>
            <param name="padBoundary">End (default) or Start</param>
            <param name="padWith">Item to use for padding</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The resized list</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Combine``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more lists
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.CombineDistinct``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more lists into a single list of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="collections">Collections to combine</param>
            <returns>The combined list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.CombineDistinct``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combines zero or more lists into a single list of distinct values
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="comparer">The compararer used to determine distinctness</param>
            <param name="collections">Collections to combine</param>
            <returns>The combined list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Append``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf``1(System.Boolean,System.Collections.Generic.List{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf``1(System.Func{``0,System.Boolean},System.Collections.Generic.List{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Append``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf``1(System.Boolean,System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf``1(System.Func{``0,System.Boolean},System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Append_KeepOrig``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf_KeepOrig``1(System.Boolean,System.Collections.Generic.List{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf_KeepOrig``1(System.Func{``0,System.Boolean},System.Collections.Generic.List{``0},``0[])">
            <summary>
            Conditionally appends zero or more items to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="items">Items to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.Append_KeepOrig``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf_KeepOrig``1(System.Boolean,System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition"><c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.AppendIf_KeepOrig``1(System.Func{``0,System.Boolean},System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Conditionally appends zero or more collections to a list
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="condition">A required function that returns <c>true</c> or <c>false</c></param>
            <param name="list">A list</param>
            <param name="collections">Collections to append</param>
            <returns>The appended list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.ReplaceAll``1(System.Collections.Generic.List{``0},``0,``0,System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified list</returns>
        </member>
        <member name="M:Horseshoe.NET.Collections.ListUtil.ReplaceAll``1(System.Collections.Generic.List{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Replace each occurrance of <c>item</c> with <c>replacement</c>
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="list">A list</param>
            <param name="item">An item to replace</param>
            <param name="replacement">The replacement item</param>
            <param name="comparer">An equality comparer</param>
            <param name="keepOriginalListDataSource"><c>true</c> will prevent internally creating a new <c>List&lt;T&gt;</c> if <c>collection</c> is already a <c>List&lt;T&gt;</c> instance - this is to improve performance</param>
            <returns>The modified list</returns>
        </member>
        <member name="T:Horseshoe.NET.Compare.IComparator`1">
            <summary>
            Defines all properties and methods common to Horseshoe.NET comparators.
            </summary>
            <typeparam name="T">A comparable type.</typeparam>
        </member>
        <member name="P:Horseshoe.NET.Compare.IComparator`1.Mode">
            <summary>
            The compare mode, e.g. Equals, Contains, Between, etc.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Compare.IComparator`1.IsMatch(`0)">
            <summary>
            Indicates whether the input item is a criteria match.
            </summary>
            <param name="input"></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Compare.CompareException">
            <summary>
            A specialized exception for comparison operations.  
            Not used extensively in the Horseshoe.NET.Compare classes but available for public use.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Compare.CompareException.#ctor(System.String)">
            <summary>
            Creates a new <c>CompareException</c>.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Horseshoe.NET.Compare.CompareException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>CompareException</c>.
            </summary>
            <param name="message">A message.</param>
            <param name="ex">An inner exception.</param>
        </member>
        <member name="T:Horseshoe.NET.Compare.RegexComparator">
            <summary>
            Everything needed to perform a standard regular expression comparison bundled into a single class.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Compare.RegexComparator.Mode">
            <summary>
            The compare mode, e.g. Equals, Contains, Between, etc.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Compare.RegexComparator.Regex">
            <summary>
            The resultant regular expression.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Compare.RegexComparator.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <c>RegexComparator</c>;
            </summary>
            <param name="expression">A regular expression.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the regular expression, default is <c>false</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Compare.RegexComparator.IsMatch(System.String)">
            <summary>
            Indicates whether the input item is a criteria match.
            </summary>
            <param name="input"></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Compare.CompareMode">
            <summary>
            Specifies how input item should compare with criteria value(s) to be included in the results.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.Equals">
            <summary>
            The input item must equal the criterium (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.Contains">
            <summary>
            The text item must contain the criterium (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.StartsWith">
            <summary>
            The text item must start with the criterium (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.EndsWith">
            <summary>
            The text item must end with the criterium (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.GreaterThan">
            <summary>
            The input item must follow the criterium using natural ordering (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.GreaterThanOrEquals">
            <summary>
            The input item must follow the criterium using natural ordering or be equal to it (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.LessThan">
            <summary>
            The input item must precede the criterium using natural ordering (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.LessThanOrEquals">
            <summary>
            The input item must precede the criterium using natural ordering or be equal to it (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.Between">
            <summary>
            The input item must be between both criteria using natural ordering or equal either (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.BetweenExclusive">
            <summary>
            The input item must be between both criteria using natural ordering but equal to beither (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.In">
            <summary>
            The input item must equal one of the criteria (case-sensitivity can be part of the implementation).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.IsNull">
            <summary>
            The input item must be null.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.IsNullOrWhitespace">
            <summary>
            The text item must be null, blank or contain only whitespaces.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Compare.CompareMode.Regex">
            <summary>
            The text item must match the criterium regular expression.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Compare.Comparator`1">
            <summary>
            Everything needed to perform a standard comparison bundled into a single class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Horseshoe.NET.Compare.Comparator`1.Mode">
            <summary>
            The compare mode, e.g. Equals, Contains, Between, etc.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Compare.Comparator`1.Criteria">
            <summary>
            The criteria value(s) to compare against.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Compare.Comparator`1.IgnoreCase">
            <summary>
            Whether to ignore the letter case of the criteria.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator`1.IsMatch(`0)">
            <summary>
            Indicates whether the input item is a criteria match.
            </summary>
            <param name="input"></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Compare.Comparator">
            <summary>
            Factory methods for validating, building and running <c>Comparator</c> instances.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Build``1(Horseshoe.NET.Compare.CompareMode,``0,System.Boolean)">
            <summary>
            Builds a new <c>Comparator&lt;T&gt;</c> with a single criterium.
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Build(Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean)">
            <summary>
            Builds a new <c>Comparator&lt;T&gt;</c> with a single criterium.
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Build``1(Horseshoe.NET.Compare.CompareMode,System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Builds a new <c>Comparator&lt;T&gt;</c> with more than one critera value.
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Equals``1(``0,System.Boolean)">
            <summary>
            Creates a new 'Equals' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Contains(System.String,System.Boolean)">
            <summary>
            Creates a new 'Contains' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.StartsWith(System.String,System.Boolean)">
            <summary>
            Creates a new 'StartsWith' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.EndsWith(System.String,System.Boolean)">
            <summary>
            Creates a new 'EndsWith' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.GreaterThan``1(``0,System.Boolean)">
            <summary>
            Creates a new 'GreaterThan' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.GreaterThanOrEquals``1(``0,System.Boolean)">
            <summary>
            Creates a new 'GreaterThanOrEquals' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.LessThan``1(``0,System.Boolean)">
            <summary>
            Creates a new 'LessThan' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.LessThanOrEquals``1(``0,System.Boolean)">
            <summary>
            Creates a new 'LessThanOrEquals' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Between``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Creates a new 'Between' comparator based on the supplied criteria.
            </summary>
            <param name="criteria">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.BetweenExclusive``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Creates a new 'BetweenExclusive' comparator based on the supplied criteria.
            </summary>
            <param name="criteria">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.In``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Creates a new 'In' comparator based on the supplied criteria.
            </summary>
            <param name="criteria">What to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.IsNull">
            <summary>
            Creates a new 'IsNull' comparator based on the supplied criteria.
            </summary>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.IsNullOrWhitespace">
            <summary>
            Creates a new 'IsNullOrWhitespace' comparator based on the supplied criteria.
            </summary>
            <returns>A <c>Comparitor</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.Regex(System.String,System.Boolean)">
            <summary>
            Creates a new 'Regex' comparator based on the supplied criteria.
            </summary>
            <param name="criterium">The regular expression to compare the input(s) against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the regular expression, default is <c>false</c>.</param>
            <returns>A <c>Comparator</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Compare.Comparator.IsMatch``1(``0,Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues,System.Boolean)">
            <summary>
            Indicates whether the input item is a criteria match.
            </summary>
            <param name="inputItem">The item to compare against the criteria.</param>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">The criteria value(s) to compare against.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the criteria, default is <c>false</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleXApp">
            <summary>
            The heart of <c>ConsoleX</c> console applications including app launching logic 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.DefaultWelcomeValues">
            <summary>
            Sample welcome banner text
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleXApp.StartConsoleApp(Horseshoe.NET.ConsoleX.ConsoleXApp)">
            <summary>
            Launches the app and, if <c>MainMenu</c> is implemented, starts menu automation
            </summary>
            <param name="app">A <c>ConsoleXApp</c> instance</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleXApp.StartConsoleApp``1">
            <summary>
            Launches the app and, if <c>MainMenu</c> is implemented, starts menu automation
            </summary>
            <typeparam name="T">Subclass of <c>ConsoleXApp</c> (typically Program.cs)</typeparam>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.LoopMode">
            <summary>
            Set the loop mode (i.e. 'Continuous', 'ClearScreen'), default is 'Continuous'
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.Looping">
            <summary>
            Displays whether looping is on (i.e. LoopMode = 'Continuous' or 'ClearScreen')
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.WelcomeMessage">
            <summary>
            String or array of strings to display at app startup
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.MainMenuTitle">
            <summary>
            The title to display above the main menu, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.MainMenu">
            <summary>
            Collection of initial routines to choose from at app startup
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.MainMenuColumns">
            <summary>
            The number of columns in which to render the main menu
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.ConfigureTextGrid">
            <summary>
            A mechanism for configuring the menu's rendering <c>TextGrid</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.ConfigureMainMenuRoutines">
            <summary>
            Creates a configuration for main menu routines
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.OnMainMenuSelecting">
            <summary>
            Action to perform when user selects a menu item from <c>MainMenu</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.OnMainMenuRoutineAutoRunComplete">
            <summary>
            Action to perform when a <c>MainMenu</c> routine completes
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ConsoleXApp.OnMainMenuRoutineError">
            <summary>
            Action to perform when a <c>MainMenu</c> routine throws an exception
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleXApp.Run">
            <summary>
            Override this for a non-interactive console app expereience
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleXApp.BuildMainMenuRoutine(System.String,System.Action,System.Action{Horseshoe.NET.ConsoleX.RoutineX},System.Action{System.Exception})">
            <summary>
            Build a non-interactive <c>Routine</c> as an item for the main menu
            </summary>
            <param name="text">A title</param>
            <param name="action">The action to execute when this routine is run</param>
            <param name="configure">An action to custom configure the this routine</param>
            <param name="onError">An action to custom handle uncaught exceptions</param>
            <returns>A <c>Routine</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleXApp.FindMainMenuRoutines(System.String[])">
            <summary>
            Search the calling assembly for subclasses of RoutineX and instantiate them into a menu list in alpha order
            </summary>
            <param name="namespacesToMatch">Select routines only in this namespace, if provided</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation">
            <summary>
            A suite of benign exceptions (expected to be caught immediately) for performing basic app navigation
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.RestartRoutine">
            <summary>
            Raises a specific subclass of <c>ConsoleNavigation</c> exception listened for in <c>RoutineX</c> to skip to the end of the routine and naturally start over
            </summary>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.RestartRoutineException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitRoutine">
            <summary>
            Raises a specific subclass of <c>ConsoleNavigation</c> exception listened for in <c>RoutineX</c> exit the routine and return to the previous menu
            </summary>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitRoutineException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitApp">
            <summary>
            Raises a specific subclass of <c>ConsoleNavigation</c> exception listened for in <c>ConsoleXApp</c> exit the application
            </summary>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitAppException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPassword">
            <summary>
            Exits password prompts promptly
            </summary>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPrompt">
            <summary>
            Exits prompts
            </summary>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPrompt(System.String)">
            <summary>
            Exits prompts
            </summary>
            <param name="message"></param>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.#ctor">
            <summary>
            Create a new <c>ConsoleNavigation</c> instance
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.#ctor(System.String)">
            <summary>
            Create a new <c>ConsoleNavigation</c> instance
            </summary>
            <param name="message">a message to carry through the exception</param>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.RestartRoutineException">
            <summary>
            This subclass of <c>ConsoleNavigation</c> is listened for in routines which then skips to the end then naturally loops back to the beginning
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.RestartRoutineException.#ctor">
            <summary>
            Create a new <c>RestartRoutineException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitRoutineException">
            <summary>
            This subclass of <c>ConsoleNavigation</c> is listened for in routines which then exits the loop and return to the previous menu / routine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitRoutineException.#ctor">
            <summary>
            Create a new <c>ExitRoutineException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitAppException">
            <summary>
            This subclass of <c>ConsoleNavigation</c> is listened for in <c>ConsoleXApp</c>s which then exits the application
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.ExitAppException.#ctor">
            <summary>
            Create a new <c>ExitAppException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException">
            <summary>
            This subclass of <c>ConsoleNavigation</c> must be listened for in client code when <c>cancelable == true</c> in <c>PromptX.Password[Secure]()</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException.#ctor">
            <summary>
            Create a new <c>CancelPasswordException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException">
            <summary>
            This subclass of <c>ConsoleNavigation</c> is listened for in <c>PromptX.List()</c>s which then exits the prompt for a list value
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException.#ctor">
            <summary>
            Create a new <c>PromptCanceledException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException.#ctor(System.String)">
            <summary>
            Create a new <c>PromptCanceledException</c>
            </summary>
            <param name="message">a message</param>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ExceptionRendering">
            <summary>
            Global exception rendering preferences
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.TypeRendering">
            <summary>
            Preferences for rendering the exception class name
            </summary>
            <remarks><seealso cref="T:Horseshoe.NET.ExceptionTypeRenderingPolicy"/></remarks>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.IncludeDateTime">
            <summary>
            Set to <c>true</c> to include date/time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.IncludeMachineName">
            <summary>
            Set to <c>true</c> to include machine name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.IncludeStackTrace">
            <summary>
            Set to <c>true</c> to include stack trace
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.Indent">
            <summary>
            How deep to indent new lines (default = 2)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.ExceptionRendering.Recursive">
            <summary>
            Set to <c>true</c> to include all the inner exceptions recursively
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Extensions">
            <summary>
            A handful of extension methods used by <c>ConsoleX</c> and may be used by client code as well
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsLetter(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates and ascii letter
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsNumber(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates a number
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsLetterOrDigit(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates a letter or number
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsSpace(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates a space
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsSpecialCharacter(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates a special character or punctuation
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsPunctuation(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates punctuation
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Extensions.IsCursorNavigation(System.ConsoleKeyInfo)">
            <summary>
            Whether a key stroke indicates keyboard navigation
            </summary>
            <param name="info">a key stroke</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.ListIndexPolicy">
            <summary>
            Determines if lists are rendered with selection indexes and whether such indexes are 0-based
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ConsoleX.ListIndexPolicy.None">
            <summary>
            Display lists with no indexes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ConsoleX.ListIndexPolicy.DisplayZeroBased">
            <summary>
            Display lists with zero based indexes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ConsoleX.ListIndexPolicy.DisplayOneBased">
            <summary>
            Display lists with one-based indexes
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.LoopMode">
            <summary>
            Determines the behavior of the app, whether the screen clears for each new routine
            or if the display is continuous.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ConsoleX.LoopMode.Continuous">
            <summary>
            Continuous display (default)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ConsoleX.LoopMode.ClearScreen">
            <summary>
            Screen clears for each new routine
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.MenuHeader">
            <summary>
            A specialized non-selectable <c>MenuObject</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.MenuHeader.#ctor(System.String)">
            <summary>
            Create a new <c>MenuHeader</c>
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.MenuObject">
            <summary>
            The abstract superclass of all <c>ConsoleX</c> menu items
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuObject.Text">
            <summary>
            The text to be displayed in a menu or <c>Routine</c> banner
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.MenuObject.#ctor">
            <summary>
            Base constructor for menu items
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.MenuObject.#ctor(System.String)">
            <summary>
            Base constructor for menu items
            </summary>
            <param name="text">the text to display in the menu</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.MenuObject.ToString">
            <summary>
            Display this <c>MenuObject</c>'s <c>Text</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.MenuObject.Equals(Horseshoe.NET.ConsoleX.MenuObject)">
            <summary>
            Equality comparison
            </summary>
            <param name="other">another <c>MenuObject</c></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.MenuSelection`1">
            <summary>
            <c>PromptX.Menu()</c> returns instances of this class when a menu item is selected
            </summary>
            <typeparam name="T">a menu item type</typeparam>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedItem">
            <summary>
            The selected menu item (the actual object), otherwise null if arbitary input was allowed and has been input by the user.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedIndex">
            <summary>
            The 1-based index of the selected menu item, if 0 then arbitrary text was entered or multiple indexes were selected 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.MultipleSelection">
            <summary>
            The storage container for multiple results
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedIndices">
            <summary>
            The 1-based indices of the selected menu items. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedSourceIndices">
            <summary>
            The 0-based indices of the selected menu items. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedItems">
            <summary>
            The selected menu items (the actual objects).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedAll">
            <summary>
            True if 'All' was entered at the prompt for a multi-select menu, false otherwise.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.SelectedRoutine">
            <summary>
            Returns the selected <c>Routine</c> (custom menu item or menu item)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.ArbitraryInput">
            <summary>
            Arbitrary input if allowed and has been input by the user.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.MenuSelection`1.CustomMenuItem">
            <summary>
            The custom routine selected by the user via <c>Routine.Command</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator">
            <summary>
            A <c>ConsoleX</c> plugin for traversing the filesystem with customizable actions enabling folder size calculation, recursive deletion, etc.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.Options">
            <summary>
            <c>FileSystemNavigator</c> options
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.SelectedPath">
            <summary>
            The currently visited file or directory path
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.OnPathSelected">
            <summary>
            Action to perform when a path has been selected
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.#ctor(System.String,Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorOptions)">
            <summary>
            Create a new instance of the <c>FileSystemNavigator</c> plugin for <c>ConsoleX</c>
            </summary>
            <param name="text"></param>
            <param name="options"></param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.Run">
            <summary>
            Start crawling the filesystem beginning at the starting directory
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigator.NormalizeDirectoryPath(System.String)">
            <summary>
            Ensures a path does not end in a path separator (except root paths)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorOptions">
            <summary>
            <c>FileSystemNavigator</c> options
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorOptions.StartDirectory">
            <summary>
            Specify the start directory
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorOptions.DirectoryModeOn">
            <summary>
            Whether the crawler only scans directories, default is <c>false</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorOptions.AllowTraversalOutsideStartDirectory">
            <summary>
            Whether "(Go up one directory)" goes outside the start directory, default is <c>false</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSDirectory">
            <summary>
            A class that represents a directory in <c>FileSystemNavigator</c> and is a <c>MenuObject</c> 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSDirectory.Path">
            <summary>
            The directory path
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSDirectory.#ctor(System.String,System.String)">
            <summary>
            Create a new FSDirectory
            </summary>
            <param name="path">a directory path</param>
            <param name="text">a directory name</param>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSFile">
            <summary>
            A class that represents a file in <c>FileSystemNavigator</c> and is a <c>MenuObject</c> 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSFile.Path">
            <summary>
            The file path
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Plugins.FileSystemNavigatorTypes.FSFile.#ctor(System.String,System.String)">
            <summary>
            Create a new FSFile
            </summary>
            <param name="path">a file path</param>
            <param name="text">a file name</param>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.PromptX">
            <summary>
            A collection of methods for prompting users for different types of input on the console
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Input(System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prompts for input, accepts free text as well as certain commands i.e. 'cancel', 'exit' by default
            </summary>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="displayAsRequired">If <c>true</c>, suggests to the renderer to mark this input as required.</param>
            <param name="quickText">an optional common or predictive input that may be entered by the user simply pressing 'Enter' or 'Return'</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="autoTrim">whether to trim leading and trailing whitespaces, default is <c>true</c></param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The text entered by the user</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Input(System.String,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prompts for input, accepts free text as well as certain commands i.e. 'cancel', 'exit' by default
            </summary>
            <param name="prompt">The text to render at the prompt.</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="displayAsRequired">If <c>true</c>, suggests to the renderer to mark this input as required.</param>
            <param name="quickText">an optional common or predictive input that may be entered by the user simply pressing 'Enter' or 'Return'</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="autoTrim">whether to trim leading and trailing whitespaces, default is <c>true</c></param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The text entered by the user</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.InputVerbatim(System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Prompts for input, accepts free text with no string trimming and no command recognition
            </summary>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="displayAsRequired">If <c>true</c>, suggests to the renderer to mark this input as required.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The exact text entered by the user</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.InputVerbatim(System.String,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Prompts for input, accepts free text with no string trimming and no command recognition.
            </summary>
            <param name="prompt">The text to render at the prompt.</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="displayAsRequired">If <c>true</c>, suggests to the renderer to mark this input as required.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The exact text entered by the user</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.NInput(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prompts for input, blanks become <c>null</c>s, accepts free text as well as certain commands i.e. 'cancel', 'exit' by default
            </summary>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The text entered by the user (or <c>null</c>)</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.NInput(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prompts for input, blanks become <c>null</c>s, accepts free text as well as certain commands i.e. 'cancel', 'exit' by default
            </summary>
            <param name="prompt">The text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The text entered by the user (or <c>null</c>)</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Value``1(System.Func{System.String,System.Object},System.Boolean,``0,System.Action{``0},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prompts for typesafe input, accepts <c>T</c> values only as well as certain commands i.e. 'cancel', 'exit' by default.
            Always wrap in try block to catch <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException" />.
            </summary>
            <typeparam name="T">a reference type</typeparam>
            <param name="parser">A custom text-to-value converter</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="quickValue">an optional common or predictive value that may be entered by the user simply pressing 'Enter' or 'Return'</param>
            <param name="validator">an optional validation routine to be run on the parsed input value</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The value entered by the user</returns>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Value``1(System.String,System.Func{System.String,System.Object},System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String,System.String,System.String,System.Text.Encoding,System.Type,System.Boolean,System.Boolean,``0,System.Action{``0},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prompts for typesafe input, accepts <c>T</c> values only as well as certain commands i.e. 'cancel', 'exit' by default.
            Always wrap in try block to catch <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException" />.
            </summary>
            <typeparam name="T">A runtime type.</typeparam>
            <param name="prompt">The text to render at the prompt.</param>
            <param name="parser">An optional custom text-to-value converter</param>
            <param name="numberStyle">Applies to <c>Value&lt;[numeric-type]&gt;()</c>. If supplied, indicates the expected number format.</param>
            <param name="provider">Applies to <c>Value&lt;[numeric-type-or-datetime]&gt;()</c>. An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">Applies to <c>Value&lt;[numeric-type-or-datetime]&gt;()</c>. An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <param name="trueValues">Applies to <c>Value&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">Applies to <c>Value&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="encoding">Applies to <c>Value&lt;byte[]&gt;()</c>. An optional text encoding, e.g. UTF8.</param>
            <param name="inheritedType">An optional type constraint - the type to which the returned <c>Type</c> must be assignable.</param>
            <param name="ignoreCase">Applies to <c>Value&lt;[enum-type-or-bool]&gt;()</c>. If <c>true</c>, the letter case of an enum value <c>string</c> is ignored when converting to the actual <c>enum</c> value, default is <c>false</c>.</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="quickValue">an optional common or predictive value that may be entered by the user simply pressing 'Enter' or 'Return'</param>
            <param name="validator">an optional validation routine to be run on the parsed input value</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <returns>The value entered by the user</returns>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.PromptCanceledException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Enum``1(System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Boolean,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Prompts for <c>enum</c> value, also accepts certain commands i.e. 'cancel', 'exit' by default
            </summary>
            <typeparam name="T">An enum type.</typeparam>
            <param name="title">An optional list title.</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="except">Any <c>enum</c> values you want to omit from the list of choices.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The value entered by the user</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.List``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{Horseshoe.NET.ConsoleX.Title},Horseshoe.NET.ConsoleX.ListIndexPolicy,System.Boolean,System.String,System.Func{``0,System.String},System.Int32,System.Int32)">
            <summary>
            Prompt a user to choose from a collection of items
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="collection">a collection</param>
            <param name="title">a collection title</param>
            <param name="indexPolicy">whether to display an index and whether it is 0-based</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="choicePrompt">the text to render at the prompt.</param>
            <param name="renderer">an alternative to <c>object.ToString()</c> for displaying collection items</param>
            <param name="padBefore">The number of new lines to render before the collection</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The value selected by the user</returns>
            <remarks><seealso cref="M:Horseshoe.NET.ConsoleX.PromptX.Enum``1(System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Boolean,System.Collections.Generic.IList{``0},System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.List``1(System.Collections.Generic.IList{``0},System.Nullable{Horseshoe.NET.ConsoleX.Title},Horseshoe.NET.ConsoleX.ListIndexPolicy,System.Boolean,System.String,System.Func{``0,System.String},System.Int32,System.Int32)">
            <summary>
            Prompt a user to choose from a list of items
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="list">a list</param>
            <param name="title">a list title</param>
            <param name="indexPolicy">whether to display an index and whether it is 0-based</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="choicePrompt">the text to render at the prompt.</param>
            <param name="renderer">an alternative to <c>object.ToString()</c> for displaying list items</param>
            <param name="padBefore">The number of new lines to render before the list</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The value selected by the user</returns>
            <remarks><seealso cref="M:Horseshoe.NET.ConsoleX.PromptX.Enum``1(System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Boolean,System.Collections.Generic.IList{``0},System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.List``1(System.Collections.Generic.IList{``0},System.Int32@,System.Nullable{Horseshoe.NET.ConsoleX.Title},Horseshoe.NET.ConsoleX.ListIndexPolicy,System.Boolean,System.String,System.Func{``0,System.String},System.Int32,System.Int32)">
            <summary>
            Prompt a user to choose from a list of items
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="list">a list</param>
            <param name="selectedIndex">returns the index selected by the user</param>
            <param name="title">a list title</param>
            <param name="indexPolicy">whether to display an index and whether it is 0-based</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="choicePrompt">the text to render at the prompt.</param>
            <param name="renderer">an alternative to <c>object.ToString()</c> for displaying list items</param>
            <param name="padBefore">The number of new lines to render before the list</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <returns>The value selected by the user</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
            <remarks><seealso cref="M:Horseshoe.NET.ConsoleX.PromptX.Enum``1(System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Boolean,System.Collections.Generic.IList{``0},System.Int32,System.Int32)"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Continue(System.String,System.Int32,System.Int32)">
            <summary>
            Prompts a user to press any key to continue
            </summary>
            <param name="prompt">the text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Exit(System.String,System.Int32)">
            <summary>
            Prompts a user to press any key to exit
            </summary>
            <param name="prompt">the text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Password(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prompts a user to enter a password (the password is hidden)
            </summary>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="cancelable">whether to allow escape to throw a <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"/>, remember to catch the exception if <c>true</c>!</param>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Password(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prompts a user to enter a password (the password is hidden)
            </summary>
            <param name="prompt">the text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="cancelable">Whether to allow escape to throw a <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"/>, remember to catch the exception if <c>true</c>!</param>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.PasswordSecure(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prompts a user to enter a secure password (the password is hidden)
            </summary>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="cancelable">whether to allow escape to throw a <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"/>, remember to catch the exception if <c>true</c>!</param>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.PasswordSecure(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prompts a user to enter a secure password (the password is hidden)
            </summary>
            <param name="prompt">the text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="cancelable">whether to allow escape to throw a <see cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"/>, remember to catch the exception if <c>true</c>!</param>
            <exception cref="T:Horseshoe.NET.ConsoleX.ConsoleNavigation.CancelPasswordException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.Menu``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{Horseshoe.NET.ConsoleX.MenuObject},System.Collections.Generic.IList{Horseshoe.NET.ConsoleX.MenuObject},System.Func{``0,System.String},System.Nullable{Horseshoe.NET.ConsoleX.Title},System.String,System.Int32,System.Int32,System.Int32,System.Action{Horseshoe.NET.Text.TextGrid.TextGrid},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Action{System.String},System.Action{Horseshoe.NET.ConsoleX.MenuSelection{``0}},System.Action{Horseshoe.NET.ConsoleX.RoutineX},System.Action{Horseshoe.NET.ConsoleX.RoutineX,System.Exception})">
            <summary>
            Prompts a user to choose a selection from a menu
            </summary>
            <typeparam name="T">type of menu item</typeparam>
            <param name="menuItems">a collection items, special treatment of <c>MenuItem</c>s</param>
            <param name="customItemsToPrepend">custom items to list before the regular menu items</param>
            <param name="customItemsToAppend">custom items to list after the regular menu items</param>
            <param name="renderer">an alternative to <c>object.ToString()</c> for displaying list items</param>
            <param name="title">a title</param>
            <param name="prompt">the text to render at the prompt.</param>
            <param name="padBefore">The number of new lines to render before the prompt.</param>
            <param name="padAfter">The number of new lines to render after the prompt.</param>
            <param name="columns">the number of columns in which to render the list</param>
            <param name="configureTextGrid">exposes a reference to the underlying <c>TextGrid</c> for further configuration</param>
            <param name="allowArbitraryInput">allow arbitrary text in addition to menu item selection</param>
            <param name="allowMultipleSelection">allow entry of multiple list items such as: 1-3, 5, etc.</param>
            <param name="canCancel">whether typing 'cancel' at the prompt can cancel the prompt, default is <c>true</c></param>
            <param name="canExitApp">whether typing 'exit' at the prompt can exit the application, default is <c>true</c></param>
            <param name="onMenuSelecting">an action to perform when user enters a menu selection</param>
            <param name="onMenuSelection">an action to perfrom after menu selection is complete</param>
            <param name="onRoutineAutoRunComplete">an action to perform after selection and autorun of a routine</param>
            <param name="onRoutineAutoRunError">an action to perform after an autorun routine throws an exception</param>
            <returns>The selected menu selection(s)</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.PromptX.AssertIntInRange(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Throws an <c>AssertionFailedException</c> if <c>value</c> is not in the specified range.
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.MenuAndListRealtimeConfigurator">
            <summary>
            An internal class for preventing prompt deadlock, i.e. sets menus / lists unselectable
            if they contain zero items.  Otherwise users would have nothing to select at the prompt.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.RenderX">
            <summary>
            A collection of methods for rendering content to the console
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RenderX.ConsoleWidth">
            <summary>
            The current with of the console window (in characters) minus a padding value of 2
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RenderX.RequiredIndicator">
            <summary>
            Gets or sets what marks required fields, default is <c>"*"</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RenderX.ExceptionRendering">
            <summary>
            Global exception rendering preferences
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Welcome(Microsoft.Extensions.Primitives.StringValues,System.Int32,System.Int32)">
            <summary>
            Render a large banner and welcome message, typically at program start
            </summary>
            <param name="message">A <c>string</c> or <c>string[]</c> to display in the welcome banner</param>
            <param name="padBefore">the number of new lines to render before the banner</param>
            <param name="padAfter">the number of new lines to render after the banner</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.RoutineTitle(Horseshoe.NET.ConsoleX.Title,System.Int32,System.Int32)">
            <summary>
            Render a small banner such as those used in displaying <c>Routine</c> titles
            </summary>
            <param name="title"><c>Title</c> or text</param>
            <param name="padBefore">the number of new lines to render before the banner</param>
            <param name="padAfter">the number of new lines to render after the banner</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Pad(System.Int32,System.String)">
            <summary>
            Render the specified number of new lines
            </summary>
            <param name="pad">the number of new lines to render</param>
            <param name="altText">an optional alternate string to render on each newline in the pad</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.ListTitle(System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Int32,System.Int32)">
            <summary>
            Render a title underlined with dashes (-)
            </summary>
            <param name="title"><c>Title</c> or text</param>
            <param name="padBefore">the number of new lines to render before the title</param>
            <param name="padAfter">the number of new lines to render after the title</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.List``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{Horseshoe.NET.ConsoleX.Title},Horseshoe.NET.ConsoleX.ListIndexPolicy,System.Func{``0,System.String},Horseshoe.NET.ConsoleX.MenuAndListRealtimeConfigurator,System.Int32,System.Int32,System.Int32,System.String,System.Action{Horseshoe.NET.Text.TextGrid.TextGrid})">
            <summary>
            Render a collection of items to the console with or without indexes based on <c>indexPolicy</c>
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="list">a collection of items</param>
            <param name="title"><c>Title</c> or text</param>
            <param name="indexPolicy">whether to display an index and whether it is 0-based</param>
            <param name="renderer">alternative to <c>ToString()</c></param>
            <param name="listConfigurator">internal mechanism for preventing prompt deadlock</param>
            <param name="columns">the number of columns in which to render the collection</param>
            <param name="padBefore">the number of new lines to render before the collection</param>
            <param name="padAfter">the number of new lines to render after the collection</param>
            <param name="requiredIndicator">if the collection belonging to this title is a required selection, mark with this or the default '*'</param>
            <param name="configureTextGrid">exposes a reference to the underlying <c>TextGrid</c> for further configuration</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.List``1(System.Collections.Generic.IList{``0},System.Nullable{Horseshoe.NET.ConsoleX.Title},Horseshoe.NET.ConsoleX.ListIndexPolicy,System.Func{``0,System.String},Horseshoe.NET.ConsoleX.MenuAndListRealtimeConfigurator,System.Int32,System.Int32,System.Int32,System.Action{Horseshoe.NET.Text.TextGrid.TextGrid})">
            <summary>
            Render a list of items to the console with or without indexes based on <c>indexPolicy</c>
            </summary>
            <typeparam name="T">type of item</typeparam>
            <param name="list">a list of items</param>
            <param name="title"><c>Title</c> or text</param>
            <param name="indexPolicy">whether to display an index and whether it is 0-based</param>
            <param name="renderer">alternative to <c>ToString()</c></param>
            <param name="listConfigurator">internal mechanism for preventing prompt deadlock</param>
            <param name="columns">the number of columns in which to render the list</param>
            <param name="padBefore">the number of new lines to render before the list</param>
            <param name="padAfter">the number of new lines to render after the list</param>
            <param name="configureTextGrid">exposes a reference to the underlying <c>TextGrid</c> for further configuration</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Menu``1(System.Collections.Generic.IList{``0},System.Nullable{Horseshoe.NET.ConsoleX.Title},System.Collections.Generic.IList{Horseshoe.NET.ConsoleX.MenuObject},System.Collections.Generic.IList{Horseshoe.NET.ConsoleX.MenuObject},System.Int32,System.Action{Horseshoe.NET.Text.TextGrid.TextGrid},System.Func{``0,System.String},Horseshoe.NET.ConsoleX.MenuAndListRealtimeConfigurator,System.Int32,System.Int32)">
            <summary>
            Render a menu to the console
            </summary>
            <typeparam name="T"></typeparam>
            <param name="menuItems">list of items including <c>MenuItem</c>s</param>
            <param name="title">a title to render above the menu</param>
            <param name="customItemsToPrepend">custom items to list before the regular menu items</param>
            <param name="customItemsToAppend">custom items to list after the regular menu items</param>
            <param name="columns">the number of columns in which to render the list</param>
            <param name="configureTextGrid">exposes a reference to the underlying <c>TextGrid</c> for further configuration</param>
            <param name="renderer">alternative to <c>ToString()</c></param>
            <param name="listConfigurator">internal mechanism for preventing prompt deadlock</param>
            <param name="padBefore">the number of new lines to render before the list</param>
            <param name="padAfter">the number of new lines to render after the list</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Prompt(System.String,System.Boolean,System.String)">
            <summary>
            Renders a prompt for user input e.g. free text, menu selection, etc.
            </summary>
            <param name="prompt">An input prompt.</param>
            <param name="required">If <c>true</c>, forces non-blank input, default is <c>false</c>.</param>
            <param name="requiredIndicator">The optional <c>string</c> value that marks required fields, default is <c>"*"</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Alert(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Render an alert message to the console
            </summary>
            <param name="message">a message</param>
            <param name="centered"><c>true</c> to center on screen</param>
            <param name="padBefore">the number of new lines to render before the alert</param>
            <param name="padAfter">the number of new lines to render after the alert</param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RenderX.Exception(Horseshoe.NET.ExceptionInfo,System.Nullable{Horseshoe.NET.ExceptionTypeRenderingPolicy},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Render an exception to the console
            </summary>
            <param name="ex">an exception </param>
            <param name="typeRendering">preferences for rendering the exception class name</param>
            <param name="includeDateTime"><c>true</c> to include date/time</param>
            <param name="includeMachineName"><c>true</c> to include machine name</param>
            <param name="includeStackTrace"><c>true</c> to include stack trace</param>
            <param name="indent">how deep to indent new lines</param>
            <param name="recursive"><c>true</c> to include all the inner exceptions recursively</param>
            <param name="padBefore">the number of new lines to render before the exception</param>
            <param name="padAfter">the number of new lines to render after the exception</param>
            <remarks><seealso cref="P:Horseshoe.NET.ConsoleX.RenderX.ExceptionRendering"/></remarks>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.RoutineX">
            <summary>
            Represents configurable, interactive or non-interactive synchronous processes or routines
            which are the building blocks of <c>ConsoleX</c> applications
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.AltBannerText">
            <summary>
            An alternate banner for this routine (except if non-interactive)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.MenuTitle">
            <summary>
            A title assigned to the built-in menu
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.Menu">
            <summary>
            A built-in menu to display when this routine is run provided it has no <c>Action</c> (one or the other is required)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.MenuColumns">
            <summary>
            The number of columns in which to render the menu
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.ConfigureTextGrid">
            <summary>
            A mechanism for configuring the menu's rendering <c>TextGrid</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.CustomMenuItemsToPrepend">
            <summary>
            Custom menu items to prepend
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.CustomMenuItemsToAppend">
            <summary>
            Custom menu items to append
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.Command">
            <summary>
            The command to trigger custom menu items (routines)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.Action">
            <summary>
            The code to execute when then routine is run, if not implemented the <c>Menu</c> is triggered instead (one or the other is required)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.AutoAppendExitRoutineMenuItem">
            <summary>
            If <c>true</c>, adds a menu item for exiting the routine to the built-in menu, defaults to <c>AutoAppendExitRoutineMenuItemByDefault</c> which defaults to <c>false</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnError">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnMenuSelecting">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnMenuSelection">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnRoutineAutoRunComplete">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnBeforeNextIteration">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnRoutineRestarting">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnRoutineExiting">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.OnRoutineEnded">
            <summary>
            An event to hook into
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.IsExited">
            <summary>
            Is <c>true</c> if exiting the application (e.g. <c>'exit'</c> has been entered at the menu prompt and <c>allowExit == true</c> 
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.#ctor">
            <summary>
            Create a new routine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.#ctor(System.String)">
            <summary>
            Create a new routine with display text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.Run">
            <summary>
            Override Run() to implement a non-interactive routine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.Configure(System.Action{Horseshoe.NET.ConsoleX.RoutineX})">
            <summary>
            Action to perform at routine create time whose purpose is to configure the routine
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.RoutineX.GlobalConfiguration">
            <summary>
            Action to perform configurations globally on all reoutines
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.Restart">
            <summary>
            Restarts the routine (typically by typing '/' at the prompt if <c>AutoAppendRestartRoutineMenuItem == true</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.Exit">
            <summary>
            Exits the routing (typically by typing 
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.CreateRestartRoutineMenuItem(System.String,System.String,System.Action)">
            <summary>
            Create a specialized menu item that restarts the routine
            </summary>
            <param name="text">The menu item text</param>
            <param name="command">The command to type</param>
            <param name="beforeRestart">Additional action to perform when menu item is selected</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.CreateExitRoutineMenuItem(System.String,System.String,System.Action)">
            <summary>
            Create a specialized menu item that exits the routine and goes back to the previous menu
            </summary>
            <param name="text"></param>
            <param name="command"></param>
            <param name="beforeExit"></param>
            <remarks><seealso cref="P:Horseshoe.NET.ConsoleX.RoutineX.AutoAppendExitRoutineMenuItem"/></remarks>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.BuildMenuRoutine(System.String,System.Action,System.Action{Horseshoe.NET.ConsoleX.RoutineX},System.Action{System.Exception})">
            <summary>
            Build a non-interactive <c>Routine</c>.  Note: It is common to override <see cref="P:Horseshoe.NET.ConsoleX.RoutineX.Menu"/> with an array of routines built by this method.
            </summary>
            <param name="text">A title</param>
            <param name="action">The action to execute when this routine is run</param>
            <param name="configure">An action to custom configure this routine</param>
            <param name="onError">An action to custom handle uncaught exceptions</param>
            <returns>A <c>Routine</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.RoutineX.BuildCustomRoutine(System.String,System.Action,System.String,System.Action{Horseshoe.NET.ConsoleX.RoutineX})">
            <summary>
            Build a custom, non-interactive <c>Routine</c>
            </summary>
            <param name="text">A title</param>
            <param name="action">The action to execute when this routine is run</param>
            <param name="command">The text to type to activate this routine</param>
            <param name="configure">An action to custom configure the this routine</param>
            <returns>A <c>Routine</c> instance</returns>
        </member>
        <member name="T:Horseshoe.NET.ConsoleX.Title">
            <summary>
            A title is text rendered to the console with optional 'Xtra' text for providing
            additional instructions or context.  Some <c>ConsoleX</c> features add an underline
            dashes (-) or equal signs (=) on the line below the title.  By convention, if this
            is the case, any 'Xtra' text will not be underlined.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Title.Text">
            <summary>
            The text to display in the title
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConsoleX.Title.Xtra">
            <summary>
            Optional extra text providing additional instructions or context
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Title</c>
            </summary>
            <param name="text">The title text</param>
            <param name="xtra">Optional, extra text providing additional instructions or context</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.ToString">
            <summary>
            Renders the <c>Title</c> to a <c>string</c>
            </summary>
            <remarks><seealso cref="M:Horseshoe.NET.ConsoleX.Title.Render"/></remarks>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.Render">
            <summary>
            Renders the title but not the underline.  Other components may or may not render the underline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.Equals(System.Object)">
            <summary>
            Equality check
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.GetHashCode">
            <summary>
            Generates a hash code representation of this <c>Title</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.op_Implicit(System.String)~Horseshoe.NET.ConsoleX.Title">
            <summary>
            Implictly converts a <c>string</c> to a <c>Title</c>
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.op_Implicit(Horseshoe.NET.ConsoleX.Title)~System.String">
            <summary>
            Implicitly converts a <c>Title</c> back to a <c>string</c>
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.op_Equality(Horseshoe.NET.ConsoleX.Title,Horseshoe.NET.ConsoleX.Title)">
            <summary>
            Equality operator
            </summary>
            <param name="lhs">a <c>Title</c></param>
            <param name="rhs">another <c>Title</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ConsoleX.Title.op_Inequality(Horseshoe.NET.ConsoleX.Title,Horseshoe.NET.ConsoleX.Title)">
            <summary>
            Inequality operator
            </summary>
            <param name="lhs">a <c>Title</c></param>
            <param name="rhs">another <c>Title</c></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.ConversionException">
            <summary>
            A specialized exception to use when converting values from one unit to another.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ConversionException.IsConverterNotSupplied">
            <summary>
            Indicates that solving this error requires manually supplying a converter, e.g. the built-in converters were inadequate.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="message">A message</param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="message">A message</param>
            <param name="innerException"></param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="innerException">An exception.</param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="sourceType">Converting from this type.</param>
            <param name="destType">Converting to this other type.</param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.Type,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="sourceType">Converting from this type.</param>
            <param name="destType">Converting to this other type.</param>
            <param name="message">A message</param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="M:Horseshoe.NET.ConversionException.#ctor(System.Type,System.Type,System.Exception,System.Boolean)">
            <summary>
            Creates a new <c>ConversionException</c>.
            </summary>
            <param name="sourceType">Converting from this type.</param>
            <param name="destType">Converting to this other type.</param>
            <param name="innerException"></param>
            <param name="isConverterNotSupplied">Indicates that solving this error requires manually supplying a converter.</param>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.RangeOptions">
            <summary>
            <c>DisplayOptions</c> subclass focused on the level of detail of the output.  
            For example, in some situations a range of 2 (1 day 4 hours) might be preferable 
            to a range of 4 (1 day 4 hours 11 minutes 32 seconds)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.RangeOptions.MaxRange">
            <summary>
            Set to a number between 1 and 7
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.RangeOptions.#ctor">
            <summary>
            Creates a new <c>RangeOptions</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.RangeOptions.#ctor(Horseshoe.NET.DateAndTime.RangeOptions)">
            <summary>
            Creates a new <c>RangeOptions</c> from another instance
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.TimePartDisplay">
            <summary>
            Switches specific date time parts on or off in the displayed output using <c>SetOptions</c>.  Options include years, months, days, etc.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DateAndTime.TimePartDisplay.Off">
            <summary>
            Precludes the specific date time part from the output
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DateAndTime.TimePartDisplay.On">
            <summary>
            Includes the specific date time part in the output
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DateAndTime.TimePartDisplay.Auto">
            <summary>
            Allows the specific date time part to be displayed in the output, or not, depending on the algorithm
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.SetOptions">
            <summary>
            A <c>DisplayOptions</c> subclass focused on which specific date time parts to include in the output
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayYears">
            <summary>
            Whether to swith the display of the 'year' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayMonths">
            <summary>
            Whether to swith the display of the 'month' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayDays">
            <summary>
            Whether to swith the display of the 'day' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayHours">
            <summary>
            Whether to swith the display of the 'hour' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayMinutes">
            <summary>
            Whether to swith the display of the 'minute' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplaySeconds">
            <summary>
            Whether to swith the display of the 'second' date time part off, on or auto
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.DisplayMilliseconds">
            <summary>
            Whether to swith the display of the 'millisecond' date time part off, on or auto
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.SetOptions.#ctor">
            <summary>
            Creates a new <c>SetOptions</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.SetOptions.#ctor(Horseshoe.NET.DateAndTime.SetOptions)">
            <summary>
            Creates a new <c>SetOptions</c> fron another instance
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.Auto">
            <summary>
            Pre-built <c>SetOptions</c> with the display of all date time parts switched to 'Auto'
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.SetOptions.On">
            <summary>
            Pre-built <c>SetOptions</c> with the display of all date time parts switched 'On'
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.DisplayOptions">
            <summary>
            The base class for the several diffent options for displaying <c>YearSpan</c> as text
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.YearLabel">
            <summary>
            Label for the 'year' date time part for single year instances, default is " year"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.YearsLabel">
            <summary>
            Label for the 'year' date time part for all but single year instances, default is " years"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothYearLabels">
            <summary>
            Sets both 'year' and 'years' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MonthLabel">
            <summary>
            Label for the 'month' date time part for single month instances, default is " month"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MonthsLabel">
            <summary>
            Label for the 'month' date time part for all but single month instances, default is " months"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothMonthLabels">
            <summary>
            Sets both 'month' and 'months' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.DayLabel">
            <summary>
            Label for the 'day' date time part for single day instances, default is " day"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.DaysLabel">
            <summary>
            Label for the 'day' date time part for all but single day instances, default is " days"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothDayLabels">
            <summary>
            Sets both 'day' and 'days' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.HourLabel">
            <summary>
            Label for the 'hour' date time part for single hour instances, default is " hour"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.HoursLabel">
            <summary>
            Label for the 'hour' date time part for all but single hour instances, default is " hours"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothHourLabels">
            <summary>
            Sets both 'hour' and 'hours' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MinuteLabel">
            <summary>
            Label for the 'minute' date time part for single minute instances, default is " minute"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MinutesLabel">
            <summary>
            Label for the 'minute' date time part for all but single minute instances, default is " minutes"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothMinuteLabels">
            <summary>
            Sets both 'minute' and 'minutes' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.SecondLabel">
            <summary>
            Label for the 'second' date time part for single second instances, default is " second"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.SecondsLabel">
            <summary>
            Label for the 'second' date time part for all but single second instances, default is " seconds"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothSecondLabels">
            <summary>
            Sets both 'second' and 'seconds' labels at the same time
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MillisecondLabel">
            <summary>
            Label for the 'millisecond' date time part for single millisecond instances, default is " millisecond"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.MillisecondsLabel">
            <summary>
            Label for the 'millisecond' date time part for all but single millisecond instances, default is " milliseconds"
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.DisplayOptions.BothMillisecondLabels">
            <summary>
            Sets both 'millisecond' and 'milliseconds' labels at the same time
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.DateUtil">
            <summary>
            Date / time utility methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.IsLeapYear(System.DateTime)">
            <summary>
            Gets whether year referred to in <c>date</c> is a leap year
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.IsLeapYear(System.Int32)">
            <summary>
            Gets whether the specified year is a leap year
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.CountLeapDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets how many leap days occur in the specified date range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.SameDay(System.DateTime,System.DateTime)">
            <summary>
            Equality check of two dates comparing the year, month and day
            </summary>
            <param name="date">a date/time</param>
            <param name="other">another date/time</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.SameMonth(System.DateTime,System.DateTime)">
            <summary>
            Equality check of two dates comparing the year and month only
            </summary>
            <param name="date">a date/time</param>
            <param name="other">another date/time</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.GetNumberOfDaysInMonth(System.DateTime)">
            <summary>
            Gets the number of days in the month and year referred to in <c>date</c>
            </summary>
            <param name="dateTime">a date/time</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.DateUtil.GetNumberOfDaysInMonth(System.Int32,System.Int32)">
            <summary>
            Gets the number of days in the specified month and year
            </summary>
            <param name="year">a year</param>
            <param name="month">a month</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.Extensions">
            <summary>
            Date and time extension methods, some featuring <c>YearSpan</c> functionality.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetAge(System.DateTime,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Calculates age using an advancing month/year algorithm.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">A to <c>DateTime</c>.</param>
            <param name="decimals">How many decimal places to display.</param>
            <returns>A <c>YearSpan</c> instance.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetAgeInYears(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Uses <c>YearSpan</c> to calculate an age rounded down to the year based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <returns>Number of whole years.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetTotalAgeInYears(System.DateTime,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Uses <c>YearSpan</c> to calculate an exact age in years based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <param name="decimals">Optional number of rounding decimals.</param>
            <returns>Age in years with double precision.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetAgeInMonths(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Uses <c>YearSpan</c> to calculate an age rounded down to the month based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <returns>Number of whole months.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetTotalAgeInMonths(System.DateTime,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Uses <c>YearSpan</c> to calculate an exact age in months based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <param name="decimals">Optional number of rounding decimals.</param>
            <returns>Age in months with double precision.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetAgeInDays(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Calculates an age rounded down to the day based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <returns>Number of whole days.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetTotalAgeInDays(System.DateTime,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Calculates an exact age in days based on a 'from' and optional 'to' date.
            </summary>
            <param name="from">A from <c>DateTime</c>.</param>
            <param name="to">An optional to <c>DateTime</c>, if omitted will calculate the age as of right now</param>
            <param name="decimals">Optional number of rounding decimals.</param>
            <returns>Age in days with double precision.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.GetNumberOfDaysInMonth(System.DateTime)">
            <summary>
            Gets the number of days in the month and year referred to in <c>date</c>.
            </summary>
            <param name="date"></param>
            <returns>Number of days.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.IsInLeapYear(System.DateTime)">
            <summary>
            Gets whether year referred to in <c>date</c> is a leap year.
            </summary>
            <param name="date">A date/time.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.IsSameDay(System.DateTime,System.DateTime)">
            <summary>
            Equality check of two dates comparing the year, month and day.
            </summary>
            <param name="date">A date/time.</param>
            <param name="other">Another date/time.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.IsSameMonth(System.DateTime,System.DateTime)">
            <summary>
            Equality check of two dates comparing the year and month only.
            </summary>
            <param name="date">A date/time.</param>
            <param name="other">Another date/time.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.ToFlexDateString(System.DateTime,System.IFormatProvider,System.String)">
            <summary>
            Fast, flexible date formatting based on the current culture by default.
            </summary>
            <param name="date">A date/time.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is only used if <c>provicer == null</c>.</param>
            <returns>A formatted date/time.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.ToFlexTimeString(System.DateTime,System.IFormatProvider,System.String)">
            <summary>
            Fast, flexible time formatting based on the current culture by default.  
            Does not display milliseconds and shortens the output to just hours and minutes if seconds == 0.
            </summary>
            <param name="date">A date/time.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is only used if <c>provicer == null</c>.</param>
            <returns>A formatted date/time.</returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.Extensions.ToFlexDateTimeString(System.DateTime,System.IFormatProvider,System.String)">
            <summary>
            Fast, flexible date/time formatting based on the current culture by default.  
            Does not display milliseconds and shortens the output to just hours and minutes if seconds 
            equals 0 (zero) or just the date if the hours and minutes also equal 0 (zero).
            </summary>
            <param name="date">A date/time.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is only used if <c>provicer == null</c>.</param>
            <returns>A formatted date/time.</returns>
        </member>
        <member name="T:Horseshoe.NET.DateAndTime.YearSpan">
            <summary>
            A complement to <c>TimeSpan</c> that includes months and years
            </summary>
            <seealso cref="T:System.TimeSpan"/>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.From">
            <summary>
            The from date
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.To">
            <summary>
            The to date
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.YearsTimeSpan">
            <summary>
            One of the two interim <c>TimeSpan</c>s used in calculating years and months
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Years">
            <summary>
            The number of whole years represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalYears">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in years with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.MonthsTimeSpan">
            <summary>
            One of the two interim <c>TimeSpan</c>s used in calculating years and months
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Months">
            <summary>
            The number of whole months represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalMonths">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in months with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.DaysTimeSpan">
            <summary>
            The main <c>TimeSpan</c>s used in calculating days, hours, minutes, seconds and milliseconds
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Days">
            <summary>
            The number of whole days represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalDays">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in days with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Hours">
            <summary>
            The number of whole hours represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalHours">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in hours with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Minutes">
            <summary>
            The number of whole minutes represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalMinutes">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in minutes with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Seconds">
            <summary>
            The number of whole seconds represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalSeconds">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in seconds with double precision 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Milliseconds">
            <summary>
            The number of milliseconds represented in this <c>YearSpan</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.TotalMilliseconds">
            <summary>
            The total time represented by this <c>YearSpan</c> expressed in milliseconds 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DateAndTime.YearSpan.Decimals">
            <summary>
            Optional, the number of decimals to use for rounding
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.YearSpan.#ctor(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Creates a new <c>YearSpan</c>
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="decimals"></param>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.YearSpan.ToString">
            <summary>
            Gets a common <c>string</c> representation of this <c>YearSpan</c>, for more display options see <see cref="M:Horseshoe.NET.DateAndTime.YearSpan.ToString(Horseshoe.NET.DateAndTime.DisplayOptions)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DateAndTime.YearSpan.ToString(Horseshoe.NET.DateAndTime.DisplayOptions)">
            <summary>
            Gets a fine-tuned <c>string</c> representation of this <c>YearSpan</c> with options for range, specific sets of date/time parts
            </summary>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>
            <seealso cref="T:Horseshoe.NET.DateAndTime.RangeOptions" />
            <seealso cref="T:Horseshoe.NET.DateAndTime.SetOptions" />
            </remarks>
        </member>
        <member name="T:Horseshoe.NET.Db.DbSettings">
            <summary>
            Configuration settings used across DB implementations.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.DbSettings.DefaultPlatform">
            <summary>
            Gets or sets the text platform used in DB operations. Note: Override by passing directly to a DB method or via config file: key = "Horseshoe.NET:Db:Platform" or OrganizationalDefaultSettings: key = Db.Platform
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Db.ColumnExpression">
            <summary>
            Represents a column name or expression with implicit casting from <c>string</c> and <c>SqlLiteral</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ColumnExpression.SqlLiteral">
            <summary>
            The <c>SqlLiteral</c> (if created with the <c>SqlLiteral</c> arg constructor).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ColumnExpression.ColumnName">
            <summary>
            The <c>string</c> column name (if created with the <c>string</c> arg constructor).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ColumnExpression.Format">
            <summary>
            A format to apply to the column name, for example "LEFT({0}, 1)" to use only the first letter of each column value.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.#ctor(System.String)">
            <summary>
            Creates a new <c>ColumnNameExpression</c>.
            </summary>
            <param name="columnName">A column name.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.#ctor(System.String,System.String)">
            <summary>
            Creates a new <c>ColumnNameExpression</c>.
            </summary>
            <param name="columnName">A column name.</param>
            <param name="format">A format to apply to the column name, for example "LEFT({0}, 1)" to use only the first letter of each column value.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.#ctor(Horseshoe.NET.Db.SqlLiteral)">
            <summary>
            Creates a new <c>ColumnNameExpression</c>.
            </summary>
            <param name="sqlLiteral">A <c>SqlLiteral</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders a column name (or literal column name substitute) to a SQL expression.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
            <returns>A SQL expression.</returns>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.op_Implicit(System.String)~Horseshoe.NET.Db.ColumnExpression">
            <summary>
            Implicitly converts a <c>string</c> to a <c>ColumnNameExpression</c>
            </summary>
            <param name="columnName">A <c>string</c> column name</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ColumnExpression.op_Implicit(Horseshoe.NET.Db.SqlLiteral)~Horseshoe.NET.Db.ColumnExpression">
            <summary>
            Implicitly converts a <c>SqlLiteral</c> to a <c>ColumnNameExpression</c>
            </summary>
            <param name="sqlLiteral">A <c>DirectoryInfo</c> instance</param>
        </member>
        <member name="T:Horseshoe.NET.Db.IFilterFactory">
            <summary>
            Used in daisychaining filter builders.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Build(System.String,Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Creates a new filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Build``1(System.String,Horseshoe.NET.Compare.CompareMode,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Build``1(System.String,Horseshoe.NET.Compare.CompareMode,``0)">
            <summary>
            Creates a new filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Equals``1(System.String,``0)">
            <summary>
            Creates a new 'Equals' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Contains(System.String,System.String)">
            <summary>
            Creates a new 'Contains' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.StartsWith(System.String,System.String)">
            <summary>
            Creates a new 'Starts With' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.EndsWith(System.String,System.String)">
            <summary>
            Creates a new 'Ends With' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.GreaterThan``1(System.String,``0)">
            <summary>
            Creates a new 'Greater Than' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.GreaterThanOrEquals``1(System.String,``0)">
            <summary>
            Creates a new 'Greater Than or Equals' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.LessThan``1(System.String,``0)">
            <summary>
            Creates a new 'Less Than' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.LessThanOrEquals``1(System.String,``0)">
            <summary>
            Creates a new 'Less Than or Equals' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.In``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new 'In' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Between``1(System.String,``0,``0)">
            <summary>
            Creates a new 'Between' filter that includes the high and low values.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.BetweenExclusive``1(System.String,``0,``0)">
            <summary>
            Creates a new 'Between' filter that excludes the high and low values.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.BetweenExclusiveLo``1(System.String,``0,``0)">
            <summary>
            Creates a new 'Between' filter that excludes only the low value.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.BetweenExclusiveHi``1(System.String,``0,``0)">
            <summary>
            Creates a new 'Between' filter that excludes only the high value.
            </summary>
            <param name="expression">A SQL expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.IsNull(System.String)">
            <summary>
            Creates a new 'Is Null' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.IsNullOrWhitespace(System.String)">
            <summary>
            Creates a new 'Is Null or Whitespace' filter.
            </summary>
            <param name="expression">A SQL expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.And(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a specialized filter that contains other filters all of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'And' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.And(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <summary>
            Creates a specialized filter that contains other filters all of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'And' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Or(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a specialized filter that contains other filters only one of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'Or' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Or(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <summary>
            Creates a specialized filter that contains other filters only one of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'Or' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilterFactory.Not(Horseshoe.NET.Db.IFilter)">
            <summary>
            Creates a filter that negates another filter.
            </summary>
            <param name="filter">The filter to negate.</param>
            <returns>A negated filter.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.IGroupFilter">
            <summary>
            Used in generating SQL 'WHERE' clauses in C#.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.IGroupFilter.Add(Horseshoe.NET.Db.IFilter)">
            <summary>
            Adds a new filter to this <c>IGroupFilter</c>.
            </summary>
            <param name="filter">A filter.</param>
        </member>
        <member name="T:Horseshoe.NET.Db.LiteralFilter">
            <summary>
            Used in generating SQL 'WHERE' clauses in C# using literal expressions.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.LiteralFilter.ColumnName">
            <summary>
            A column name or expression. Optional.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.LiteralFilter.SqlLiteral">
            <summary>
            The literal expression.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.LiteralFilter.Platform">
            <summary>
            A DB platform lends hints about how to render SQL expressions and statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.LiteralFilter.#ctor(Horseshoe.NET.Db.SqlLiteral)">
            <summary>
            Creates a new <c>IFilter</c> from a <see cref="P:Horseshoe.NET.Db.LiteralFilter.SqlLiteral" />.
            </summary>
            <param name="sqlLiteral">A <c>SqlLiteral</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.LiteralFilter.#ctor(Horseshoe.NET.Db.ColumnExpression,Horseshoe.NET.Db.SqlLiteral)">
            <summary>
            Creates a new <c>IFilter</c> from a <see cref="P:Horseshoe.NET.Db.LiteralFilter.SqlLiteral" />.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="sqlLiteral">A <c>SqlLiteral</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.LiteralFilter.#ctor(System.String)">
            <summary>
            Creates a new <c>IFilter</c> from a SQL literal expression.
            </summary>
            <param name="literalExpression">The literal expression to use.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.LiteralFilter.#ctor(Horseshoe.NET.Db.ColumnExpression,System.String)">
            <summary>
            Creates a new <c>IFilter</c> from a SQL literal expression.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="literalExpression">The literal expression to use.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.LiteralFilter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders the filter as a SQL expression.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
            <returns>A SQL expression.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.NotFilterFactory">
            <summary>
            A factory for filters that negate other filters. Used in generating SQL 'WHERE' clauses in C#.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Build(System.String,Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Build``1(System.String,Horseshoe.NET.Compare.CompareMode,System.Collections.Generic.IList{``0})">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Build``1(System.String,Horseshoe.NET.Compare.CompareMode,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Equals``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Contains(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.StartsWith(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.EndsWith(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.GreaterThan``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.GreaterThanOrEquals``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.LessThan``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.LessThanOrEquals``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Between``1(System.String,``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.BetweenExclusive``1(System.String,``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.BetweenExclusiveLo``1(System.String,``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.BetweenExclusiveHi``1(System.String,``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.In``1(System.String,System.Collections.Generic.IList{``0})">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.IsNull(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.IsNullOrWhitespace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.And(Horseshoe.NET.Db.IFilter[])">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.And(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Or(Horseshoe.NET.Db.IFilter[])">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Or(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilterFactory.Not(Horseshoe.NET.Db.IFilter)">
            <inheritdoc />
        </member>
        <member name="T:Horseshoe.NET.Db.NotFilter">
            <summary>
            A filter that negates another filter. Used in generating SQL 'WHERE' clauses in C#.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.NotFilter.Filter">
            <summary>
            A filter to negate.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilter.#ctor(Horseshoe.NET.Db.IFilter)">
            <summary>
            Creates a new "Not" filter.
            </summary>
            <param name="filter">A filter to negate.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.NotFilter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders the filter as a SQL expression.
            </summary>
            <param name="platform">A DB platform may lend hints about how to render column names and parameters.</param>
            <returns>A SQL expression.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.Filter">
            <summary>
            Used in generating SQL 'WHERE' clauses.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Filter.ColumnName">
            <summary>
            A column name or expression.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Filter.Mode">
            <summary>
            A compare mode.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Filter.Criteria">
            <summary>
            Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.  Value(s) against which to compare SQL data during 'SELECT' queries or 'UPDATE' or 'DELETE' operations.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Filter.Platform">
            <summary>
            A DB platform lends hints about how to render SQL expressions and statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.AssertCriteriaIsValid(Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Validates whether search criteria is valid.
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">The criteria value(s).</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.AssertCriteriaIsValid(Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues,Horseshoe.NET.Compare.ValidationFlaggedAction@)">
            <summary>
            Validates whether search criteria is valid.
            </summary>
            <param name="mode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="criteria">The criteria value(s).</param>
            <param name="vAction">Alerts client code to perform the action identified by the validator, if any (for example, when the between hi and lo criteria are switched).</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders the filter as a SQL expression.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
            <returns>A SQL expression.</returns>
            <exception cref="T:Horseshoe.NET.ThisShouldNeverHappenException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Build(Horseshoe.NET.Db.ColumnExpression,Horseshoe.NET.Compare.CompareMode,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Creates a new column based filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Build``1(Horseshoe.NET.Db.ColumnExpression,Horseshoe.NET.Compare.CompareMode,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new column based filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Build``1(Horseshoe.NET.Db.ColumnExpression,Horseshoe.NET.Compare.CompareMode,``0)">
            <summary>
            Creates a new column based filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="mode">Compare mode.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Equals``1(Horseshoe.NET.Db.ColumnExpression,``0)">
            <summary>
            Creates a new column based 'Equals' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Contains(Horseshoe.NET.Db.ColumnExpression,System.String)">
            <summary>
            Creates a new column based 'Contains' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.StartsWith(Horseshoe.NET.Db.ColumnExpression,System.String)">
            <summary>
            Creates a new column based 'Starts With' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.EndsWith(Horseshoe.NET.Db.ColumnExpression,System.String)">
            <summary>
            Creates a new column based 'Ends With' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.GreaterThan``1(Horseshoe.NET.Db.ColumnExpression,``0)">
            <summary>
            Creates a new column based 'Greater Than' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.GreaterThanOrEquals``1(Horseshoe.NET.Db.ColumnExpression,``0)">
            <summary>
            Creates a new column based 'Greater Than or Equals' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.LessThan``1(Horseshoe.NET.Db.ColumnExpression,``0)">
            <summary>
            Creates a new column based 'Less Than' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.LessThanOrEquals``1(Horseshoe.NET.Db.ColumnExpression,``0)">
            <summary>
            Creates a new column based 'Less Than or Equals' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.In``1(Horseshoe.NET.Db.ColumnExpression,System.Collections.Generic.IList{``0})">
            <summary>
            Creates a new column based 'In' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="criteria">Value(s) from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Between``1(Horseshoe.NET.Db.ColumnExpression,``0,``0)">
            <summary>
            Creates a new column based 'Between' filter that includes the high and low values.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.BetweenExclusive``1(Horseshoe.NET.Db.ColumnExpression,``0,``0)">
            <summary>
            Creates a new column based 'Between' filter that excludes the high and low values.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.BetweenExclusiveLo``1(Horseshoe.NET.Db.ColumnExpression,``0,``0)">
            <summary>
            Creates a new column based 'Between' filter that excludes only the low value.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.BetweenExclusiveHi``1(Horseshoe.NET.Db.ColumnExpression,``0,``0)">
            <summary>
            Creates a new column based 'Between' filter that excludes only the high value.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="loValue">The lower of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <param name="hiValue">The higher of two values from which to build the filter and subsequent SQL 'WHERE' expression.</param>
            <returns>A filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.IsNull(Horseshoe.NET.Db.ColumnExpression)">
            <summary>
            Creates a new column based 'Is Null' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.IsNullOrWhitespace(Horseshoe.NET.Db.ColumnExpression)">
            <summary>
            Creates a new column based 'Is Null or Whitespace' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Literal(System.String)">
            <summary>
            Creates a new column based 'Literal' filter.
            </summary>
            <param name="literalExpression">The SQL expression to use.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Literal(Horseshoe.NET.Db.ColumnExpression,System.String)">
            <summary>
            Creates a new column based 'Literal' filter.
            </summary>
            <param name="columnName">A column name or expression.</param>
            <param name="literalExpression">The SQL expression to use.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.And(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a specialized filter that contains other filters all of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'And' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.And(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <summary>
            Creates a specialized filter that contains other filters all of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'And' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Or(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a specialized filter that contains other filters only one of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'Or' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Or(System.Collections.Generic.IEnumerable{Horseshoe.NET.Db.IFilter})">
            <summary>
            Creates a specialized filter that contains other filters only one of which must evaluate to true for a table row to be included.
            </summary>
            <param name="filters">Filters to group.</param>
            <returns>An 'Or' group filter.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Filter.Not">
            <summary>
            Creates a factory that creates filters that negate other filters.
            </summary>
            <returns>A negated filter.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.IFilter">
            <summary>
            Used in generating SQL 'WHERE' clauses in C#.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.IFilter.Platform">
            <summary>
            A DB platform lends hints about how to render SQL expressions and statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.IFilter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders the filter as a SQL expression.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
            <returns>A SQL expression.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.OrGroupFilter">
            <summary>
            A specialized filter that contains other filters of which only one must evaluate to true for a table row to be included
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.OrGroupFilter.Filters">
            <summary>
            The filters contained by this <c>OrGroupFilter</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.OrGroupFilter.Platform">
            <summary>
            A DB platform lends hints about how to render SQL expressions and statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.OrGroupFilter.#ctor(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a new <c>OrGroupFilter</c>.
            </summary>
            <param name="filters">The filters to group.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.OrGroupFilter.Add(Horseshoe.NET.Db.IFilter)">
            <summary>
            Adds a new filter to this <c>OrGroupFilter</c>.
            </summary>
            <param name="filter">A filter.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.OrGroupFilter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders this <c>OrGroupFilter</c> to a SQL expression.
            </summary>
            <returns>A SQL expression.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.AndGroupFilter">
            <summary>
            A specialized filter that contains other filters all of which must evaluate to true for a table row to be included
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.AndGroupFilter.Filters">
            <summary>
            The filters contained by this <c>AndGroupFilter</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.AndGroupFilter.Platform">
            <summary>
            A DB platform lends hints about how to render SQL expressions and statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.AndGroupFilter.#ctor(Horseshoe.NET.Db.IFilter[])">
            <summary>
            Creates a new <c>AndGroupFilter</c>.
            </summary>
            <param name="filters">The filters to group.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.AndGroupFilter.Add(Horseshoe.NET.Db.IFilter)">
            <summary>
            Adds a new filter to this <c>AndGroupFilter</c>.
            </summary>
            <param name="filter">A filter.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.AndGroupFilter.Render(System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Renders this <c>AndGroupFilter</c> to a SQL expression.
            </summary>
            <returns>A SQL expression.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.sorter`1">
            <summary>
            Provides several options for auto-sorting parsed data from a query 
            </summary>
            <typeparam name="T">item type</typeparam>
        </member>
        <member name="P:Horseshoe.NET.Db.sorter`1.Sorter">
            <summary>
            Client-supplied sorter for <c>IComparable</c>s (see <c>IEnumerable&lt;T&gt;.OrderBy()</c>)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.sorter`1.Comparer">
            <summary>
            A <c>Comparer&lt;T&gt;</c> with which to sort (see <see cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})"/>)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.sorter`1.Comparison">
            <summary>
            A <c>Comparison&lt;T&gt;</c> with which to sort (see <see cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/>)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.sorter`1.#ctor">
            <summary>
            Creates a new <c>sorter</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.sorter`1.#ctor(System.Func{`0,System.IComparable})">
            <summary>
            Creates a new <c>sorter</c>
            </summary>
            <param name="sorter">a sortert function</param>
        </member>
        <member name="M:Horseshoe.NET.Db.sorter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new <c>sorter</c>
            </summary>
            <param name="comparer">An <c>IComparer&lt;T&gt;</c></param>
        </member>
        <member name="M:Horseshoe.NET.Db.sorter`1.#ctor(System.Comparison{`0})">
            <summary>
            Creates a new <c>sorter</c>
            </summary>
            <param name="comparison">A <c>Comparison&lt;T&gt;</c></param>
        </member>
        <member name="T:Horseshoe.NET.Db.ConnectionInfo">
            <summary>
            Base class for all DB platform specific connection info
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.ConnectionStringName">
            <summary>
            Connection string name, to lookup connection string from config 'connection strings' section
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.IsEncryptedPassword">
            <summary>
            This lets the system know to decrypt the password in the connection string
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.DataSource">
            <summary>
            The server or alias (data source) for building a connection string
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.Credentials">
            <summary>
            Connection credentials for building a connection string
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.AdditionalConnectionAttributes">
            <summary>
            Additional connection attributes for building a connection string
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.ConnectionTimeout">
            <summary>
            The time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.ConnectionInfo.Platform">
            <summary>
            A DB platform may lend hints about how to render column names and parameters.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.ConnectionInfo.AddOrReplaceConnectionAttribute(System.String,System.String)">
            <summary>
            Adds or replaces a connection string attribute
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ConnectionInfo.AddOrReplaceConnectionAttributes(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds or replaces multiple connection string attributes
            </summary>
            <param name="attrs">An <c>IDictionary</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Db.ConnectionInfo.BuildConnectionString">
            <summary>
            Builds a connection string, platform-specific, must be implemented by all subclasses
            </summary>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.ConnectionInfo.Clone">
            <summary>
            Creates a shallow copy of the current <c>ConnectionInfo</c> instance.
            </summary>
            <returns>A copy of the current <c>ConnectionInfo</c> instance.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.ConnectionStringPart">
            <summary>
            Connection string element pseudo-names
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.DataSource">
            <summary>
            Data Source, Server or DSN
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.UserId">
            <summary>
            User ID or UID
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.Password">
            <summary>
            Password or PWD
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.Driver">
            <summary>
            Driver
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.Provider">
            <summary>
            Provider
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.ConnectionStringPart.InitialCatalog">
            <summary>
            Initial Catalog or Database
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Db.DbCapture">
            <summary>
            Use this to capture metadata and messages from data calls such as column definitions and Oracle out parameters.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.DbCapture.DataColumns">
            <summary>
            Column metadata captured from the data call
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.DbCapture.OutputParameters">
            <summary>
            Output parameters captured from procedure calls (currently, Oracle only)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.Get(System.String,System.Boolean)">
            <summary>
            Gets out parameter value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetString(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>string</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetNInt(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>int?</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetInt(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>int</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetNDecimal(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>decimal?</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetDecimal(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>decimal</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetNDouble(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>double?</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetDouble(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>double</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetNDateTime(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>DateTime?</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbCapture.GetDateTime(System.String,System.Boolean)">
            <summary>
            Gets out parameter <c>DateTime</c> value by name (currently, Oracle only)
            </summary>
            <param name="name">param name</param>
            <param name="suppressErrors">returns <c>null</c> if <c>true</c> and param name not found exactly once, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Db.DbPlatform">
            <summary>
            DB platforms
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.DbPlatform.Neutral">
            <summary>
            Generic, platform-neutral
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.DbPlatform.SqlServer">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Db.DbPlatform.Oracle">
            <summary>
            Oracle DB
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Db.DbUtil">
            <summary>
            A collection of common, platform agnostic factory methods for Horseshoe.NET DB operations
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.LoadConnectionInfo``1(``0,System.Func{System.String},Horseshoe.NET.TraceJournal)">
            <summary>
            Loads connection info from all possible sources, reporting which source contained the info,
            and compiles it all into a resultant <c>ConnectionInfo</c> instance
            </summary>
            <typeparam name="T">a subclass of <c>ConnectionInfo</c></typeparam>
            <param name="connectionInfo">an optional <c>ConnectionInfo</c> instance</param>
            <param name="buildConnectionStringFromConfig">an optional function for building a platform-specific connection string from <c>app|web.config</c> or <c>appsettings.json</c></param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A new <c>ConnectionInfo</c> object whose <c>ConnectionString</c> should be used to build connections.</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.DecryptInlinePassword(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Utility method for inline decrypting the password in a connection string
            </summary>
            <param name="connStrWithEcryptedPassword">a connection string with encrypted password</param>
            <param name="cryptoOptions">crypto options</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.HideInlinePassword(System.String)">
            <summary>
            Utility method for inline encrypting the password in a connection string
            </summary>
            <param name="connectionString">a connection string with plaintext password</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ParseConnectionStringValue(System.String,System.String)">
            <summary>
            Extract a connection string element's value
            </summary>
            <param name="key">The connection string element's key (e.g. "Data Source", "Initial Catalog", etc.)</param>
            <param name="connectionString">a connection string</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ParseConnectionStringValue(Horseshoe.NET.Db.ConnectionStringPart,System.String)">
            <summary>
            Extract a connection string element's value
            </summary>
            <param name="part">Analagous to the key in <see cref="M:Horseshoe.NET.Db.DbUtil.ParseConnectionStringValue(System.String,System.String)"/></param>
            <param name="connectionString">a connection string</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ParseAdditionalConnectionAttributes(System.String)">
            <summary>
            Parse additional connection attributes which are stored pipe delimited (|) in configuration
            </summary>
            <param name="text">the pipe delimited text value from configuration</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.RenderColumnName(System.Data.Common.DbParameter,System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            When generating the SQL for parameters it may be 
            necessary to 'fix' a column name in C# to be valid in SQL, e.g. adding quotes or square brackets 
            around the column name especially if it contains spaces or other non-word characters.
            </summary>
            <param name="parameter">a parameter</param>
            <param name="platform">An optional DB platform</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.RenderColumnName(System.String,System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            When generating the SQL for parameters or in other situations it may be 
            necessary to 'fix' a column name in C# to be valid in SQL, e.g. adding quotes or square brackets 
            around the column name especially if it contains spaces or other non-word characters.
            </summary>
            <param name="columnName">a column name</param>
            <param name="platform">An optional DB platform</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.TrimDataTable(System.Data.DataTable)">
            <summary>
            Iterates through a data table and trims each <c>string</c>
            </summary>
            <param name="dataTable">a data table</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.GetAllRowValues(System.Data.Common.DbDataReader,System.Int32,Horseshoe.NET.Text.AutoTruncate)">
            <summary>
            Gets all field values from the current row of an open <c>DbDataReader</c> as an <c>object[]</c>.
            </summary>
            <param name="reader">a data reader</param>
            <param name="columnCount">the number of columns</param>
            <param name="autoTrunc">how to handle strings</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.GetAllRowValuesAsync(System.Data.Common.DbDataReader,System.Int32,Horseshoe.NET.Text.AutoTruncate)">
            <summary>
            Gets all field values from the current row of an open <c>DbDataReader</c> as an <c>object[]</c>.
            </summary>
            <param name="reader">a data reader</param>
            <param name="columnCount">the number of columns</param>
            <param name="autoTrunc">how to handle strings</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ReadAsObjects(System.Data.Common.DbDataReader,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns the raw objects. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <param name="reader">An oben DB data reader.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Rows of data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ReadAsObjectsAsync(System.Data.Common.DbDataReader,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns the raw objects. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <param name="reader">An oben DB data reader.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Rows of data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ReadAsObjects(System.Data.Common.DbCommand,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns the raw objects. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <param name="command">An open DB command.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Rows of data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ReadAsObjectsAsync(System.Data.Common.DbCommand,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns the raw objects. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <param name="command">An open DB command.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Rows of data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ParseRows``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataReader,``0},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns parsed instances of <c>T</c>. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="command">An open DB command.</param>
            <param name="readerParser">A parser that reads directly from an open data reader.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Parsed instances of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.ParseRowsAsync``1(System.Data.Common.DbCommand,System.Func{System.Data.IDataReader,``0},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.TraceJournal)">
            <summary>
            Reads data from a reader and returns parsed instances of <c>T</c>. Instances of <c>DBNull</c> are returned as <c>null</c>.
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="command">An open DB command.</param>
            <param name="readerParser">A parser that reads directly from an open data reader.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>Parsed instances of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.Sqlize(System.Object,System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Prepare an object for insertion into a SQL statement
            </summary>
            <param name="obj">An object</param>
            <param name="platform">An optional DB platform</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.NormalizeDbValue(System.Object)">
            <summary>
            Remove <c>DbNull</c> from data read in from a DB
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.Dump(System.Data.DataTable)">
            <summary>
            Displays the contents of a data table in <c>string</c> form.
            </summary>
            <param name="dataTable">A <c>DataTable</c>.</param>
            <returns>A text representation of a <c>DataTable</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildDeleteStatement(System.String,Horseshoe.NET.Db.IFilter,System.Boolean,System.Boolean,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a statement to delete one or more rows from a table or drop (truncate) the table based on the default platform..
            </summary>
            <param name="tableName">A table name.</param>
            <param name="where">A filter indicating which rows to delete.</param>
            <param name="drop">If <c>true</c>, returns a statement to delete the table database object (rather than just delete rows), default is <c>false</c>.</param>
            <param name="purge">Oracle DB only. If <c>true</c> and if <c>drop == true</c>, returns a statement to delete the table database object (rather than just delete rows) and release the space associated with it in a single step, default is <c>false</c>.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildDeleteStatement(Horseshoe.NET.Db.DbPlatform,System.String,Horseshoe.NET.Db.IFilter,System.Boolean,System.Boolean,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to delete one or more rows from a table or drop (truncate) the table.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="where">A filter indicating which rows to delete.</param>
            <param name="drop">If <c>true</c>, returns a statement to delete the table database object (rather than just delete rows), default is <c>false</c>.</param>
            <param name="purge">Oracle DB only. If <c>true</c> and if <c>drop == true</c>, returns a statement to delete the table database object (rather than just delete rows) and release the space associated with it in a single step, default is <c>false</c>.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildInsertStatement(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a statement to insert a row into a table based on the default platform.
            </summary>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildInsertStatement(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to insert a row into a table.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildInsertAndGetIdentityStatements(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.String,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to insert a row into a table and get the resulting identity.
            </summary>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="getIdentitySql">An optional SELECT statement for retrieving the identity of the inserted row.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildInsertAndGetIdentityStatements(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.String,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to insert a row into a table and get the resulting identity.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="getIdentitySql">An optional SELECT statement for retrieving the identity of the inserted row.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildUpdateStatement(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.IFilter,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to update one or more rows in a table.
            </summary>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="where">A filter indicating which rows to update.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildUpdateStatement(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.IFilter,Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to update one or more rows in a table.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="where">A filter indicating which rows to update.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildFunctionStatement(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to call a function.
            </summary>
            <param name="functionName">A function name.</param>
            <param name="parameters">Optional parameter(s) to pass into the function.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.DbUtil.BuildFunctionStatement(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.TraceJournal)">
            <summary>
            Builds a platform-specific statement to call a function.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">A function name.</param>
            <param name="parameters">Optional parameter(s) to pass into the function.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The SQL statement.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.Extensions">
            <summary>
            Extension methods for databases
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetFieldTypes(System.Data.IDataReader)">
            <summary>
            Gets an array of <c>Type</c>s corresponding to the runtype types of the source query's data columns
            </summary>
            <param name="reader">An open data reader.</param>
            <returns>An array of <c>Type</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetDataColumns(System.Data.IDataReader)">
            <summary>
            Derives an array of <c>DataColumn</c>s approximating the structure of these results adapted to a <c>DataTable</c>
            </summary>
            <param name="reader">An open data reader.</param>
            <returns>An array of column data.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.ToDMLString(System.Data.Common.DbParameter,System.Nullable{Horseshoe.NET.Db.DbPlatform})">
            <summary>
            Converts this parameter to SQL syntax for inserting or updating data
            </summary>
            <param name="parameter">A DB parameter (column name and value).</param>
            <param name="platform">A DB platform may lend hints about how to render column names and parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetConnectionString(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the password-redacted connection string found or generated by Horseshoe.NET.
            </summary>
            <param name="journal"></param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetConnectionStringSource(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the password-redacted connection string found or generated by Horseshoe.NET.
            </summary>
            <param name="journal"></param>
            <returns>A connection string.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetConnectionInfoSource(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets where the connection info came from.
            </summary>
            <param name="journal"></param>
            <returns>A <c>string</c> indicating the connection info source.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.GetSqlStatement(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the SQL statement generated by Horseshoe.NET.
            </summary>
            <param name="journal"></param>
            <returns>A SQL statement.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.WriteMethodDisplayName(Horseshoe.NET.TraceJournal,System.Reflection.MethodBase)">
            <summary>
            Writes a specially crafted display name for database methods to the trace journal. 
            </summary>
            <param name="journal">A trace journal</param>
            <param name="method">The method whose info to display</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Extensions.On(Horseshoe.NET.Db.IFilter,Horseshoe.NET.Db.DbPlatform)">
            <summary>
            Specifies a platform to set as this filter's default.
            </summary>
            <param name="filter">A filter.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
            <returns>The filter.</returns>
        </member>
        <member name="T:Horseshoe.NET.Db.Parameter">
            <summary>
            <para>
            A flexible, generic <c>DbParameter</c> that can be used on any database query in Horseshoe.NET
            because it converts parameters to the type when a statement is created and executed.  
            </para>
            <para>
            One common pain point that it fixes is the null value problem.  Sometimes, parameters with 
            null values are ignored, but not if you set the value to <c>DbNull.Value</c>.  It's a small
            win but setting the value to null actually sets it to <c>DbNull.Value</c> for you.
            </para>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.ParameterName">
            <summary>
            The parameter name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.Value">
            <summary>
            The parameter value
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.DbType">
            <summary>
            The DB data type
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.IsDbTypeSet">
            <summary>
            Whether the DB data type has been set
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.Direction">
            <summary>
            Parameter direction (default is <c>Input</c>)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.IsNullable">
            <summary>
            Whether the source column that aligns with this parameter allows <c>null</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.Size">
            <summary>
            The size of the source column if numeric, text or binary
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.SourceColumn">
            <summary>
            The name of the source column
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.SourceColumnNullMapping">
            <summary>
            Source column null mapping
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.Parameter.SourceVersion">
            <summary>
            <c>DataRow</c> version
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.Parameter.#ctor">
            <summary>
            Creates a new <c>Parameter</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new <c>Parameter</c>
            </summary>
            <param name="parameterName">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Horseshoe.NET.Db.Parameter.ResetDbType">
            <summary>
            Reset DB data type
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Db.RowParser`1">
            <summary>
            A flexible and efficient data row-to-object parser featuring dual modes covering tons of use cases 
            including out-of-the-box data column to object property support.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser`1.ObjectParser">
            <summary>
            A parsing mode that uses row data already extracted as plain objects.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser`1.ReaderParser">
            <summary>
            A parsing mode that directly uses the data reader to get not only row data but also query metadata, if desired.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser`1.IsObjectParser">
            <summary>
            Indicates whether this <c>RowParser</c> is in object parser mode.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser`1.IsReaderParser">
            <summary>
            Indicates whether this <c>RowParser</c> is in reader parser mode.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser`1.#ctor(System.Func{System.Object[],`0})">
            <summary>
            Creates a new <c>RowParser</c> in object parser mode.
            </summary>
            <param name="objectParser">An object parser</param>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser`1.#ctor(System.Func{System.Data.IDataReader,`0})">
            <summary>
            Creates a new <c>RowParser</c> in reader parser mode.
            </summary>
            <param name="readerParser">A reader parser</param>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser`1.Parse(System.Object[])">
            <summary>
            A way to execute the object parser indirectly.
            </summary>
            <param name="objects">An <c>object[]</c></param>
            <returns>An instance of <c>T</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser`1.Parse(System.Data.Common.DbDataReader)">
            <summary>
            A way to execute the reader parser indirectly.
            </summary>
            <param name="reader">A data reader</param>
            <returns>An instance of <c>T</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Db.RowParser">
            <summary>
            A set of built-in reader parsers
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarString">
            <summary>
            Convert the first field of a data row to <c>string</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarInt">
            <summary>
            Convert the first field of a data row to <c>int</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarNInt">
            <summary>
            Convert the first field of a data row to <c>nullable int</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarDecimal">
            <summary>
            Convert the first field of a data row to <c>decimal</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarNDecimal">
            <summary>
            Convert the first field of a data row to <c>nullable decimal</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarDateTime">
            <summary>
            Convert the first field of a data row to <c>DateTime</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Db.RowParser.ScalarNDateTime">
            <summary>
            Convert the first field of a data row to <c>nullable DateTime</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser.From``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            Creates a generic RowParser based on the supplied <c>IDataReader</c> parser function/lambda/delegate.
            </summary>
            <typeparam name="T">The type of object returned by the parser.</typeparam>
            <param name="readerParser">An <c>IDataReader</c> parser.</param>
            <returns>A <c>RowParser</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser.From``1(System.Func{System.Object[],``0})">
            <summary>
            Creates a generic RowParser based on the supplied <c>object[]</c> parser function/lambda/delegate.
            </summary>
            <typeparam name="T">The type of object returned by the parser.</typeparam>
            <param name="objectParser">An <c>object[]</c> parser.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Db.RowParser.BuildAutoParser``1(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <c>T</c> for each row and copies each field to its corresponding instance property. 
            <para>
            If a column name contains spaces it is matched with an identical property name with no spaces.
            </para>
            </summary>
            <typeparam name="T">A reference type with one no-args constructor including implied constructor.</typeparam>
            <param name="ignoreCase">If <c>true</c>, columns whose names would match property names if not for the letter case will be included, default is <c>false</c>.</param>
            <param name="strict">If <c>true</c>, raises an exception if all columns are not mapped, default is <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Db.SqlLiteral">
            <summary>
            A set of useful, platform-dependent SQL literals to use as parameter values, for example
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.#ctor(System.String)">
            <summary>
            Creates a new <c>SqlLiteral</c>.
            </summary>
            <param name="expression">The literal expression to use.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.#ctor(System.Func{System.String})">
            <summary>
            Creates a new <c>SqlLiteral</c>.
            </summary>
            <param name="renderer">Renders the <c>SqlLiteral</c> as a <c>string</c> SQL expression.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="P:Horseshoe.NET.Db.SqlLiteral.Renderer">
            <summary>
            Renders the <c>SqlLiteral</c> as a SQL expression.
            </summary>
            <returns>A SQL expression.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.Render">
            <summary>
            Renders the <c>SqlLiteral</c> as a SQL expression.
            </summary>
            <returns>A SQL expression.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.ToString">
            <summary>
            Returns a <c>string</c> rendering of this <c>SqlLiteral</c> (e.g. <c>SqlLiteral</c> returns <c>Expression</c>, subclasses may apply logic to return a value).
            </summary>
            <returns>A <c>string</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.CompareTo(Horseshoe.NET.Db.SqlLiteral)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.CurrentDate(Horseshoe.NET.Db.DbPlatform,System.Boolean)">
            <summary>
            The SQL literal expression for getting the current date/time.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements. Required.</param>
            <param name="dotNetOverride">If <c>true</c>, uses the .NET runtime's current date/time instead, default is <c>false</c>.</param>
            <returns>A SQL literal expression for getting the current date/time.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.NewGuid(Horseshoe.NET.Db.DbPlatform,System.Boolean)">
            <summary>
            The SQL literal expression for generating a GUID.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements. Required.</param>
            <param name="dotNetOverride">If <c>true</c>, uses the .NET runtime to generate the GUID, default is <c>false</c>.</param>
            <returns>A SQL literal expression for generating a GUID.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Db.SqlLiteral.Identity(Horseshoe.NET.Db.DbPlatform)">
            <summary>
            The SQL literal expression for getting the integer auto-increment ID after inserting a row
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions and statements. Required.</param>
            <returns>A SQL literal expression for getting the last inserted row ID.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Credential">
            <summary>
            A generic user crediential designed to be compatible with all types of credentials across
            the Horseshoe.NET platform (e.g. network credentials, database credentials, etc.).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Credential.UserName">
            <summary>
            The user name or ID.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Credential.Password">
            <summary>
            The user password.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Credential.Domain">
            <summary>
            The network domain.  Applies mainly to credentialed HTTP requests.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Credential.#ctor(System.String,Horseshoe.NET.Password,System.String)">
            <summary>
            Creates a new <c>Credential</c>.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="domain">Optional, the network domain.</param>
        </member>
        <member name="M:Horseshoe.NET.Credential.Build(System.String,System.String,System.Boolean,Horseshoe.NET.Crypto.CryptoOptions,System.String)">
            <summary>
            Builds a <c>Credential</c> from its constituent parts.
            </summary>
            <param name="userName">A user name or ID.</param>
            <param name="password">A password <c>string</c>.</param>
            <param name="isEncryptedPassword"></param>
            <param name="cryptoOptions"></param>
            <param name="domain">Optional, the network domain.</param>
            <returns>A <c>Credential</c> or <c>null</c> if <c>userName == null</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Credential.Build(System.String,Horseshoe.NET.Password,System.String)">
            <summary>
            Builds a <c>Credential</c> from its constituent parts.
            </summary>
            <param name="userName">A user name or ID.</param>
            <param name="password">A <c>Password</c> (can substitute with a password <c>string</c> or <c>SecureString</c>).</param>
            <param name="domain">Optional, the network domain.</param>
            <returns>A <c>Credential</c> or <c>null</c> if <c>userName == null</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Credential.ToString">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.Credential.ToNetworkCredential">
            <summary>
            Converts this <c>Credential</c> to a <c>NetworkCredential</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Credential.op_Implicit(Horseshoe.NET.Credential)~System.Net.NetworkCredential">
            <summary>
            Implicitly casts this <c>Credential</c> as a <c>NetworkCredential</c>.
            </summary>
            <param name="credentials"></param>
        </member>
        <member name="T:Horseshoe.NET.Crypto.CryptoOptions">
            <summary>
            Options for cryptographic methods
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.Algorithm">
            <summary>
            The desired encryption / decryption algorithm
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.Key">
            <summary>
            The encryption key
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.KeyText">
            <summary>
            The encryption key in text format
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.AutoPadKey">
            <summary>
            Set to <c>true</c> to fill in the missing key bytes if shorter than 16
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.IV">
            <summary>
            The encryption key
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.IVText">
            <summary>
            The encryption key in text format
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.AutoPopulateIVFromKey">
            <summary>
            Useful in situations in which the key and IV become part of the encrypted output
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.BlockSize">
            <summary>
            Block size in bits (e.g. 128 aka 16 bytes)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.Mode">
            <summary>
            See <c>System.Security.Cryptography.PaddingMode</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.Padding">
            <summary>
            See <c>System.Security.Cryptography.PaddingMode</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.UseEmbeddedKIV">
            <summary>
            Generates a random key and IV and appends them to the encryption, then extracts them prior to decrypting 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoOptions.Encoding">
            <summary>
            A character encoding
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Crypto.CryptoSettings">
            <summary>
            Settings for crypto operations - sources are client-supplied values, configuration and organizational default settings
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoSettings.DefaultSymmetricAlgorithm">
            <summary>
            Gets or sets the default symmetric algorithm used by Cryptography.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Crypto:SymmetricAlgorithm and OrganizationalDefaultSettings: key = Crypto.SymmetricAlgorithm)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoSettings.DefaultHashAlgorithm">
            <summary>
            Gets or sets the default hash algorithm used by Cryptography.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Crypto:HashAlgorithm and OrganizationalDefaultSettings: key = Crypto.HashAlgorithm)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoSettings.DefaultHashSalt">
            <summary>
            Gets or sets the default hash salt used by Cryptography.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Crypto:HashSalt and OrganizationalDefaultSettings: key = Crypto.HashSalt)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.CryptoSettings.DefaultEncoding">
            <summary>
            Gets or sets the text encoding used by Cryptography. Defaults to UTF8Encoding. Note: Override by passing directly to a Cryptography function or via config file: key = "Horseshoe.NET:Crypto:Encoding" or OrganizationalDefaultSettings: key = Crypto.Encoding
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Decode">
            <summary>
            A collection of methods for decoding text
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Decode.Base64">
            <summary>
            A collection of methods for Base64 decoding
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decode.Base64.Bytes(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes Base64 encoded source <c>byte[]</c> to plain bytes
            </summary>
            <param name="encodedBytes">Base64 encoded source bytes</param>
            <param name="encoding">a character encoding</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decode.Base64.Bytes(System.String)">
            <summary>
            Decodes Base64 encoded source <c>string</c> to plain bytes
            </summary>
            <param name="encodedText">Base64 encoded source text</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decode.Base64.String(System.String,System.Text.Encoding)">
            <summary>
            Decodes Base64 encoded source string to plaintext <c>string</c>
            </summary>
            <param name="encodedText">Base64 encoded source text</param>
            <param name="encoding">a character encoding</param>
            <returns>plaintext <c>string</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Decrypt">
            <summary>
            A collection of decryption methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.Bytes(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher bytes to plain bytes
            </summary>
            <param name="cipherBytes">source cipher <c>byte[]</c></param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.Bytes(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher <c>string</c> to plain bytes
            </summary>
            <param name="ciphertext">source cipher <c>string</c></param>
            <param name="options"></param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.Bytes(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher stream to plain bytes
            </summary>
            <param name="inputStreamOfEncryptedText">source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesAsync(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher stream to plain bytes
            </summary>
            <param name="inputStreamOfEncryptedText">source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.Bytes(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts file to plain bytes
            </summary>
            <param name="file">source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesAsync(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts file to plain bytes
            </summary>
            <param name="file">source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesFromBase64(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded cipher <c>string</c> to plain bytes
            </summary>
            <param name="base64EncodedCiphertext">source Base64 encoded cipher <c>string</c></param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesFromBase64(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded cipher stream to plain bytes
            </summary>
            <param name="inputStreamOfEncryptedText">source Base64 encoded encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesFromBase64Async(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded cipher stream to plain bytes
            </summary>
            <param name="inputStreamOfEncryptedText">source Base64 encoded encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesFromBase64(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded encrypted file to plain bytes
            </summary>
            <param name="file">source Base64 encoded encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.BytesFromBase64Async(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded encrypted file to plain bytes
            </summary>
            <param name="file">source Base64 encoded encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plain <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.String(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher bytes to plaintext
            </summary>
            <param name="cipherBytes">source cipher <c>byte[]</c></param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.String(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts ciphertext to plaintext
            </summary>
            <param name="ciphertext">source cipher <c>string</c></param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.String(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher stream to plaintext
            </summary>
            <param name="inputStreamOfEncryptedText">source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringAsync(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher stream to plaintext
            </summary>
            <param name="inputStreamOfEncryptedText">source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.String(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts file to plaintext
            </summary>
            <param name="file">source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringAsync(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts file to plaintext
            </summary>
            <param name="file">source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringFromBase64(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded ciphertext to plaintext
            </summary>
            <param name="base64EncodedCiphertext">Base64 encoded source cipher <c>string</c></param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringFromBase64(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded cipher stream to plaintext
            </summary>
            <param name="inputStreamOfBase64EncodedEncryptedText">Base64 encoded source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringFromBase64Async(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded cipher stream to plaintext
            </summary>
            <param name="inputStreamOfBase64EncodedEncryptedText">Base64 encoded source encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringFromBase64(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded encrypted file to plaintext
            </summary>
            <param name="file">Base64 encoded source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.StringFromBase64Async(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded encrypted file to plaintext
            </summary>
            <param name="file">Base64 encoded source encrypted file</param>
            <param name="options">crypto options</param>
            <returns>plaintext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureString(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts cipher bytes to a secure string
            </summary>
            <param name="cipherBytes">source cipher <c>byte[]</c></param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureString(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts ciphertext to a secure string
            </summary>
            <param name="ciphertext">encrypted string</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureString(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a cipher stream to a secure string
            </summary>
            <param name="inputStreamOfEncryptedText">encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringAsync(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a cipher stream to a secure string
            </summary>
            <param name="inputStreamOfEncryptedText">encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureString(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts an encrypted file to a secure string
            </summary>
            <param name="file">encrypted file</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringAsync(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts an encrypted file to a secure string
            </summary>
            <param name="file">encrypted file</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringFromBase64(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts Base64 encoded ciphertext to a secure string
            </summary>
            <param name="base64EncodedCiphertext">Base64 encoded encrypted string</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringFromBase64(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded cipher stream to a secure string
            </summary>
            <param name="inputStreamOfBase64EncodedEncryptedText">Base64 encoded encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringFromBase64Async(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded cipher stream to a secure string
            </summary>
            <param name="inputStreamOfBase64EncodedEncryptedText">Base64 encoded encrypted stream</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringFromBase64(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded encrypted file to a secure string
            </summary>
            <param name="file">encrypted file</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Decrypt.SecureStringFromBase64Async(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Decrypts a Base64 encoded encrypted file to a secure string
            </summary>
            <param name="file">encrypted file</param>
            <param name="options">crypto options</param>
            <returns>secure string</returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Encode">
            <summary>
            A collection of methods for encoding text
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Encode.Base64">
            <summary>
            A collection of methods for Base64 encoding
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encode.Base64.Chars(System.Byte[])">
            <summary>
            Encodes source bytes as a <c>char[]</c>
            </summary>
            <param name="plainBytes">source <c>byte[]</c></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encode.Base64.String(System.Byte[])">
            <summary>
            Encodes source bytes as a <c>string</c>
            </summary>
            <param name="plainBytes">source <c>byte[]</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encode.Base64.String(System.String,System.Text.Encoding)">
            <summary>
            Encodes source text as a <c>string</c>
            </summary>
            <param name="plaintext">source test</param>
            <param name="encoding">a character encoding</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Encrypt">
            <summary>
            A collection of encryption methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Bytes(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source bytes to cipher bytes
            </summary>
            <param name="plainBytes">source <c>byte[]</c></param>
            <param name="options">crypto options</param>
            <returns>cipher <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Bytes(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source text to cipher bytes
            </summary>
            <param name="plaintext">source plaintext</param>
            <param name="options"></param>
            <returns>cipher <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Bytes(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source stream to cipher bytes
            </summary>
            <param name="inputStream">input stream</param>
            <param name="options">crypto options</param>
            <returns>cipher <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Bytes(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source file contents to cipher bytes
            </summary>
            <param name="file">source file</param>
            <param name="options">crypto options</param>
            <returns>cipher <c>byte[]</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.String(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypt source <c>string</c> to cipher <c>string</c>
            </summary>
            <param name="plaintext">source plaintext</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.String(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypt source bytes to <c>string</c>
            </summary>
            <param name="plainBytes">source byte[]</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.String(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source stream to cipher <c>string</c>
            </summary>
            <param name="inputStream">a stream</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.String(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source file to cipher <c>string</c>
            </summary>
            <param name="file">a file</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Base64String(System.Byte[],Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypt source bytes to Base64 encoded cipher <c>string</c>
            </summary>
            <param name="plainBytes">source byte[]</param>
            <param name="options">crypto options</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Base64String(System.String,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypt source <c>string</c> to Base64 encoded cipher <c>string</c>
            </summary>
            <param name="plaintext">source plaintext</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Base64String(System.IO.Stream,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source stream to Base64 encoded cipher <c>string</c>
            </summary>
            <param name="inputStream">a stream</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Encrypt.Base64String(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Encrypts source file to Base64 encoded cipher <c>string</c>
            </summary>
            <param name="file">a file</param>
            <param name="options">crypto options</param>
            <returns>ciphertext</returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Extensions">
            <summary>
            Extension methods for crypography
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Extensions.SecureClear(System.Byte[])">
            <summary>
            Zero out a <c>byte[]</c>
            </summary>
            <param name="bytes">a <c>byte[]</c></param>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Extensions.SecureClear(System.Char[])">
            <summary>
            Zero out a <c>char[]</c>
            </summary>
            <param name="chars">a <c>char[]</c></param>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Extensions.GetValidKeySizes(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Gets valid key sizes
            </summary>
            <param name="algorithm">a symmetric algorithm</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Extensions.GetValidBlockSizes(System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Gets valid block sizes
            </summary>
            <param name="algorithm">a symmetric algorithm</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.RecursiveHash">
            <summary>
            A subclass of <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler"/> aimed at calculating a hash of an entire directory by hashing the hashes of every file inside
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.RecursiveHash.Hashes">
            <summary>
            A reference to the internal hash collection
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.RecursiveHash.#ctor(Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{System.String}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{System.String}},System.Action{Horseshoe.NET.IO.FilePath,System.String,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{System.String}},Horseshoe.NET.Crypto.HashOptions,Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new instance of <c>RecursiveHash</c>
            </summary>
            <param name="root"></param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks.
            <example>
            <para>
            Here's an example that prints out all the subdirectories that were hashed by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            var finalHash = new RecursiveHash
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            Console.WriteLine("Final hash: " + finalHash);
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks.
            <example>
            <para>
            Here's an example that lists all files 1 MB or larger that were hashed by the directory traversal engine.
            Note: In practice is better to use <c>hashingFile</c> for this task.  See documentation for <c>hashingFile</c>.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            var finalHash = new RecursiveHash
            (
                @"C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                },
            ).Go();
            Console.WriteLine("Final hash: " + finalHash);
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="fileHashed">
            An optional, pluggable action to perform when a file is about to be hashed.
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were deleted by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            var finalHash = new RecursiveHash
            (
                @"C:\myFilesAndFolders",
                fileHashed: (@event, file, metadata) =&gt;
                {
                    if (file.Size >= 1024000)
                    {
                        largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                    }
                },
            ).Go();
            Console.WriteLine("Final hash: " + finalHash);
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="hashOptions">hash options</param>
            <param name="crawlOptions">crawl options</param>
        </member>
        <member name="M:Horseshoe.NET.Crypto.RecursiveHash.CrawlComplete">
            <summary>
            Overriding the base <c>CrawlComplete()</c> method
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Crypto.Hash">
            <summary>
            Factory methods for generating hashes
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Hash.Bytes(System.Byte[],Horseshoe.NET.Crypto.HashOptions)">
            <summary>
            Generate hash bytes from source text bytes
            </summary>
            <param name="plainBytes">source text bytes</param>
            <param name="options">hash options</param>
            <returns>hash bytes</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Hash.String(System.Byte[],Horseshoe.NET.Crypto.HashOptions)">
            <summary>
            Generate hash from source text bytes
            </summary>
            <param name="plainBytes">source text bytes</param>
            <param name="options">hash options</param>
            <returns>hash</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Hash.String(System.String,Horseshoe.NET.Crypto.HashOptions)">
            <summary>
            Generate hash from source text
            </summary>
            <param name="plainText">source text</param>
            <param name="options">hash options</param>
            <returns>hash</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Hash.String(System.IO.Stream,Horseshoe.NET.Crypto.HashOptions)">
            <summary>
            Generate hash from source text stream
            </summary>
            <param name="inputStream">source text stream</param>
            <param name="options">hash options</param>
            <returns>hash</returns>
        </member>
        <member name="M:Horseshoe.NET.Crypto.Hash.String(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Crypto.HashOptions)">
            <summary>
            Generate hash from source text file
            </summary>
            <param name="filePath">source text file</param>
            <param name="options">hash options</param>
            <returns>hash</returns>
        </member>
        <member name="T:Horseshoe.NET.Crypto.HashOptions">
            <summary>
            Configure the hashing mechanism here
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.HashOptions.Algorithm">
            <summary>
            the hashing algorithm
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.HashOptions.SaltText">
            <summary>
            Write-only preoperty accepting a hex string representing a single <c>byte</c> to be used as the hash salt
            </summary>
            <seealso cref="P:Horseshoe.NET.Crypto.HashOptions.Salt"/>
        </member>
        <member name="P:Horseshoe.NET.Crypto.HashOptions.Salt">
            <summary>
            The hash salt
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Crypto.HashOptions.Encoding">
            <summary>
            The character encoding to use for text-to-byte conversions
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.DataImport">
            <summary>
            The backing structure and logic behind data imports
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.Columns">
            <summary>
            A <c>Column[]</c> view of the column metadata used during import
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.ColumnCount">
            <summary>
            The column count
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.MappedColumnCount">
            <summary>
            The count of mapped columns only
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.EnforceColumnCount">
            <summary>
            If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.SkippedRows">
            <summary>
            Keeps a tally of blank rows that were skipped to keep row number integrity
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.RowCount">
            <summary>
            A count of the rows that have been imported
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.NextRow">
            <summary>
            The calculated row number of the source row currently being parsed
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.AutoTrunc">
            <summary>
            How to interpret empty values
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.BlankRowPolicy">
            <summary>
            How to handle blank rows, specifically leading and trailing
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.DataErrorHandlingPolicy">
            <summary>
            How to handle data errors
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.DataErrors">
            <summary>
            Errors are populated during certain export operations e.g. <c>ExportToObjectArrays()</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataImport.DataErrorCount">
            <summary>
            The number of data errors that occurred during the last data import
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.#ctor">
            <summary>
            Creates a <c>DataImport</c> instance
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.#ctor(System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean)">
            <summary>
            Creates a <c>DataImport</c> instance
            </summary>
            <param name="columns">a collection of columns</param>
            <param name="enforceColumnCount">if <c>true</c> produces table-shaped data as well as unlocks methods such as <c>ExportAsObjects()</c></param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.AddColumn(Horseshoe.NET.DataImport.Column)">
            <summary>
            You can add new columns at any time, even during an import.  If <c>EnforceColumnCount == true</c> then already imported rows will grow in size.
            </summary>
            <param name="column">A <c>Column</c></param>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.AddColumn(System.String,System.Type,System.Int32,System.Func{System.String,System.Object},System.Func{System.Object,System.String})">
            <summary>
            You can add new columns at any time, even during an import.  If <c>EnforceColumnCount == true</c> then already imported rows will grow in size.
            </summary>
            <param name="name">The column name</param>
            <param name="dataType">The column's data type</param>
            <param name="fixedWidth">The column's fixed width, only set this value for fixed-width imports</param>
            <param name="parser">A custom string-to-object converter, if required</param>
            <param name="formatter">A custom object-to-string formatter, if required</param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.ImportRaw(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            This method populates a <c>List&lt;string&gt;</c> with the raw parsed row data
            </summary>
            <param name="rawImportedRow"></param>
            <param name="sourceRowNumber"></param>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
            <exception cref="T:Horseshoe.NET.DataImport.StopImportingDataException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.HandleImportedDatum(System.String)">
            <summary>
            Applies <c>AutoTrunc</c> (and potentially other future preferences) to each parsed datum
            </summary>
            <param name="datum"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.FinalizeImport">
            <summary>
            Finalizes the import by applying <c>BlankRowPolicy</c> (and potentially other future preferences) to each parsed row
            </summary>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.ExportToStringArrays">
            <summary>
            Extract the data from each <c>ImportedRow</c> and generate and return an <c>IEnumerable&lt;string[]&gt;</c>
            </summary>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.ExportToObjectArrays">
            <summary>
            Extract the data from each <c>ImportedRow</c> and generate and return an <c>IEnumerable&lt;object[]&gt;</c> 
            based on the supplied column metadata
            </summary>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.ExportToFormattedObjectStringArrays">
            <summary>
            Extract the data from each <c>ImportedRow</c> and generate an <c>IEnumerable&lt;object[]&gt;</c> 
            based on the supplied column metadata, then formatting the data back to <c>string</c> according to the column metadata
            </summary>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
            <remarks><seealso cref="M:Horseshoe.NET.DataImport.DataImport.ExportToObjectArrays"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImport.ExportToFormattedObjectStringArrays(System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Collections.Generic.IEnumerable{System.Object[]})">
            <summary>
            Extract the data from each <c>ImportedRow</c> and generate an <c>IEnumerable&lt;object[]&gt;</c> 
            based on the supplied column metadata, then formatting the data back to <c>string</c> according to the column metadata
            </summary>
            <param name="columns">A collection of column metadata</param>
            <param name="objectArrays">an <c>IEnumerable&lt;object[]&gt;</c></param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
            <remarks><seealso cref="M:Horseshoe.NET.DataImport.DataImport.ExportToObjectArrays"/></remarks>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportedRow">
            <summary>
            Represents an imported data row including metadata i.e. source line number
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.ImportedRow.SourceLineNumber">
            <summary>
            The calculated line number in the original file where the row data came from
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.ImportedRow.Values">
            <summary>
            The row values read in from the text / file
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.ImportedRow.IsEmpty">
            <summary>
            Whether this row contains any data
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportedRow.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new <c>ImportedRow</c>
            </summary>
            <param name="sourceLineNumber"></param>
            <param name="values"></param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportedRow.UpdateValues(System.String[])">
            <summary>
            Replaces <c>Values</c> with the supplied <c>string[]</c>
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Horseshoe.NET.DataImport.StopImportingDataException">
            <summary>
            Certain conditions may trigger this exception to gracefully end the data import process. It is caught by the system, the definition of a benign exception.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.BlankRowPolicy">
            <summary>
            How to handle empty rows
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.Allow">
            <summary>
            Default.  Allow blank rows to remain in the final data structure
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.Drop">
            <summary>
            Preclude blank rows from being added to the data structure
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.DropLeading">
            <summary>
            Preclude leading blank rows from being added to the data structure
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.DropTrailing">
            <summary>
            Remove trailing blank rows the data structure
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.DropLeadingAndTrailing">
            <summary>
            Preclude leading blank rows from being added to the data structure and remove trailing blank rows
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.StopImporting">
            <summary>
            End the import if a blank row is detected
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.BlankRowPolicy.Error">
            <summary>
            Cause an exception to be thrown if a blank row is detected
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.Column">
            <summary>
            Represents data column metadata, responsible for text-to-object parsing as well as object-to-text formatting
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.Name">
            <summary>
            The column name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.DataType">
            <summary>
            The column's data type
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.FixedWidth">
            <summary>
            The column width (only applies to fixed-width data imports)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.Parser">
            <summary>
            How <c>object</c>s associated with this column are parsed from text.
            Applies to text file imports.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.Converter">
            <summary>
            How <c>object</c>s associated with this column are converted from another <c>object</c>. 
            Applies to object-direct imports such as from Excel (see <c>Horseshoe.NET.Excel</c> project / NuGet package).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.Formatter">
            <summary>
            How <c>object</c>s associated with this column should be formtted
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.NotMapped">
            <summary>
            Indicates whether <c>Column</c> adds a raw datum to the imported row
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.DisplayNullAs">
            <summary>
            How to diplay <c>null</c> values
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.Column.DataErrors">
            <summary>
            Obsolete.  All the data errors contained in this column.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.#ctor(System.String)">
            <summary>
            Creates a new <c>Column</c>
            </summary>
            <param name="name"></param>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Parse(System.String,System.Int32,System.Int32,Horseshoe.NET.DataImport.DataErrorHandlingPolicy)">
            <summary>
            Parses a raw datum into its <c>object</c> value according the column metadata
            </summary>
            <param name="raw">a raw datum</param>
            <param name="col">1-based column number</param>
            <param name="srcRow">1-based row number (calculated source row number)</param>
            <param name="errorHandling">how to handle data errors</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.DataImport.InvalidDatumException"></exception>
            <exception cref="T:Horseshoe.NET.DataImport.DataImportException"></exception>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Format(System.Object)">
            <summary>
            Format a datum as text
            </summary>
            <param name="obj">a datum</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.ToString">
            <summary>
            Creates a string representation of this <c>Column</c> for troubleshooting / informational purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Object(System.String,System.Int32)">
            <summary>
            Creates a basic <c>object</c> type <c>Column</c>
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.String(System.String,System.Int32)">
            <summary>
            Creates a basic <c>string</c> type <c>Column</c>
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Int(System.String,System.Int32)">
            <summary>
            Creates a basic <c>int</c> type <c>Column</c>
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Decimal(System.String,System.Int32)">
            <summary>
            Creates a basic <c>decimal</c> type <c>Column</c>
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Currency(System.String,System.Int32)">
            <summary>
            Creates a basic currency type <c>Column</c> (<c>decimal</c> type)
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Bool(System.String,System.Int32)">
            <summary>
            Creates a basic bool <c>Column</c>
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Date(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a basic <c>DateTime</c> <c>Column</c> for dates
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <param name="sourceLocale">the locale of the dates to be imported (e.g. "en-US")</param>
            <param name="displayFormat">custom date format (e.g. "G", "M/d/yyyy", etc.)</param>
            <param name="displayLocale">a locale (e.g. "en-US")</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Flat8Date(System.String,System.String,System.String)">
            <summary>
            Creates a basic <c>DateTime</c> <c>Column</c> for dates with a builtin parser that reads YYYYmmdd formatted dates
            </summary>
            <param name="name">column name</param>
            <param name="displayFormat">custom date format (e.g. "G", "M/d/yyyy", etc.)</param>
            <param name="displayLocale">a locale (e.g. "en-US")</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.Time(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a basic <c>DateTime</c> <c>Column</c> for times
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <param name="sourceLocale">the locale of the dates to be imported (e.g. "en-US")</param>
            <param name="displayFormat">custom time format (e.g. "T", "HH:mm:ss", etc.)</param>
            <param name="displayLocale">a locale (e.g. "en-US")</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.NoMap(System.String,System.Int32)">
            <summary>
            Creates a column that has no data mapping
            </summary>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.ByType(System.Type,System.String,System.Int32)">
            <summary>
            Attempt to auto-create a <c>Column</c> based on a data type
            </summary>
            <param name="type">a type</param>
            <param name="name">column name</param>
            <param name="fixedWidth">optional column width</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.DateFormat(System.Object,System.String,System.String)">
            <summary>
            A robust date formatter accepting custom formats and locales, default is "flex" (intelligently truncates zeros)
            </summary>
            <param name="obj">A date/time object</param>
            <param name="format">custom date format (e.g. "G", "M/d/yyyy", etc.)</param>
            <param name="locale">a locale (e.g. "en-US")</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.Column.TimeFormat(System.Object,System.String,System.String)">
            <summary>
            A robust time formatter accepting custom formats and locales, default is "flex" (intelligently truncates zeros)
            </summary>
            <param name="obj">A date/time object</param>
            <param name="format">custom time format (e.g. "T", "HH:mm:ss", etc.)</param>
            <param name="locale">locale (e.g. "en-US")</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.DataError">
            <summary>
            Represents a data parsing error if the policy is to embed them rather than throw an exception
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.DataError.Message">
            <summary>
            A message
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataError.#ctor(System.String)">
            <summary>
            Creates a new <c>DataError</c>
            </summary>
            <param name="message">a message</param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataError.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new <c>DataError</c>
            </summary>
            <param name="message">a message</param>
            <param name="col">the column in which the error occurred</param>
            <param name="sourceRow">the row in which the error occurred (referring to the calculated source row)</param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataError.Print">
            <summary>
            Returns the error message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataError.ToString">
            <summary>
            Formats this <c>DataError</c> instance as text (i.e. "(err)")
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.DataErrorHandlingPolicy">
            <summary>
            How to handle data errors
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.DataErrorHandlingPolicy.Throw">
            <summary>
            Causes an exception to be thrown if an error is identified
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.DataErrorHandlingPolicy.Embed">
            <summary>
            (Popular) Causes data errors to be stored in the <c>DataImport</c> instance
            </summary>
        </member>
        <member name="F:Horseshoe.NET.DataImport.DataErrorHandlingPolicy.IgnoreAndUseDefaultValue">
            <summary>
            Ignores any errors and replaces them with blank or <c>null</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.DataImportException">
            <summary>
            Base class for data import specific exceptions
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImportException.#ctor">
            <summary>
            Create a new <c>DataImportException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImportException.#ctor(System.String)">
            <summary>
            Create a new <c>DataImportException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImportException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <c>DataImportException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.DataImportExtensions">
            <summary>
            A collection of extension methods for <c>Horseshoe.NET.DataImport</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImportExtensions.Render(System.Collections.Generic.IList{Horseshoe.NET.DataImport.Column},System.String)">
            <summary>
            Renders of list of <c>Column</c> to text
            </summary>
            <param name="cols">a collection of <c>Column</c>s</param>
            <param name="nullReplacement">how to display <c>null</c> values</param>
            <returns>a <c>string</c> rendition of the collection</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.DataImportExtensions.Render(Horseshoe.NET.DataImport.Column,System.String)">
            <summary>
            Renders a <c>Column</c> to text
            </summary>
            <param name="col">a <c>Column</c></param>
            <param name="nullReplacement">how to display <c>null</c> values</param>
            <returns>a <c>string</c> rendition of the <c>Column</c></returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportData">
            <summary>
            Imports data from a text file
            </summary>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportData.DelimitedText">
            <summary>
            Contains methods for importing delimited data
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedText.AsStrings(System.String,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports delimited text and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedText.AsStrings(System.String,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports delimited text using supplied column metadata and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedText.AsObjects(System.String,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports delimited text using supplied column metadata and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedText.AsDataImport(System.String,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports delimited text and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedText.AsDataImport(System.String,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports delimited text and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile">
            <summary>
            Contains methods for importing delimited data from files such as CSV
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsStrings(Horseshoe.NET.IO.FilePath,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsStringsAsync(Horseshoe.NET.IO.FilePath,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file asynchronously and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsStrings(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsStringsAsync(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file asynchronously and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsObjects(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsObjectsAsync(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file asynchronously and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsDataImport(Horseshoe.NET.IO.FilePath,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsDataImportAsync(Horseshoe.NET.IO.FilePath,System.Char,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file asynchronously and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsDataImport(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.DelimitedTextFile.AsDataImportAsync(Horseshoe.NET.IO.FilePath,System.Char,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a delimited text file asynchronously and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="delimiter">The <c>char</c> that determines where to split the row into values</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="enforceColumnCount">If <c>true</c> the parsing engine will pad short rows with blank or <c>null</c> values and throw an exception if the row is too long</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportData.FixedWidthText">
            <summary>
            Contains methods for importing fixed-with data
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthText.AsStrings(System.String,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports fixed-width text using supplied column metadata and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthText.AsObjects(System.String,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports fixed-width text using supplied column metadata and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthText.AsDataImport(System.String,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports fixed-width text and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="rawData">The entire data set in <c>string</c> form; header row allowed, new lines separate rows, delimiter(s) separate columns</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile">
            <summary>
            Contains methods for importing fixed-with data files
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsStrings(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsStringsAsync(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file asynchronously and returns it as <c>string[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;string[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsObjects(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsObjectsAsync(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file asynchronously and returns it as <c>object[]</c>s to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>an <c>IEnumerable&lt;object[]&gt;</c></returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsDataImport(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.DataImport.ImportData.FixedWidthTextFile.AsDataImportAsync(Horseshoe.NET.IO.FilePath,System.Collections.Generic.IEnumerable{Horseshoe.NET.DataImport.Column},System.Boolean,Horseshoe.NET.DataImport.BlankRowPolicy,Horseshoe.NET.DataImport.DataErrorHandlingPolicy,Horseshoe.NET.Text.AutoTruncate,Horseshoe.NET.TraceJournal)">
            <summary>
            Imports a fixed-width text file asynchronously and returns the backing <c>DataImport</c> instance to the requestor
            </summary>
            <param name="file">A file - accepts <c>string</c> path or <c>FileInfo</c> instance</param>
            <param name="columns">A pre-determined collection of columns for enforcing certain rules about the imported data such as data types and number of items per row</param>
            <param name="hasHeaderRow">If <c>true</c> the first row will be skipped</param>
            <param name="blankRowPolicy">How to handle blank rows, specifically leading and trailing</param>
            <param name="errorHandlingPolicy">How to handle data errors</param>
            <param name="autoTrunc">How to interpret empty values</param>
            <param name="journal">A trace journal to which each step of the process is logged</param>
            <returns>a <c>DataImport</c> instance</returns>
        </member>
        <member name="T:Horseshoe.NET.DataImport.InvalidDatumException">
            <summary>
            Exception to be thrown when a data value cannot be parsed or is otherwise invalid
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.InvalidDatumException.Datum">
            <summary>
            The invalid datum
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.InvalidDatumException.ColumnName">
            <summary>
            The column name where the invalid datum was encountered
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.InvalidDatumException.FixedWidth">
            <summary>
            The size of the column if fixed-width
            </summary>
        </member>
        <member name="P:Horseshoe.NET.DataImport.InvalidDatumException.Position">
            <summary>
            Position information, free text (e.g. row 4 col 3)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.DataImport.InvalidDatumException.#ctor(System.String,System.Object,System.String,System.Int32,System.String)">
            <summary>
            Create a new <c>InvalidDatumException</c>
            </summary>
            <param name="message">a message</param>
            <param name="datum">the invalid datum</param>
            <param name="columnName">the column name where the invalid datum was encountered</param>
            <param name="fixedWidth">the size of the column if fixed-width</param>
            <param name="position">position information, free text (e.g. row 4 col 3)</param>
        </member>
        <member name="M:Horseshoe.NET.DataImport.InvalidDatumException.#ctor(System.Exception,System.Object,System.String,System.Int32,System.String)">
            <summary>
            Create a new <c>InvalidDatumException</c>
            </summary>
            <param name="innerException">the root exception</param>
            <param name="datum">the invalid datum</param>
            <param name="columnName">the column name where the invalid datum was encountered</param>
            <param name="fixedWidth">the size of the column if fixed-width</param>
            <param name="position">position information, free text (e.g. row 4 col 3)</param>
        </member>
        <member name="T:Horseshoe.NET.EnvironmentVariableNotFoundException">
            <summary>
            A specialized exception for missing or invalid envirionment variables.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.EnvironmentVariableNotFoundException.#ctor">
            <summary>
            Creates a new <c>EnvironmentVariableNotFoundException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.EnvironmentVariableNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new <c>EnvironmentVariableNotFoundException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.EnvVar">
            <summary>
            Factory methods for reading environment variables.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.EnvVar.Has(System.String)">
            <summary>
            Tests if an environment variable exists.
            </summary>
            <param name="varName">An environment variable name.</param>
            <returns>bool</returns>
        </member>
        <member name="M:Horseshoe.NET.EnvVar.Get(System.String,System.Boolean)">
            <summary>
            Gets an environment variable.
            </summary>
            <param name="varName">Environment variable name.</param>
            <param name="required">If <c>true</c>, throws error if environment variable is not found, default is <c>false</c>.</param>
            <returns>string or null</returns>
        </member>
        <member name="M:Horseshoe.NET.EnvVar.Get``1(System.String,System.Func{System.String,``0},System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String,System.String,System.String,System.Text.Encoding,System.Type,System.Boolean)">
            <summary>
            Gets an environment variable as an instance of the specified type.  By default, the 
            environment variable will be assumed to be a class name and an object of that type
            will be created.  Alternatively, the value can be an object representation.  To 
            hydrate an object representation into an instance you need to supply a <c>parseFunc</c>.
            </summary>
            <typeparam name="T">A reference type.</typeparam>
            <param name="varName">Environment variable name.</param>
            <param name="parseFunc">A parsing function.</param>
            <param name="required">If <c>true</c>, throws error if environment variable is not found, default is <c>false</c>.</param>
            <param name="numberStyle">Applies to <c>Get&lt;[numeric-type]&gt;()</c>. If supplied, indicates the expected number format.</param>
            <param name="provider">Applies to <c>Get&lt;[numeric-type-or-datetime]&gt;()</c>. An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">Applies to <c>Get&lt;[numeric-type-or-datetime]&gt;()</c>. An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <param name="trueValues">Applies to <c>Get&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">Applies to <c>Get&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="encoding">Applies to <c>Get&lt;byte[]&gt;()</c>. An optional text encoding, e.g. UTF8.</param>
            <param name="inheritedType">An optional type constraint - the type to which the returned <c>Type</c> must be assignable.</param>
            <param name="ignoreCase">Applies to <c>Get&lt;[enum-type-or-bool]&gt;()</c>. If <c>true</c>, the letter case of an enum value <c>string</c> is ignored when converting to the actual <c>enum</c> value, default is <c>false</c>.</param>
            <returns>An instance of <c>T</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Primitives.ObjectValues">
            <summary>
            A data structure similar to <see cref="T:Microsoft.Extensions.Primitives.StringValues"/> but with significant limitations, see remarks.
            </summary>
            <remarks>
            <para>
            This <c>struct</c> is mainly used internally, however, feel free to use it.
            </para>
            <para>
            Note: There are significant limitations in <c>ObjectValues</c> when compared with <see cref="T:Microsoft.Extensions.Primitives.StringValues"/>
            that you should be aware of.  
            </para>
            <para>
            First, although <see cref="T:Microsoft.Extensions.Primitives.StringValues"/> extends the <c>IList&lt;string&gt;</c>
            interface several of its methods (i.e. the mutatable methods) are not available and appear to be hidden from code completion 
            (e.g. <c>Add()</c>, <c>Clear()</c>, etc.).  
            </para>
            <para>
            Second, a <c>string</c> can be implicitly cast to <see cref="T:Microsoft.Extensions.Primitives.StringValues"/>
            via implicit operator.  However, <c>object</c> cannot be used in an implicit cast so <c>ObjectValues</c> is not quite as robust.
            </para>
            </remarks>
        </member>
        <member name="P:Horseshoe.NET.Primitives.ObjectValues.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">An index.</param>
            <returns>The <see cref="T:System.Object"/> at the specified index.</returns>
            <exception cref="T:System.NotImplementedException">If the setter is accessed.</exception>
        </member>
        <member name="P:Horseshoe.NET.Primitives.ObjectValues.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Primitives.ObjectValues.IsReadOnly">
            <summary>
            Returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new <c>ObjectValues</c> from the supplied collection.
            </summary>
            <param name="coll">A collection of <c>object</c>s.</param>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Add(System.Object)">
            <summary>
            Disabled feature.
            </summary>
            <param name="item">An item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Clear">
            <summary>
            Disabled feature.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Contains(System.Object)">
            <summary>
            Tests if <c>item</c> is contained in this <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/>.
            </summary>
            <param name="item">An item.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the entire contents of this <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">A compatible one-dimensional array.</param>
            <param name="arrayIndex">The specified index of the target array.</param>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.GetEnumerator">
            <summary>
            Returns an enumerator the iterates through the backing <c>List</c>.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurance within this <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/>.
            </summary>
            <param name="item">An item.</param>
            <returns>The zero-based index of the first occurance of <paramref name="item"/>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Insert(System.Int32,System.Object)">
            <summary>
            Disabled feature.
            </summary>
            <param name="index">An index.</param>
            <param name="item">An item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Remove(System.Object)">
            <summary>
            Disabled feature.
            </summary>
            <param name="item">An item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.RemoveAt(System.Int32)">
            <summary>
            Disabled feature.
            </summary>
            <param name="index">An index.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether two specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> objects have the same values in the same order.
            </summary>
            <param name="left">The first <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The second <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether this instance and another specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> object have the same values.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the value of <paramref name="other"/> is the same as the value of this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object[])">
            <summary>
            Determines whether this instance and a specified object array have the same values.
            </summary>
            <param name="other">The object array to compare to this instance.</param>
            <returns><c>true</c> if the value of <paramref name="other"/> is the same as this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to <paramref name="obj"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.GetHashCode">
            <summary>
            Gets a hashcode for this <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> and <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> objects have the same values.
            </summary>
            <param name="left">The <see cref="T:System.Object"/> to compare.</param>
            <param name="right">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>. If <paramref name="left"/> is <c>null</c>, the method returns <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> and <see cref="T:System.Object"/> objects have the same values.
            </summary>
            <param name="left">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>. If <paramref name="right"/> is <c>null</c>, the method returns <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object[],Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether the specified object array and <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> objects have the same values.
            </summary>
            <param name="left">The object array to compare.</param>
            <param name="right">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues,System.Object[])">
            <summary>
            Determines whether the specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> and object array objects have the same values.
            </summary>
            <param name="left">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The object array to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Equality(Horseshoe.NET.Primitives.ObjectValues,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether two specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> have the same values.
            </summary>
            <param name="left">The first <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The second <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Inequality(Horseshoe.NET.Primitives.ObjectValues,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether two specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> have different values.
            </summary>
            <param name="left">The first <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The second <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different to the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Equality(Horseshoe.NET.Primitives.ObjectValues,System.Object)">
            <inheritdoc cref="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues,System.Object)" />
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Inequality(Horseshoe.NET.Primitives.ObjectValues,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> and <see cref="T:System.Object"/> objects have different values.
            </summary>
            <param name="left">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The <see cref="T:System.Object"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different to the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Equality(System.Object,Horseshoe.NET.Primitives.ObjectValues)">
            <inheritdoc cref="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object,Horseshoe.NET.Primitives.ObjectValues)" />
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Inequality(System.Object,Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> and <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> objects have different values.
            </summary>
            <param name="left">The <see cref="T:System.Object"/> to compare.</param>
            <param name="right">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different to the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Equality(Horseshoe.NET.Primitives.ObjectValues,System.Object[])">
            <inheritdoc cref="M:Horseshoe.NET.Primitives.ObjectValues.Equals(Horseshoe.NET.Primitives.ObjectValues,System.Object[])" />
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Inequality(Horseshoe.NET.Primitives.ObjectValues,System.Object[])">
            <summary>
            Determines whether the specified <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> and object array have different values.
            </summary>
            <param name="left">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <param name="right">The object array to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different to the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Equality(System.Object[],Horseshoe.NET.Primitives.ObjectValues)">
            <inheritdoc cref="M:Horseshoe.NET.Primitives.ObjectValues.Equals(System.Object[],Horseshoe.NET.Primitives.ObjectValues)" />
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.op_Inequality(System.Object[],Horseshoe.NET.Primitives.ObjectValues)">
            <summary>
            Determines whether the specified object array and <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> have different values.
            </summary>
            <param name="left">The object array to compare.</param>
            <param name="right">The <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> to compare.</param>
            <returns><c>true</c> if the value of <paramref name="left"/> is different to the value of <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.From(System.Object[])">
            <summary>
            Creates a new <c>ObjectValues</c> from a single or array of <c>object</c>s.
            </summary>
            <param name="objs">A single or array of <c>object</c>s.</param>
            <returns>An <c>ObjectValues</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Primitives.ObjectValues.FromStringValues(Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            Creates a new <c>ObjectValues</c> from a single or array of <c>strings</c>s.
            </summary>
            <param name="stringValues">A single or array of <c>strings</c>s.</param>
            <returns>An <c>ObjectValues</c>.</returns>
        </member>
        <member name="P:Horseshoe.NET.Primitives.ObjectValues.Empty">
            <summary>
            An <see cref="T:Horseshoe.NET.Primitives.ObjectValues"/> with an empty backing list.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Password">
            <summary>
            A multi-purpose, <c>string</c> and <c>SecureString</c>-compatible password handler.
            It stores all passwords in <c>SecureString</c> format, therefore, by convention, it only accepts 
            unencrypted password <c>string</c>s or <c>SecureString</c>s as input.  Technically, it can't tell the 
            difference between encrypted and unencrypted.  So, if client code knowingly creates a <c>Password</c> 
            from an encrypted password <c>string</c> please utilize the constructor and set <c>isEncrytped = true</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Password.SecurePassword">
            <summary>
            A secure password.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Password.HasSecurePassword">
            <summary>
            Indicates whether this value is storing a <c>SecureString</c> password.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Password.#ctor(System.String,System.Boolean,Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Creates a new <c>Password</c> by converting the supplied password <c>string</c> to a <c>SecureString</c>.
            If encrypted, <c>SecurePassword</c> is derived directly from decrypting <c>password</c> which attempts
            to leave no memory footprint exposing the unsecure, unencrypted password.
            </summary>
            <param name="password">A password <c>string</c>.</param>
            <param name="isEncrypted">A flag indicating whether the supplied password <c>string</c> is encrypted.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <seealso cref="M:Horseshoe.NET.Credential.Build(System.String,System.String,System.Boolean,Horseshoe.NET.Crypto.CryptoOptions,System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Password.#ctor(System.Security.SecureString)">
            <summary>
            Creates a new <c>Password</c> from the supplied <c>SecureString</c>.
            </summary>
            <param name="securePassword">A <c>SecureString</c> password.</param>
        </member>
        <member name="M:Horseshoe.NET.Password.ToUnsecurePassword">
            <summary>
            Converts the stored password to a <c>strrng</c>.
            </summary>
            <returns>A plain password</returns>
        </member>
        <member name="M:Horseshoe.NET.Password.ToEncryptedPassword(Horseshoe.NET.Crypto.CryptoOptions)">
            <summary>
            Converts the stored password to an encrypted <c>strrng</c>.
            </summary>
            <returns>An encrypted password</returns>
        </member>
        <member name="P:Horseshoe.NET.Password.NoPassword">
            <summary>
            A default value representing a non-existent password.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Password.op_Implicit(System.String)~Horseshoe.NET.Password">
            <summary>
            Implicitly casts a string as a <c>Password</c>.
            </summary>
            <param name="password">A password <c>string</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Password.op_Implicit(System.Security.SecureString)~Horseshoe.NET.Password">
            <summary>
            Implicitly casts a <c>SecureString</c> as a <c>Password</c>.
            </summary>
            <param name="securePassword">A secure password.</param>
        </member>
        <member name="M:Horseshoe.NET.Password.op_Implicit(Horseshoe.NET.Password)~System.Security.SecureString">
            <summary>
            Implicitly casts a <c>Password</c> back to a <c>SecureString</c>.
            </summary>
            <param name="password">A <c>Password</c>.</param>
        </member>
        <member name="T:Horseshoe.NET.ExceptionTypeRenderingPolicy">
            <summary>
            Defines preferences for <c>Exception</c> rendering, specifically the exception <c>Type</c>
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ExceptionTypeRenderingPolicy.Fqn">
            <summary>
            Render the fully qualified type name
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ExceptionTypeRenderingPolicy.FqnExceptSystem">
            <summary>
            Render the fully qualified type name except for 'System' exceptions which are common
            </summary>
        </member>
        <member name="F:Horseshoe.NET.ExceptionTypeRenderingPolicy.NameOnly">
            <summary>
            Render only the short type name
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Ftp.FtpOperationException">
            <summary>
            An exception to use when FTP operations do not succeed
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpOperationException.#ctor(System.String)">
            <summary>
            Creates a new <c>FtpOperationException</c>
            </summary>
            <param name="message">a message</param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>FtpOperationException</c>
            </summary>
            <param name="message">a message</param>
            <param name="innerException">an exception</param>
        </member>
        <member name="T:Horseshoe.NET.Ftp.Ftp">
            <summary>
            A collection of factory methods for FTP operations
            </summary>
            <remarks>
            Reference: https://docs.microsoft.com/en-us/dotnet/framework/network-programming/how-to-upload-files-with-ftp
            </remarks>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.UploadFile(Horseshoe.NET.IO.FilePath,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.String,System.Boolean,System.Text.Encoding,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Uploads a file to an FTP server
            </summary>
            <param name="filePath">The source file path</param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="serverFileName">What to name the uploaded file (default is the file's current name)</param>
            <param name="isBinary">Affects how the file is read into memory before sending to the FTP server, default is <c>false</c></param>
            <param name="encoding">An optional text encoding used when <c>isBinary == false</c> to read the file from storage and convert it to bytes</param>
            <param name="fileUploaded">Action to perform on file upload, e.g. <c>fileUploaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.UploadFile(System.String,System.String,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Text.Encoding,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Uploads a file to an FTP server
            </summary>
            <param name="fileName">What to name the uploaded file</param>
            <param name="contents">Contents as a <c>string</c></param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="encoding">An optional text encoding to convert it to bytes</param>
            <param name="fileUploaded">Action to perform on file upload, e.g. <c>fileUploaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.UploadFile(Horseshoe.NET.IO.NamedMemoryStream,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Uploads a file to an FTP server
            </summary>
            <param name="namedStream">A named memory stream</param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileUploaded">Action to perform on file upload, e.g. <c>fileUploaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.UploadFile(System.String,System.IO.Stream,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Uploads a file to an FTP server
            </summary>
            <param name="fileName">What to name the uploaded file</param>
            <param name="contents">Contents as a <c>Stream</c></param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileUploaded">Action to perform on file upload, e.g. <c>fileUploaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.UploadFile(System.String,System.Byte[],Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Uploads a file to an FTP server
            </summary>
            <param name="fileName">What to name the uploaded file</param>
            <param name="contents">Contents as a <c>byte[]</c></param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileUploaded">Action to perform on file upload, e.g. <c>fileUploaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.DownloadFile(System.String,Horseshoe.NET.IO.DirectoryPath,System.String,System.Boolean,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Downloads a file from an FTP server
            </summary>
            <param name="serverFileName">The file to download from the FTP server</param>
            <param name="localDirectory"></param>
            <param name="localFileName">Optionally rename the downloaded file</param>
            <param name="overwrite">Set to <c>true</c> to overwrite an existing file if applicable, default is <c>false</c></param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileDownloaded">Action to perform on file download, e.g. <c>fileDownloaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
            <exception cref="T:Horseshoe.NET.Ftp.FtpOperationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.DownloadFile(System.String,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int64,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Downloads a file from an FTP server
            </summary>
            <param name="serverFileName">The file to download from the FTP server</param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileDownloaded">Action to perform on file download, e.g. <c>fileDownloaded(string fileName, long fileSize, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.ListDirectoryContents(System.String,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.Int32,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Lists the contents of a remote virtual directory on an FTP server
            </summary>
            <param name="fileMask">Optional file mask for filtering the list (for exmaple use *.txt)</param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="directoryContentsListed">Action to perform on file download, e.g. <c>directoryContentsListed(int count, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.ListDetailedDirectoryContents(Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.Int32,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Lists the contents of a remote virtual directory on an FTP server
            </summary>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="directoryContentsListed">Action to perform on file download, e.g. <c>directoryContentsListed(int count, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Ftp.Ftp.DeleteFile(System.String,Horseshoe.NET.Ftp.FtpConnectionInfo,System.String,System.Action{System.String,System.Int32,System.String},System.Action{System.String})">
            <summary>
            Deletes a file remotely from an FTP server
            </summary>
            <param name="serverFileName">The file to download from the FTP server</param>
            <param name="connectionInfo">FTP connection info</param>
            <param name="serverPath">The upload destination virtual path, overrides <c>ServerPath</c> in <c>connectionInfo</c></param>
            <param name="fileDeleted">Action to perform on file download, e.g. <c>fileDeleted(string fileName, int statusCode, string statusDescription)</c></param>
            <param name="requestUriCreated">View the request URI, e.g. <c>requestUriCreated(string requestUri)</c></param>
        </member>
        <member name="T:Horseshoe.NET.Ftp.FtpConnectionInfo">
            <summary>
            FTP connection info
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpConnectionInfo.Server">
            <summary>
            FTP server name or DNS alias
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpConnectionInfo.Port">
            <summary>
            Optional TCP port
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpConnectionInfo.ServerPath">
            <summary>
            The virtual path on the FTP server to set as the current directory
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpConnectionInfo.EnableSsl">
            <summary>
            Set to <c>true</c> to enable SSL on the FTP connection
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpConnectionInfo.Credentials">
            <summary>
            The FTP login username and password
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpConnectionInfo.ToString">
            <summary>
            Display this <c>FtpConnectionInfo</c> as a pseudo connection string 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Ftp.FtpFileMasks">
            <summary>
            A sampling of file masks to filter certain FTP results, e.g. *.pdf
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.NoExtension">
            <summary>
            No file extension filtering
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Dat">
            <summary>
            File mask for .dat files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Doc">
            <summary>
            File mask for .doc files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Docx">
            <summary>
            File mask for .docx files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Jpg">
            <summary>
            File mask for .jpg files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Pdf">
            <summary>
            File mask for .pdf files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Png">
            <summary>
            File mask for .png files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Ppt">
            <summary>
            File mask for .ppt files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Pptx">
            <summary>
            File mask for .pptx files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Txt">
            <summary>
            File mask for .txt files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Xls">
            <summary>
            File mask for .xls files
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Ftp.FtpFileMasks.Xlsx">
            <summary>
            File mask for .xlsx files
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Ftp.FtpSettings">
            <summary>
            Configuration settings for Horseshoe.NET.Ftp
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpSettings.DefaultFtpServer">
            <summary>
            Gets or sets the default FTP server.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Ftp:Server and OrganizationalDefaultSettings: key = Ftp.Server)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpSettings.DefaultPort">
            <summary>
            Gets or sets the default FTP port.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Ftp:Port and OrganizationalDefaultSettings: key = Ftp.Port)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpSettings.DefaultEnableSsl">
            <summary>
            Gets or sets whether FTP will use SSL.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Ftp:EnableSsl and OrganizationalDefaultSettings: key = Ftp.EnableSsl)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpSettings.DefaultCredentials">
            <summary>
            Gets or sets the default credentials used by FTP.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Ftp:UserName|Password|IsEncryptedPassword|Domain and OrganizationalDefaultSettings: key = Ftp.Credentials)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Ftp.FtpSettings.DefaultServerPath">
            <summary>
            Gets or sets the default server path used by FTP.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Ftp:ServerPath and OrganizationalDefaultSettings: key = Ftp.ServerPath)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Ftp.FtpUtil">
            <summary>
            A set of utility methods for supporting FTP operations
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpUtil.ParseFtpConnectionString(System.String)">
            <summary>
            Parses an FTP connection string 
            </summary>
            <param name="connectionString">A pseudo connection string for FTP</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
            <remarks>
            Pseudo connection strings 
            <para>
            Example #1: ftp://george@11.22.33.44/dir/subdir?password=akdj$8iO(d@1sd
            </para>
            <para>
            Example #2: ftp://george@11.22.33.44/dir/subdir?encryptedPassword=a6bd9cf8a07dbc15d==
            </para>
            </remarks>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpUtil.BuildConnectionString(Horseshoe.NET.Ftp.FtpConnectionInfo,System.Boolean)">
            <summary>
            Builds a pseudo connection string
            </summary>
            <param name="connectionInfo">FTP connection info</param>
            <param name="hidePassword">hide the password</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Ftp.FtpUtil.BuildConnectionString(System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.Nullable{Horseshoe.NET.Credential},System.Boolean)">
            <summary>
            Builds a pseudo connection string
            </summary>
            <param name="server">FTP server name or DNS alias</param>
            <param name="port">optional TCP port</param>
            <param name="serverPath">the virtual path on the FTP server to set as the current directory</param>
            <param name="enableSsl">set to <c>true</c> to enable SSL on the FTP connection</param>
            <param name="credentials">the FTP login username and password</param>
            <param name="hidePassword">hide the password</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent">
            <summary>
            The file related event types triggered by the directory crawler 
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent.FileFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent.FileSkipped">
            <summary>
            
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent.FileErrored">
            <summary>
            
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent.OnHalt">
            <summary>
            
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1">
            <summary>
            Information useful for consumers of the <c>DirectoryCrawler</c> API.
            </summary>
            <typeparam name="T">matches <c>DirectoryCrawler</c> type param</typeparam>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.Level">
            <summary>
            How far the current directory is up the directory tree compared to the root directory. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.DirectoryCrawler">
            <summary>
            A reference to the directory traversal engine
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.DryRun">
            <summary>
            Whether the <c>DirectoryCrawler</c> is operating in dry run mode
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.SkipReason">
            <summary>
            The reason the current directory was skipped, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.SkipComment">
            <summary>
            Additional context about the current directory being skipped, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.Exception">
            <summary>
            The exception, if any, that was thrown by the <c>DirectoryCrawler</c> consumer
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.Statistics">
            <summary>
            A set of basic file and directory statistics gathered by the directory traversal engine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.#ctor(Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{`0})">
            <summary>
            Creates a new <c>DirectoryMetadata</c> from another instance
            </summary>
            <param name="metadata">another instance</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.#ctor(System.Int32,Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler{`0},System.Boolean,Horseshoe.NET.IO.DirectoryCrawler.SkipReason,System.Exception,Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics)">
            <summary>
            Creates a new <c>DirectoryMetadata</c>
            </summary>
            <param name="level">how far the current directory is up the directory tree compared to the root directory</param>
            <param name="directoryCrawler">a reference to the directory traversal engine</param>
            <param name="dryRun">whether the <c>DirectoryCrawler</c> is operating in dry run mode</param>
            <param name="skipReason">the reason the current directory was skipped, if applicable</param>
            <param name="exception">the exception, if any, that was thrown by the <c>DirectoryCrawler</c> consumer</param>
            <param name="statistics">a set of basic file and directory statistics gathered by the directory traversal engine</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.SkipThisDirectory">
            <summary>
            In the "directory entered" phase, a consumer can call this to stop processing the current directory
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.Halt">
            <summary>
            Stops the directory traversal engine
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlException">
            <summary>
            A specialized exception specifically for directory crawl events
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlException.#ctor(System.String)">
            <summary>
            Creates a new <c>DirectoryCrawlException</c>.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>DirectoryCrawlException</c>.
            </summary>
            <param name="message">A message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1">
            <summary>
            Information useful for consumers of the <c>DirectoryCrawler</c> API.
            </summary>
            <typeparam name="T">matches <c>DirectoryCrawler</c> type param</typeparam>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.Level">
            <summary>
            How far the current file is up the directory tree compared to the root directory. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.DirectoryCrawler">
            <summary>
            A reference to the directory traversal engine
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.DryRun">
            <summary>
            Whether the <c>DirectoryCrawler</c> is operating in dry run mode
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.SkipReason">
            <summary>
            The reason the current file was skipped, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.SkipComment">
            <summary>
            Additional context about the current file being skipped, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.Exception">
            <summary>
            The exception, if any, that was thrown by the <c>DirectoryCrawler</c> consumer
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.Statistics">
            <summary>
            A set of basic file and directory statistics gathered by the directory traversal engine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.#ctor(Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{`0})">
            <summary>
            Creates a new <c>FileMetadata</c> from another instance
            </summary>
            <param name="metadata">another instance</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.#ctor(System.Int32,Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler{`0},System.Boolean,Horseshoe.NET.IO.DirectoryCrawler.SkipReason,System.Exception,Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics)">
            <summary>
            Creates a new <c>FileMetadata</c>
            </summary>
            <param name="level">how far the current file is up the directory tree compared to the root directory</param>
            <param name="directoryCrawler">a reference to the directory traversal engine</param>
            <param name="dryRun">whether the <c>DirectoryCrawler</c> is operating in dry run mode</param>
            <param name="skipReason">the reason the current file was skipped, if applicable</param>
            <param name="exception">the exception, if any, that was thrown by the <c>DirectoryCrawler</c> consumer</param>
            <param name="statistics">a set of basic file and directory statistics gathered by the directory traversal engine</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.SkipThisFile(Horseshoe.NET.IO.DirectoryCrawler.SkipReason,System.String)">
            <summary>
            In the "file found" phase, a consumer can call this to prevent processing the current file
            </summary>
            <param name="reason">the reason the current file was skipped, if applicable</param>
            <param name="skipComment">additional context about the current file being skipped, if applicable</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.Halt">
            <summary>
            Stops the directory traversal engine
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.Extensions">
            <summary>
            A set of extenion methods for <c>DirectoryCrawler</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.Extensions.Display(Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics)">
            <summary>
            Generates a printable list of the statistics
            </summary>
            <param name="stats">a set of basic file and directory statistics gathered by the directory traversal engine</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.CopyOptions">
            <summary>
            A specialized subclass of <c>CrawlOptions</c> which also bears the <c>CopyMode</c> for file copying
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CopyOptions.CopyMode">
            <summary>
            Granular settings specifying file copy operation behavior
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.CopyOptions.#ctor">
            <summary>
            Creates a new <c>CopyOptions</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.CopyOptions.#ctor(Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>CopyOptions</c> from a <c>CrawlOptions</c> instance
            </summary>
            <param name="options">a <c>CrawlOptions</c> instance</param>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions">
            <summary>
            Settings specifying directory traversal engine behavior 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.FileSearchPattern">
            <summary>
            A quick and dirty file filter used by the directory traversal engine.  
            Be advised, this file filtering method does not reflect in the skipped file count statistic.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.FileFilter">
            <summary>
            A file filter option that reflects in the skipped file count statistic.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.DirectorySearchPattern">
            <summary>
            A quick and dirty directory filter used by the directory traversal engine.  
            Be advised, this directory filtering method does not reflect in the skipped directory count statistic.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.DirectoryFilter">
            <summary>
            A directory filter option that reflects in the skipped directory count statistic.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.DirectoriesOnly">
            <summary>
            This optimizes the directory traversal engine for operations that only care about directories.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.DryRun">
            <summary>
            Allows the directory traversal engine to run in theoretical mode meaning that files and directories are not actually created, modified, deleted or moved.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.ReportErrorsAndContinue">
            <summary>
            Precludes exceptions from halting the directory traveral engine
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.#ctor">
            <summary>
            Creates an new <c>CrawlOptions</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions.#ctor(Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates an new <c>CrawlOptions</c> from anothe instance
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.FileSkippedException">
            <summary>
            An exception, raised when consumers skip a file, that is handled by the system (the definition of a benign exception)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileSkippedException.SkipReason">
            <summary>
            The reason the current file was skipped, if applicable
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.FileSkippedException.SkipComment">
            <summary>
            Additional context about the current file being skipped, if applicable
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.FileSkippedException.#ctor(Horseshoe.NET.IO.DirectoryCrawler.SkipReason,System.String)">
            <summary>
            Creates a new <c>FileSkippedException</c>
            </summary>
            <param name="skipReason">the reason the current file was skipped, if applicable</param>
            <param name="skipComment">additional context about the current file being skipped, if applicable</param>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectorySkippedException">
            <summary>
            An exception, raised when consumers skip a directory, that is handled by the system (the definition of a benign exception)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectorySkippedException.#ctor">
            <summary>
            Creates a new <c>DirectorySkippedException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlHaltedException">
            <summary>
            An exception, raised when consumers halt the directory traversal engine, that is handled by the system (the definition of a benign exception)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlHaltedException.#ctor">
            <summary>
            Creates a new <c>DirectoryCrawlHaltedException</c>
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics">
            <summary>
            A set of basic file and directory statistics gathered by the directory traversal engine
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.DirectoriesCrawled">
            <summary>
            Reports how many directories were encountered, minus any skipped
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.DirectoriesSkipped">
            <summary>
            Reports how many directories were skipped
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.DirectoriesErrored">
            <summary>
            Reports how many directories resulted in exceptions
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.FilesCrawled">
            <summary>
            Reports how many files were encountered, minus any skipped
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.FilesSkipped">
            <summary>
            Reports how many files were skipped
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.FilesErrored">
            <summary>
            Reports how many files resulted in exceptions
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlStatistics.SizeOfFilesCrawled">
            <summary>
            Reports the total size of all files found during the traversal operation, not including any skipped
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent">
            <summary>
            The set of event types triggered by the directory traversal engine
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.OnInit">
            <summary>
            Event type referring to startup of the directory traveral engine
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.DirectoryEntered">
            <summary>
            Event type referring to finding a directory (may be skipped even after this event has fired)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.DirectoryExited">
            <summary>
            Event type referring to completing traversal of a directory
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.DirectorySkipped">
            <summary>
            Event type referring to skipping a directory (filtered or programmatically skipped)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.DirectoryErrored">
            <summary>
            Event type referring to encountering an exception
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.OnHalt">
            <summary>
            Event type referring to halting the directory traveral engine (either due to certain conditions or programmatically)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent.OnComplete">
            <summary>
            Event type referring to completion of the directory traveral engine (will always trigger even if an <c>OnHalt</c> event was also triggered)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler">
            <summary>
            An adaptable, robust directory traversal engine that can accommodate many use cases
            and powers features such as <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveCopy"/>, <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveDelete"/> 
            and <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveMove"/>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler.#ctor(Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>DirectoryCrawler</c> with pluggable actions that let client code perform a wide variety of filesystem oriented tasks
            </summary>
            <param name="root">A directory to traverse</param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks
            <example>
            Here's an example that prints out all the subdirectories of a directory:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            Here's an example that lists all files greater than 1 MB:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                }
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </example>
            </param>
            <param name="options">crawler options</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler.CrawlComplete">
            <summary>
            An action to perform at the end of the directory crawl process, returns a value that could represent the 
            cumulative or final result of the crawl operation. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1">
            <summary>
            A generic, adaptable, robust directory traversal engine that can accommodate many use cases
            and powers features such as <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveSize"/> and <see cref="T:Horseshoe.NET.Crypto.RecursiveHash"/>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.Root">
            <summary>
            A directory to traverse
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.RootLength">
            <summary>
            The cached length of <c>Root</c>, useful in situations that perform a large amount of 
            string manipulation such as <c>RecursiveCopy</c> and <c>RecursiveMove</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.DirectoryCrawled">
            <summary>
            A pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks
            <example>
            Here's an example that prints out all the subdirectories of a directory:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.FileCrawled">
            <summary>
            A pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            Here's an example that lists all files greater than 1 MB:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                }
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.Options">
            <summary>
            Crawl options
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.Statistics">
            <summary>
            A small group of basic statistics gathered over the course of the directory crawl operation, 
            e.g. number of files and directory scanned, number of files and directories skipped and 
            total combined size of all the scanned files
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.#ctor(Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{`0}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{`0}},Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>DirectoryCrawler</c> with pluggable actions that let client code perform a wide variety of filesystem oriented tasks
            </summary>
            <param name="root">A directory to traverse</param>
            <param name="directoryCrawled">
            A pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks
            <para>
            Here's an example that prints out all the subdirectories of a directory:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </param>
            <param name="fileCrawled">
            A pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            Here's an example that lists all files greater than 1 MB:
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                }
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </example>
            </param>
            <param name="options">crawler options</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.InitCrawl">
            <summary>
            Subclasses can execute initialization code by overriding this method.
            <example>
            Alternatively, initialization logic can also go here...
            <code>
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.OnInit:
                            // your code goes here
                            break;
                    }
                }
            ).Go();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.CrawlComplete">
            <summary>
            Subclasses can execute finalization code by overriding this method.
            <example>
            Alternatively, finalization logic can also go here...
            <code>
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            new DirectoryCrawler
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.OnComplete:
                            // your code goes here
                            break;
                    }
                }
            ).Go();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.Go">
            <summary>
            Starts the directory traversal engine and returns the result of <c>CrawlComplete()</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawler`1.Stop">
            <summary>
            Sets a flag that will naturally end the directory traversal
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.CopyMode">
            <summary>
            Granular settings specifying file copy operation behaviors
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.ErrorIfDestinationNotEmpty">
            <summary>
            Asserts whether the destination directory is empty or non-existent
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.Overwrite">
            <summary>
            Enables blanket file overwriting capabilities.  This option alone does not remove orphaned destination files and folders, for this please see <c>RemoveDestinationFilesAndDirectoriesNotInSource</c>.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.DontOverwriteFileIfNewer">
            <summary>
            Adds an overwrite exception for already existing destination files if the source file is newer, rarely used.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.DontOverwriteFileIfSameModifiedDate">
            <summary>
            Adds an overwrite exception for already existing destination files if the source file has the same modified date, commonly used.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.DontOverwriteFileIfMatchingHash">
            <summary>
            Adds an overwrite exception for already existing destination files if the source file produces the same hash, use with caution in scenarios involving network drives.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.RemoveDestinationFilesAndDirectoriesNotInSource">
            <summary>
            Removes orphaned destination files and folders.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.CopyMode.DeleteDestinationDirectoryBeforeCopy">
            <summary>
            Attempts to prevent syncing and copying issues by emptying the destination root directory prior to copying the source to the destination, possibly less performant.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveSize">
            <summary>
            This <c>DirectoryCrawler</c> traverses a directory and returns the total size of the files within
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.RecursiveSize.#ctor(Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{System.Int64}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{System.Int64}},Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>RecursiveSize</c> file crawler
            </summary>
            <param name="root"></param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks.
            <example>
            Here's an example that prints out all the subdirectories encountered during the 'recursive size' directory crawler operation.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            var totalSize = new RecursiveSize
            (
                "C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            Console.WriteLine("Total size: " + FileUtil.GetDisplayFileSize(totalSize));
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            Here's an example that lists all files 1 MB or larger encountered during the 'recursive size' directory crawler operation.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            var totalSize = new RecursiveSize
            (
                "C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                }
            ).Go();
            Console.WriteLine("Total size: " + FileUtil.GetDisplayFileSize(totalSize));
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </example>
            </param>
            <param name="options">crawl options</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.RecursiveSize.CrawlComplete">
            <summary>
            Return a final value after the directory crawl operation is complete
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.SkipReason">
            <summary>
            The reason a file or directory was skipped.  For reporting purposes and troubleshooting.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.SkipReason.NA">
            <summary>
            The default value
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.SkipReason.ClientFiltered">
            <summary>
            Calling code supplied a filter that resulted in the file or directory in question being skipped
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.SkipReason.ClientSkipped">
            <summary>
            Calling code specifically requested to skip the file or directory in question (see <see cref="M:Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata`1.SkipThisDirectory"/> and <see cref="M:Horseshoe.NET.IO.DirectoryCrawler.FileMetadata`1.SkipThisFile(Horseshoe.NET.IO.DirectoryCrawler.SkipReason,System.String)" />)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.SkipReason.AutoSkipped">
            <summary>
            A special case applied here and the root directory was automatically skipped
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.DirectoryCrawler.SkipReason.AlreadyExists">
            <summary>
            A file copy was skipped due to the destination file already exists
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveCopy">
            <summary>
            This <c>DirectoryCrawler</c> traverses a directory and copies it and all the files and subfolders inside to the destination path.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.RecursiveCopy.DestinationRoot">
            <summary>
            The destination counterpart of <c>Root</c>, the directory whose contents and self are to be copied
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.RecursiveCopy.#ctor(Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},Horseshoe.NET.IO.DirectoryCrawler.CopyOptions)">
            <summary>
            Create a new <c>RecursiveCopy</c>
            </summary>
            <param name="sourceRoot">The directory to copy, a.k.a. <c>Root</c></param>
            <param name="destinationRoot">The path to which the the directory will be copied</param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks
            <example>
            <para>
            Here's an example that prints out all the subdirectories that were copied by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new RecursiveCopy
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata, statistics) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were moved by the directory traversal engine.
            Note: In practice is better to use <c>copyingFile</c> for this task.  See documentation for <c>copyingFile</c>.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveCopy
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata, statistics) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="copyingFile">
            A an optional, pluggable action to perform when a file is about to be copied.
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were copied by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveCopy
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                copyingFile: (srcFile, destFile, metadata) =&gt;
                {
                    if (file.Size >= 1024000)
                    {
                        largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="fileCopied"></param>
            <param name="deletingFile"></param>
            <param name="fileDeleted"></param>
            <param name="creatingDestinationDirectory"></param>
            <param name="destinationDirectoryCreated"></param>
            <param name="creatingDestinationRootDirectory"></param>
            <param name="destinationRootDirectoryCreated"></param>
            <param name="deletingDirectory"></param>
            <param name="directoryDeleted"></param>
            <param name="options"></param>
            <exception cref="T:Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlException"></exception>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveDelete">
            <summary>
            <para>
            This <c>DirectoryCrawler</c> traverses and deletes a directory and all the files and subfolders inside.
            </para>
            <para>
            It is possible to delete only certain files and folders.  See <see cref="T:Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions"/>.
            </para>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.RecursiveDelete.#ctor(Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Boolean,Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>RecursiveDelete</c>
            </summary>
            <param name="root">The directory whose contents and self are to be deleted</param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks.
            <example>
            <para>
            Here's an example that prints out all the subdirectories that were deleted by the directory traversal engine.
            Note: In practice is better to use <c>deletingDirectory</c> for this task.  See documentation for <c>deletingDirectory</c>.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new RecursiveDelete
            (
                @"C:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks.
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were deleted by the directory traversal engine.
            Note: In practice is better to use <c>deletingFile</c> for this task.  See documentation for <c>deletingFile</c>.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveDelete
            (
                @"C:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="deletingFile">
            An optional, pluggable action to perform when a file is about to be deleted.
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were deleted by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveDelete
            (
                @"C:\myFilesAndFolders",
                deletingFile: (file, metadata) =&gt;
                {
                    if (file.Size >= 1024000)
                    {
                        largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="fileDeleted">Optional action to perform after a file is deleted</param>
            <param name="deletingDirectory">
            An optional, pluggable action to perform when a directory is about to be deleted
            <example>
            <para>
            Here's an example that prints out all the subdirectories that were deleted by directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new RecursiveDelete
            (
                @"C:\myFilesAndFolders",
                deletingDirectory: (dir, metadata) =&gt;
                {
                    subdirectories.Add(dir);
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </example>
            </param>
            <param name="directoryDeleted">Optional action to perform after a directory is deleted</param>
            <param name="precludeRootDirectory">Causes the root directory to not be deleted</param>
            <param name="options">Crawler options</param>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryCrawler.RecursiveMove">
            <summary>
            This <c>DirectoryCrawler</c> traverses a directory and moves it and all the files and subfolders inside to 
            the destination path.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryCrawler.RecursiveMove.DestinationRoot">
            <summary>
            The destination counterpart of <c>Root</c>, the directory whose contents and self are to be moved
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryCrawler.RecursiveMove.#ctor(Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath,System.Action{Horseshoe.NET.IO.DirectoryCrawler.DirectoryCrawlEvent,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryCrawler.FileCrawlEvent,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.DirectoryCrawler.FileMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},System.Action{Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryCrawler.DirectoryMetadata{Horseshoe.NET.IO.DirectoryPath}},Horseshoe.NET.IO.DirectoryCrawler.CrawlOptions)">
            <summary>
            Creates a new <c>RecursiveMove</c>
            </summary>
            <param name="sourceRoot">The directory to move, a.k.a. <c>Root</c></param>
            <param name="destinationRoot">The path to which the the directory will be moved</param>
            <param name="directoryCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute directory oriented tasks
            <example>
            <para>
            Here's an example that prints out all the subdirectories that were moved by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var subdirectories = new List&lt;string&gt;();
            new RecursiveMove
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                directoryCrawled: (@event, dir, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case DirectoryCrawlEvent.DirectoryEntered:
                            subdirectories.Add(dir);
                            break;
                    }
                }
            ).Go();
            subdirectories.Sort();
            RenderX.List(subdirectories);
            </code>
            </para>
            </example>
            </param>
            <param name="fileCrawled">
            A an optional, pluggable action that leverages the directory traversal engine to easily and declaratively execute file oriented tasks
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were moved by the directory traversal engine.
            Note: In practice is better to use <c>movingFile</c> for this task.  See documentation for <c>movingFile</c>.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveMove
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                fileCrawled: (@event, file, metadata) =&gt;
                {
                    switch(@event) 
                    {
                        case FileCrawlEvent.FileEncountered:
                            if (file.Size >= 1024000)
                            {
                                largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                            }
                            break;
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="movingFile">
            A an optional, pluggable action to perform when a file is about to be moved.
            <example>
            <para>
            Here's an example that lists all files greater than 1 MB that were moved by the directory traversal engine.
            <code>
            using Horseshoe.NET.ConsoleX;
            using Horseshoe.NET.IO;
            using Horseshoe.NET.IO.DirectoryCrawler;
            
            var largeFiles = new List&lt;string&gt;();
            new RecursiveMove
            (
                @"C:\myFilesAndFolders",
                @"D:\myFilesAndFolders",
                movingFile: (srcFile, destFile, metadata) =&gt;
                {
                    if (file.Size >= 1024000)
                    {
                        largeFiles.Add(file + " (" + FileUtil.GetDisplayFileSize(file.Size) + ")");
                    }
                },
            ).Go();
            largeFiles.Sort();
            RenderX.List(largeFiles);
            </code>
            </para>
            </example>
            </param>
            <param name="fileMoved">Optional action to perform after a file is processed</param>
            <param name="creatingDestinationDirectory">Optional action to perform when a destination directory is about to be created</param>
            <param name="destinationDirectoryCreated">Optional action to perform after a destination directory is created </param>
            <param name="creatingDestinationRootDirectory">Optional action to perform when <c>destinationRoot</c> is about to be created</param>
            <param name="destinationRootDirectoryCreated">Optional action to perform after <c>destinationRoot</c> is created</param>
            <param name="deletingSourceDirectory">Optional action to perform when a source directory is about to be deleted</param>
            <param name="sourceDirectoryDeleted">Optional action to perform after a source directory is deleted</param>
            <param name="deletingSourceRootDirectory">Optional action to perform when <c>sourceRoot</c> is about to be deleted</param>
            <param name="sourceRootDirectoryDeleted">Optional action to perform after <c>sourceRoot</c> is deleted</param>
            <param name="options">Crawl options</param>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.DirectoryFilter">
            <summary>
            The class inherited by all the directory filters in <c>Horseshoe.NET.IO.FileFilter</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.DirectoryFilter.FilterMode">
            <summary>
            Dictates which directories to include based on criteria matching.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilter.IsMatch(Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether the supplied directory constitutes a critea match.
            </summary>
            <param name="dir">a directory path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilter.IsIncluded(Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether the supplied directory path is included by this filter (e.g. if it matches the criteria and <c>FilterMode == Include</c>, etc.).
            </summary>
            <param name="dir">a directory path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilter.Or(Horseshoe.NET.IO.FileFilter.DirectoryFilter[])">
            <summary>
            Creates a directory filter "or" group with the supplied filters and <c>FileFilterMode = FileFilterMode.Include</c>.
            At least one filter must match in order for the group filter to match.
            </summary>
            <param name="filters">A param array list of one or more directory filters.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilter.And(Horseshoe.NET.IO.FileFilter.DirectoryFilter[])">
            <summary>
            Creates a directory filter "and" group with the supplied filters and <c>FileFilterMode = FileFilterMode.Include</c>.  
            All filters must match in order for the group filter to match.
            </summary>
            <param name="filters">A param array list of one or more directory filters.</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FileFilter">
            <summary>
            The class inherited by all the file filters in <c>Horseshoe.NET.IO.FileFilter</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileFilter.FilterMode">
            <summary>
            Dictates which files to include based on criteria matching.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilter.IsMatch(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file constitutes a critea match.
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilter.IsIncluded(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file path is included by this filter (e.g. if it matches the criteria and <c>FilterMode == Include</c>, etc.).
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilter.Or(Horseshoe.NET.IO.FileFilter.FileFilter[])">
            <summary>
            Creates a directory filter "or" group with the supplied filters and <c>FileFilterMode = FileFilterMode.Include</c>.
            At least one filter must match in order for the group filter to match.
            </summary>
            <param name="filters">A param array list of one or more directory filters.</param>
            <returns>A group file filter</returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilter.And(Horseshoe.NET.IO.FileFilter.FileFilter[])">
            <summary>
            Creates a file filter "and" group with the supplied filters and <c>FileFilterMode = FileFilterMode.Include</c>.  
            All filters must match in order for the group filter to match.
            </summary>
            <param name="filters">A param array list of one or more file filters.</param>
            <returns>A group file filter</returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilter.CreateFileExtensionFilter(Microsoft.Extensions.Primitives.StringValues,System.Boolean,Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a file name filter based on file extension search criteria.
            </summary>
            <param name="fileExtensions">e.g. <c>".rtf"</c>, <c>new[] { ".zip", ".tar.gz" }</c>, etc.</param>
            <param name="ignoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the file names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="filterMode">Optional, dictates which items to include based on criteria matching.</param>
            <returns>A group file filter</returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.GroupFilterMode">
            <summary>
            The group filter mode indicates whether to match one or all filter criteria ('or' versus 'and').
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileFilter.GroupFilterMode.Or">
            <summary>
            Match at least one filter criteria to match the entire group filter.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileFilter.GroupFilterMode.And">
            <summary>
            Match all the filters' criteria to match the entire group filter.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FileDateModifiedFilter">
            <summary>
            A <c>FileFilter</c> implementation for filtering based on modified date.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileDateModifiedFilter.MinDate">
            <summary>
            Minimum date.  If omitted, all modified dates than or equal the maximum modified date are a match.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileDateModifiedFilter.MaxDate">
            <summary>
            Maximum date.  If omitted, all modified dates greater than or equal the minimum modified date are a match.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileDateModifiedFilter.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new <c>FileSizeFilter</c>
            </summary>
            <param name="minDate">Minimum date.  If omitted, all modified dates than or equal the maximum modified date are a match.</param>
            <param name="maxDate">Maximum date.  If omitted, all modified dates greater than or equal the minimum modified date are a match.</param>
            <param name="filterMode">Optional, dictates which items to include based on criteria matching.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileDateModifiedFilter.IsMatch(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file constitutes a critea match.
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FileFilterGroup">
            <summary>
            A specialized filter that checks a file against a list of file filters.  Runs either in <c>And</c> or <c>Or</c> mode.  
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileFilterGroup.Mode">
            <summary>
            <c>And</c> or <c>Or</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilterGroup.#ctor(System.Collections.Generic.IEnumerable{Horseshoe.NET.IO.FileFilter.FileFilter},System.Nullable{Horseshoe.NET.IO.FileFilter.GroupFilterMode},Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new file filter group.
            </summary>
            <param name="fileFilters">A collection of one or more file filters.</param>
            <param name="groupFilterMode"><c>And</c> or <c>Or</c></param>
            <param name="filterMode">Optional, dictates which files to include based on criteria matching.</param>
            <exception cref="T:Horseshoe.NET.ValidationException">If no file filters or no group filter mode was supplied.</exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileFilterGroup.IsMatch(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file constitutes a critea match.
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.DirectoryFilterGroup">
            <summary>
            A specialized filter that checks a directory against a list of directory filters.  Runs either in <c>And</c> or <c>Or</c> mode.  
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.DirectoryFilterGroup.Mode">
            <summary>
            <c>And</c> or <c>Or</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilterGroup.#ctor(System.Collections.Generic.IEnumerable{Horseshoe.NET.IO.FileFilter.DirectoryFilter},System.Nullable{Horseshoe.NET.IO.FileFilter.GroupFilterMode},Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new directory filter group.
            </summary>
            <param name="dirFilters">A collection of one or more directory filters.</param>
            <param name="groupFilterMode"><c>And</c> or <c>Or</c></param>
            <param name="filterMode">Optional, dictates which directories to include based on criteria matching.</param>
            <exception cref="T:Horseshoe.NET.ValidationException">If no directory filters or no group filter mode was supplied.</exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryFilterGroup.IsMatch(Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether the supplied directory constitutes a critea match.
            </summary>
            <param name="dir">a directory path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.DirectoryNameFilter">
            <summary>
            A <c>DirectoryFilter</c> implementation based on directory name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.DirectoryNameFilter.Comparator">
            <summary>
            Everything needed to perform a standard comparison bundled into a single class.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryNameFilter.#ctor(Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean,Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new <c>DirectoryNameFilter</c>.
            </summary>
            <param name="mode">Specifies how directory names should match the search value(s) to be included in the results.</param>
            <param name="directoryNameCriteria">
            <para>
            Directory [partial] name(s) upon which to perform the comparison search.
            </para>
            <para>
            Examples of search values (see quotes):
            <code>
            filter = new DirectoryNameFilter(CompareMode.Equals, "Documents");
            filter = new DirectoryNameFilter(CompareMode.EndsWith, "_bak");
            filter = new DirectoryNameFilter(CompareMode.In, new[] { "bin", "obj" });
            filter = new DirectoryNameFilter(CompareMode.Between, new[] { "a", "gzz" });
            </code>
            </para>
            </param>
            <param name="ignoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the directory names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="filterMode">Optional, dictates which items to include based on criteria matching.</param>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.DirectoryNameFilter.IsMatch(Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether the supplied directory name constitutes a criteria match.
            </summary>
            <param name="dir">a directory path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FileSizeFilter">
            <summary>
            A <c>FileFilter</c> implementation for filtering based on file size
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileSizeFilter.MinSize">
            <summary>
            Minimum size.  If omitted, all file sizes less than or equal the maximum file size are a match.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileSizeFilter.MaxSize">
            <summary>
            Maximum size.  If omitted, all file sizes greater than or equal the minimum file size are a match.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileSizeFilter.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64},Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new <c>FileSizeFilter</c>
            </summary>
            <param name="minSize">Minimum size.  If omitted, all file sizes less than or equal the maximum file size are a match.</param>
            <param name="maxSize">Maximum size.  If omitted, all file sizes greater than or equal the minimum file size are a match.</param>
            <param name="filterMode">Optional, dictates which items to include based on criteria matching.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileSizeFilter.IsMatch(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file constitutes a critea match.
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FileNameFilter">
            <summary>
            A <c>FileFilter</c> implementation based on file name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FileFilter.FileNameFilter.Comparator">
            <summary>
            Everything needed to perform a standard comparison bundled into a single class.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileNameFilter.#ctor(Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean,Horseshoe.NET.IO.FileFilter.FilterMode)">
            <summary>
            Creates a new <c>FileNameFilter</c>.
            </summary>
            <param name="mode">Specifies how file names should match the search value(s) to be included in the results.</param>
            <param name="fileNameCriteria">
            <para>
            File [partial] name(s) upon which to perform the comparison search.
            </para>
            <para>
            Examples of search values (see quotes):
            <code>
            filter = new FileNameFilter(TextMatch.Equals, "bill calculator.xls");
            filter = new FileNameFilter(TextMatch.EndsWith, ".bak");
            filter = new FileNameFilter(TextMatch.In, new[] { "readme.md", "readme.txt" });
            filter = new FileNameFilter(TextMatch.Between, new[] { "a", "gzz" });
            </code>
            </para>
            </param>
            <param name="ignoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the file names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="filterMode">Optional, dictates which items to include based on criteria matching.</param>
        </member>
        <member name="M:Horseshoe.NET.IO.FileFilter.FileNameFilter.IsMatch(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether the supplied file name constitutes a criteria match.
            </summary>
            <param name="file">a file path</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileFilter.FilterMode">
            <summary>
            The filter mode dictates which items to include based on criteria matching.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileFilter.FilterMode.Include">
            <summary>
            Items match if criteria is met.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileFilter.FilterMode.IncludeAllExcept">
            <summary>
            Exclude items that match the criteria, include all othere.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.FileSizeUnit">
            <summary>
            Common file size units
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.B">
            <summary>
            Bytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.KB">
            <summary>
            Kilobytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.MB">
            <summary>
            Megabytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.GB">
            <summary>
            Gigabytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.TB">
            <summary>
            Terabytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.PB">
            <summary>
            Pedabytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.EB">
            <summary>
            Exabytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.KiB">
            <summary>
            Kibibytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.MiB">
            <summary>
            Mebibytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.GiB">
            <summary>
            Gibibytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.TiB">
            <summary>
            Tebibytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.PiB">
            <summary>
            Pedibytes
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSizeUnit.EiB">
            <summary>
            Exbibytes
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.DirectoryPath">
            <summary>
            A versatile, code saving, <c>DirectoryInfo</c>-backed directory class with implicit conversion to and from both <c>string</c> and <c>DirectoryInfo</c>. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.Directory">
            <summary>
            The backing <c>DirectoryInfo</c> instance
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.#ctor(System.String)">
            <summary>
            Creates a new <c>DirectoryPath</c>
            </summary>
            <param name="directoryPath">A <c>string</c> path</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a new <c>DirectoryPath</c>
            </summary>
            <param name="directory">A <c>DirectoryInfo</c> instance</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.Name">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Name"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.Parent">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Parent"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Create">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Create"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Create(System.Security.AccessControl.DirectorySecurity)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)"/>  // DirectorySecurity not in .NET Standard 2.0
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Delete">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Delete(System.Boolean)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete(System.Boolean)"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.Exists">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Exists"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.IsEmpty">
            <inheritdoc cref="M:Horseshoe.NET.IO.Extensions.IsEmpty(System.IO.DirectoryInfo)"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.DateModified">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime"/>
        </member>
        <member name="P:Horseshoe.NET.IO.DirectoryPath.DateModifiedUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.ToString">
            <summary>
            Returns the full directory path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.Equals(Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether this <c>DirectoryPath</c> is equal to another.
            </summary>
            <param name="other">Another <c>DirectoryPath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Equality(Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether this <c>DirectoryPath</c> is equal to another.
            </summary>
            <param name="a">A <c>DirectoryPath</c></param>
            <param name="b">Another <c>DirectoryPath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Inequality(Horseshoe.NET.IO.DirectoryPath,Horseshoe.NET.IO.DirectoryPath)">
            <summary>
            Indicates whether this <c>DirectoryPath</c> is not equal to another.
            </summary>
            <param name="a">A <c>DirectoryPath</c></param>
            <param name="b">Another <c>DirectoryPath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Implicit(System.String)~Horseshoe.NET.IO.DirectoryPath">
            <summary>
            Implicitly converts a <c>string</c> to a <c>DirectoryPath</c>
            </summary>
            <param name="directoryPath">A <c>string</c> path</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Implicit(Horseshoe.NET.IO.DirectoryPath)~System.String">
            <summary>
            Implicitly converts a <c>DirectoryPath</c> to a <c>string</c>
            </summary>
            <param name="directoryPath">A <c>DirectoryPath</c></param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Implicit(System.IO.DirectoryInfo)~Horseshoe.NET.IO.DirectoryPath">
            <summary>
            Implicitly converts a <c>DirectoryInfo</c> to a <c>DirectoryPath</c>
            </summary>
            <param name="directory">A <c>DirectoryInfo</c> instance</param>
        </member>
        <member name="M:Horseshoe.NET.IO.DirectoryPath.op_Implicit(Horseshoe.NET.IO.DirectoryPath)~System.IO.DirectoryInfo">
            <summary>
            Implicitly converts a <c>DirectoryPath</c> back to a <c>DirectoryInfo</c>
            </summary>
            <param name="directoryPath">A <c>DirectoryPath</c></param>
        </member>
        <member name="T:Horseshoe.NET.IO.FilePath">
            <summary>
            A versatile, code saving, <c>FileInfo</c>-backed file class with implicit conversion to and from both <c>string</c> and <c>FileInfo</c>.  
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.File">
            <summary>
            The backing <c>FileInfo</c> instance
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.#ctor(System.String)">
            <summary>
            Creates a new <c>FilePath</c>
            </summary>
            <param name="filePath">A <c>string</c> path</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.#ctor(System.IO.FileInfo)">
            <summary>
            Creates a new <c>FilePath</c>
            </summary>
            <param name="file">A <c>FileInfo</c> instance</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Name">
            <inheritdoc cref="P:System.IO.FileInfo.Name"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Parent">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.String)"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Exists">
            <inheritdoc cref="P:System.IO.FileInfo.Exists"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Length">
            <inheritdoc cref="P:System.IO.FileInfo.Length"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.Size">
            <inheritdoc cref="P:System.IO.FileInfo.Length"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.GetDisplaySize(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{Horseshoe.NET.IO.FileSizeUnit},System.Boolean)">
            <summary>
            Formats the file size as a number bytes, kilobytes, etc.
            </summary>
            <param name="minDecimalPlaces">Decimal places for rounding</param>
            <param name="maxDecimalPlaces">Decimal places for rounding</param>
            <param name="addSeparators">Set to <c>true</c> to add separators, such as commas like in culture <c>"en-US"</c></param>
            <param name="unit">The preferred file size unit, e.g. KB, MB, etc.  If not supplied the software will use its best guess.</param>
            <param name="bi">Whether to use kibibytes vs kilobytes, for example, default is <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.DateModified">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime"/>
        </member>
        <member name="P:Horseshoe.NET.IO.FilePath.DateModifiedUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.MoveTo(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.CopyTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.CopyTo(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Open(System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.OpenRead">
            <inheritdoc cref="M:System.IO.FileInfo.OpenRead"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.OpenText">
            <inheritdoc cref="M:System.IO.FileInfo.OpenText"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ReadAllBytes">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ReadAllText">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ReadAllText(System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ReadAllLines">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ReadAllLines(System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.OpenWrite">
            <inheritdoc cref="M:System.IO.FileInfo.OpenWrite"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllLines(System.String[])">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[])"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllLines(System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.WriteAllBytes(System.Byte[])">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Delete">
            <inheritdoc cref="M:System.IO.FileInfo.Delete"/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.ToString">
            <summary>
            Returns the full file path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.Equals(Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether this <c>FilePath</c> is equal to another.
            </summary>
            <param name="other">another <c>FilePath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Equality(Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether this <c>FilePath</c> is equal to another.
            </summary>
            <param name="a">A <c>FilePath</c></param>
            <param name="b">Another <c>FilePath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Inequality(Horseshoe.NET.IO.FilePath,Horseshoe.NET.IO.FilePath)">
            <summary>
            Indicates whether this <c>FilePath</c> is not equal to another.
            </summary>
            <param name="a">A <c>FilePath</c></param>
            <param name="b">Another <c>FilePath</c></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Implicit(System.String)~Horseshoe.NET.IO.FilePath">
            <summary>
            Implicitly converts a <c>string</c> to a <c>FilePath</c>
            </summary>
            <param name="filePath">A <c>string</c> path</param>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Implicit(Horseshoe.NET.IO.FilePath)~System.String">
            <summary>
            Implicitly converts a <c>FilePath</c> to a <c>string</c>
            </summary>
            <param name="filePath">A <c>FilePath</c></param>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Implicit(System.IO.FileInfo)~Horseshoe.NET.IO.FilePath">
            <summary>
            Implicitly converts a <c>FileInfo</c> to a <c>FilePath</c>
            </summary>
            <param name="file">A <c>FileInfo</c> instance</param>
        </member>
        <member name="M:Horseshoe.NET.IO.FilePath.op_Implicit(Horseshoe.NET.IO.FilePath)~System.IO.FileInfo">
            <summary>
            Implicitly converts a <c>FilePath</c> back to a <c>FileInfo</c>
            </summary>
            <param name="filePath">A <c>FilePath</c></param>
        </member>
        <member name="T:Horseshoe.NET.IO.FileSize">
            <summary>
            Set of values and utility methods for interpreting and displaying file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.KB">
            <summary>
            Multiplier for kilobytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.MB">
            <summary>
            Multiplier for megabytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.GB">
            <summary>
            Multiplier for gigabytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.TB">
            <summary>
            Multiplier for terabytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.PB">
            <summary>
            Multiplier for pedabytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.EB">
            <summary>
            Multiplier for exabytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.KiB">
            <summary>
            Multiplier for kibibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.MiB">
            <summary>
            Multiplier for mebibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.GiB">
            <summary>
            Multiplier for gibibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.TiB">
            <summary>
            Multiplier for tebibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.PiB">
            <summary>
            Multiplier for pebibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileSize.EiB">
            <summary>
            Multiplier for exbibytes, used in calculating unit-based file sizes.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileSize.DeriveUnit(System.Int64,System.Boolean)">
            <summary>
            Detects the best size unit to go with in the formatting operation.
            </summary>
            <param name="size"></param>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.Extensions">
            <summary>
            Extension methods for IO such as streams, files and directories
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.Extensions.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Tests whether a directory is devoid of any subdirectories and files
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.Extensions.ReadAllBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads an entire stream iteratively and returns its contents as a <c>byte[]</c>.
            </summary>
            <param name="inputStream">A stream.</param>
            <param name="bufferSize">The number of bytes read in each iteration, default is <c>1024</c>.  This might have performance implications.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.Extensions.ReadAllBytesAsync(System.IO.Stream,System.Int32)">
            <summary>
            Reads an entire stream iteratively and returns its contents as a <c>byte[]</c>.
            </summary>
            <param name="inputStream">A stream.</param>
            <param name="bufferSize">The number of bytes read in each iteration, default is <c>1024</c>.  This might have performance implications.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.Extensions.IsBi(Horseshoe.NET.IO.FileSizeUnit)">
            <summary>
            Tests if a file size unit is a binary file size unit, e.g. KiB (kibibytes), MiB (mebibytes), etc.
            </summary>
            <param name="unit">A file size unit</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.Extensions.ToMultiplier(Horseshoe.NET.IO.FileSizeUnit)">
            <summary>
            Returns the multiplier associated with the file size unit; e.g. KiB -> 1024, MB -> 1000000, etc.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.FileType">
            <summary>
            A nonexhaustive list of common file extensions
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.AAC">
            <summary>
            AAC
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.ACCDB">
            <summary>
            ACCDB
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.AVI">
            <summary>
            AVI
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.BAK">
            <summary>
            BAK
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.BMP">
            <summary>
            BMP
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.CSHTML">
            <summary>
            CSHTML
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.CSS">
            <summary>
            CSS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.CSV">
            <summary>
            CSV
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.DLL">
            <summary>
            DLL
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.DOC">
            <summary>
            DOC
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.DOCX">
            <summary>
            DOCX
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.DMG">
            <summary>
            DMG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.EXE">
            <summary>
            EXE
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.GZ">
            <summary>
            GZ
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.HTM">
            <summary>
            HTM
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.ICO">
            <summary>
            ICO
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.ISO">
            <summary>
            ISO
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.JAR">
            <summary>
            JAR
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.JPG">
            <summary>
            JPG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.JPEG">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.JS">
            <summary>
            JS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.JSON">
            <summary>
            JSON
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.LESS">
            <summary>
            LESS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MAP">
            <summary>
            MAP
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.M4A">
            <summary>
            M4A
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.M4V">
            <summary>
            M4V
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MD">
            <summary>
            MD
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MDB">
            <summary>
            MDB
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MP3">
            <summary>
            MP3
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MP4">
            <summary>
            MP4
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MPG">
            <summary>
            MPG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MPEG">
            <summary>
            MPEG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.MSI">
            <summary>
            MSI
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.ORA">
            <summary>
            ORA
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.PDF">
            <summary>
            PDF
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.PNG">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.PPT">
            <summary>
            PPT
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.PPTX">
            <summary>
            PPTX
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.PUB">
            <summary>
            PUB
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.RTF">
            <summary>
            RTF
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.SQL">
            <summary>
            SQL
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.TAR">
            <summary>
            TAR
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.TIF">
            <summary>
            TIF
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.TIFF">
            <summary>
            TIFF
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.TS">
            <summary>
            TS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.TXT">
            <summary>
            TXT
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.VBHTML">
            <summary>
            VBHTML
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.XLS">
            <summary>
            XLS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.XLSX">
            <summary>
            XLSX
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.XML">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.XPS">
            <summary>
            XPS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.IO.FileType.ZIP">
            <summary>
            ZIP
            </summary>
        </member>
        <member name="T:Horseshoe.NET.IO.FileUtil">
            <summary>
            Utility methods for files and directories
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.FileUtil.AppendExtension(System.String,Horseshoe.NET.IO.FileType,System.Boolean)">
            <summary>
            Appends an extension to a file name
            </summary>
            <param name="fileName">A file name</param>
            <param name="extension">A common file type extension</param>
            <param name="preferUpperCase">Optional, set to <c>true</c> to append the extension in upper case, default is <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileUtil.AppendExtension(System.String,System.String)">
            <summary>
            Appends an extension to a file name
            </summary>
            <param name="fileName">A file name</param>
            <param name="extension">An extension</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileUtil.GetDisplayFileSize(Horseshoe.NET.IO.FilePath,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{Horseshoe.NET.IO.FileSizeUnit},System.Boolean)">
            <summary>
            Formats a file size as a number of bytes, kilobytes, etc.
            </summary>
            <param name="file">A file</param>
            <param name="minDecimalPlaces">Decimal places for rounding</param>
            <param name="maxDecimalPlaces">Decimal places for rounding</param>
            <param name="addSeparators">Set to <c>true</c> to add separators, such as commas like in culture <c>"en-US"</c></param>
            <param name="unit">The preferred file size unit, e.g. KB, MB, etc.  If not supplied the software will use its best guess.</param>
            <param name="bi">Whether to use kibibytes vs kilobytes, for example, default is <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.IO.FileUtil.GetDisplayFileSize(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{Horseshoe.NET.IO.FileSizeUnit},System.Boolean)">
            <summary>
            Formats a file size as a number of bytes, kilobytes, etc.
            </summary>
            <param name="size">A <c>long</c> representing the size of a file</param>
            <param name="minDecimalPlaces">Decimal places for rounding</param>
            <param name="maxDecimalPlaces">Decimal places for rounding</param>
            <param name="addSeparators">Set to <c>true</c> to add separators, such as commas like in culture <c>"en-US"</c></param>
            <param name="unit">The preferred file size unit, e.g. KB, MB, etc.  If not supplied the software will use its best guess.</param>
            <param name="bi">Whether to use kibibytes vs kilobytes, for example, default is <c>false</c>.</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.IO.FileUtil.NormalizePath(System.String)">
            <summary>
            Ensures paths end with path separator - internal method
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.IO.NamedMemoryStream">
            <summary>
            Just a memory stream with a name, useful for associating with files
            </summary>
        </member>
        <member name="P:Horseshoe.NET.IO.NamedMemoryStream.Name">
            <summary>
            A name, such as a file name.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.IO.NamedMemoryStream.#ctor(System.String)">
            <summary>
            Creates a new <c>NamedMemoryStream</c>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Horseshoe.NET.Iterator.ExitIterationException">
            <summary>
            A specialized exception to be thrown by the consumer by calling <c>ci.Exit()</c> to end the iteration.  
            This exception is caught by the system, the definition of a benign exception.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Iterator.Memory.Extensions">
            <summary>
            Extension methods for memory efficient iterators over <c>ReadOnlySpan</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Iterator.Memory.Extensions.Iterate``1(System.ReadOnlySpan{``0},System.Action{``0,Horseshoe.NET.Iterator.IteratorMetadata})">
            <summary>
            Iterates over a <c>ReadOnlySpan</c>. <c>ControlInterface ci</c> contains properties and methods for interacting with the iterator.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="span">A <c>ReadOnlySpan</c></param>
            <param name="action">Action to perform on each iteration</param>
        </member>
        <member name="M:Horseshoe.NET.Iterator.Memory.Extensions.ReverseIterate``1(System.ReadOnlySpan{``0},System.Action{``0,Horseshoe.NET.Iterator.IteratorMetadata})">
            <summary>
            Iterates backwards over a span. <c>ControlInterface ci</c> contains properties and methods for interacting with the iterator.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="span">A span</param>
            <param name="action">Action to perform on each iteration</param>
        </member>
        <member name="T:Horseshoe.NET.Iterator.Extensions">
            <summary>
            Extension methods for iterators over collections
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Iterator.Extensions.Iterate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,Horseshoe.NET.Iterator.IteratorMetadata})">
            <summary>
            Iterates over a collection. <c>ControlInterface ci</c> contains properties and methods for interacting with the iterator.
            controls for breaking and continuing.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="collection">A collection</param>
            <param name="action">Action to perform on each iteration</param>
        </member>
        <member name="M:Horseshoe.NET.Iterator.Extensions.ReverseIterate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,Horseshoe.NET.Iterator.IteratorMetadata})">
            <summary>
            Iterates backwards over a collection. <c>ControlInterface ci</c> contains properties and methods for interacting with the iterator.
            controls for breaking and continuing.
            </summary>
            <typeparam name="T">Type of items</typeparam>
            <param name="collection">A collection</param>
            <param name="action">Action to perform on each iteration</param>
        </member>
        <member name="T:Horseshoe.NET.Iterator.ContinueNextException">
            <summary>
            A specialized exception to be thrown by the consumer by calling <c>ci.Next()</c> to skip to the next loop iteration.  
            This exception is caught by the system, the definition of a benign exception.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Iterator.IteratorMetadata">
            <summary>
            The interactive <c>Iterator</c> control interface and information provider.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Iterator.IteratorMetadata.Count">
            <summary>
            Provides the total count of the collection or span being iterated.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Iterator.IteratorMetadata.Index">
            <summary>
            Provides the index of the current iterated item.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Iterator.IteratorMetadata.Exit">
            <summary>
            Terminate the iteration.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Iterator.IteratorMetadata.Next">
            <summary>
            Jump to next item in the collection or span.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.TypeNotFoundException">
            <summary>
            A specialized exception for errors in object property mapping
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeNotFoundException.#ctor">
            <summary>
            Creates a new <c>TypeNotFoundException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new <c>TypeNotFoundException</c>
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>TypeNotFoundException</c>
            </summary>
            <param name="message">A message</param>
            <param name="innerException">An inner exception</param>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.PropertyValue">
            <summary>
            Represents an object's property, value included
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.PropertyValue.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new <c>PropertyValue</c>
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.PropertyValue`1">
            <summary>
            Represents an object's property, value included
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Horseshoe.NET.ObjectsAndTypes.PropertyValue`1.Property">
            <summary>
            Property info
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ObjectsAndTypes.PropertyValue`1.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.PropertyValue`1.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Creates a new <c>PropertyValue</c>
            </summary>
            <param name="property">A property</param>
            <param name="value">A property value</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.PropertyValue`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.TypeUtil">
            <summary>
            A suite of utility methods for types
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetKindOfType(System.Type)">
            <summary>
            Gets a text description of the kind of the supplied type (e.g. "[interface]", "[enum]", etc.)
            </summary>
            <param name="type">A type</param>
            <returns>The description of the type</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.AssertIsReferenceType(System.Type,System.String)">
            <summary>
            Asserts that the supplied type is a reference type
            </summary>
            <param name="type">A type</param>
            <param name="errorMessage">An optional error message</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.AssertIsReferenceType``1(System.String)">
            <summary>
            Asserts that <c>T</c> is a reference type
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="errorMessage">An optional error message</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.AssertIsValueType(System.Type,System.String)">
            <summary>
            Asserts that the supplied type is a value type
            </summary>
            <param name="type">A type</param>
            <param name="errorMessage">An optional error message</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.AssertIsValueType``1(System.String)">
            <summary>
            Asserts that <c>T</c> is a value type
            </summary>
            <typeparam name="T">A value type</typeparam>
            <param name="errorMessage">An optional error message</param>
            <exception cref="T:Horseshoe.NET.AssertionFailedException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetType(System.String,System.String,System.Boolean)">
            <summary>
            Finds the runtime type respresented by the fully qualified class name
            </summary>
            <param name="className">The class name</param>
            <param name="assemblyName">The assembly name</param>
            <param name="ignoreCase">If <c>true</c>, allows searching assemblies/types that are identically named if not for the letter case, default is <c>false</c>.</param>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.TypeNotFoundException"/>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstanceProperties(System.Type)">
            <summary>
            Gets the public instance properties of <c>type</c>
            </summary>
            <param name="type">A reference type</param>
            <returns>A property array</returns>
            <exception cref="T:Horseshoe.NET.AssertionFailedException">If <c>type</c> is not a reference type</exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstanceProperties``1">
            <summary>
            Gets the public instance properties of <c>T</c>
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <returns>A property array</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstanceProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the public instance property of <c>type</c> whose name matches <c>propertyName</c>.
            <para>
            If exactly one property with the supplied name is not found then an exception is raised.
            </para>
            </summary>
            <param name="type">A reference type</param>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property</returns>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstanceProperty``1(System.String,System.Boolean)">
            <summary>
            Gets the public instance property of <c>T</c> whose name matches <c>propertyName</c>
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property</returns>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticProperties(System.Type)">
            <summary>
            Gets the public static properties of <c>type</c>
            </summary>
            <param name="type">A reference type</param>
            <returns>A property array</returns>
            <exception cref="T:Horseshoe.NET.AssertionFailedException">If <c>type</c> is not a reference type</exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticProperties``1">
            <summary>
            Gets the public static properties of <c>T</c>
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <returns>A property array</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the public static property of <c>type</c> whose name matches <c>propertyName</c>
            </summary>
            <param name="type">A reference type</param>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property</returns>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticProperty``1(System.String,System.Boolean)">
            <summary>
            Gets the public static property of <c>T</c> whose name matches <c>propertyName</c>
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property</returns>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticPropertyValues(System.Type,System.Type,System.Boolean,Horseshoe.NET.Compare.CompareMode,System.String,System.Boolean,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets the public static properties of <c>type</c>, values included
            </summary>
            <param name="type">A reference type</param>
            <param name="propertyTypeFilter">Optional. A C# type to compare against property types, this includes subtypes if <c>strictPropertyTypeFilter == false</c>.  All other properties are filtered out.</param>
            <param name="strictPropertyTypeFilter">Optional. If <c>propertyTypeFilter</c> is supplied, this parameter indicates whether to exclude subtypes, default is <c>false</c>.</param>
            <param name="propertyNameCompareMode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="propertyNameCriteria">Optional. The property name criteria search value(s) if filtering on property name.</param>
            <param name="propertyNameIgnoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the property names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="propertyFilter"></param>
            <returns>A property value array</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticPropertyValues``1(System.Type,System.Boolean,Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets the public static properties of <c>type</c>, values included
            </summary>
            <typeparam name="T">A referemce type</typeparam>
            <param name="propertyTypeFilter">Optional. A C# type to compare against property types, this includes subtypes if <c>strictPropertyTypeFilter == false</c>.  All other properties are filtered out.</param>
            <param name="strictPropertyTypeFilter">Optional. If <c>propertyTypeFilter</c> is supplied, this parameter indicates whether to exclude subtypes, default is <c>false</c>.</param>
            <param name="propertyNameCompareMode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="propertyNameCriteria">Optional. The property name criteria search value(s) if filtering on property name.</param>
            <param name="propertyNameIgnoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the property names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="propertyFilter"></param>
            <returns>A property value array</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetStaticPropertyValue(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the public static property of <c>type</c> whose name matches <c>propertyName</c>, value included
            </summary>
            <param name="type">A reference type</param>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property value</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.SetStaticPropertyValue(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of the indicated static property
            </summary>
            <param name="type">A reference type</param>
            <param name="propertyName">The property name</param>
            <param name="newValue">An <c>object</c></param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.SetStaticPropertyValue``1(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of the indicated static property
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="propertyName">The property name</param>
            <param name="newValue">An <c>object</c></param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstance(System.Type,System.Object[],System.Boolean)">
            <summary>
            Dynamically creates an instance of the supplied type
            </summary>
            <param name="type">A reference type</param>
            <param name="args">Constructor args, optional for types with a no-arg constructor</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>A dynamically created instance of the supplied type</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetInstance(System.String,System.String,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Dynamically creates an instance of the class represented by the supplied class name.
            </summary>
            <param name="className">A fully qualified class name to instantiate</param>
            <param name="assemblyName">An assembly name from which to draw types</param>
            <param name="args">constructor args</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <param name="strict">If a <c>Type</c> matching the supplied name cannot be found then <c>strict == true</c> causes an exception to be thrown, default is <c>false</c>.</param>
            <returns>A dynamically created instance of the supplied type</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetDefaultInstance``1(System.Boolean)">
            <summary>
            Dynamically creates an instance of the supplied type using the default constructor, if one does not exist this method throws an exception
            </summary>
            <typeparam name="T">A type (the return type)</typeparam>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>A dynamically created instance of the supplied type parameter</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetDefaultInstance(System.Type,System.Boolean)">
            <summary>
            Dynamically creates an instance of the supplied type using the default constructor, if one does not exist this method throws an exception
            </summary>
            <param name="type">A reference type.</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>A dynamically created instance of the supplied type parameter</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetDefaultValue``1(System.Boolean)">
            <summary>
            Gets the default value of the supplied type, e.g. <c>null</c> for reference types.  
            <para>
            Similar to <c>default(T)</c>.
            </para>
            </summary>
            <typeparam name="T">A type.</typeparam>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>A default value such as <c>null</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.TypeUtil.GetDefaultValue(System.Type,System.Boolean)">
            <summary>
            Gets the default value of the supplied type, e.g. <c>null</c> for reference and nullable types.  
            <para>
            Similar to <c>default(T)</c>.
            </para>
            </summary>
            <param name="type">A runtime type.</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>A default value such as <c>null</c>.</returns>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.Extensions">
            <summary>
            A set of extension methods for objects and types.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.MapProperties(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the properties of <c>dest</c> with the property values of <c>src</c>
            </summary>
            <param name="src">The source <c>object</c></param>
            <param name="dest">The target <c>object</c></param>
            <param name="tryMapAll"></param>
            <param name="preventNullOverwrite">If <c>true</c>, prevents a non-null destination property from being overwritten by null, default is <c>false</c> and this is not commonly used.</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <param name="ignoreErrors">If <c>true</c>, bypasses mapping errors leaving the values unchanged, default is <c>false</c>.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.Duplicate(System.Object,System.Boolean)">
            <summary>
            Creates a shallow duplicate of an <c>object</c>
            </summary>
            <param name="src">The source <c>object</c></param>
            <param name="ignoreErrors">If <c>true</c>, bypasses mapping errors leaving the values unchanged, default is <c>false</c>.</param>
            <returns>A new <c>object</c> identical to <c>src</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.OfPropertyType(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Type,System.Boolean)">
            <summary>
            Filters a collection of properties by type
            </summary>
            <param name="properties">A collection of properties</param>
            <param name="type">The type of property to include in the results</param>
            <param name="strictType">If <c>true</c>, only exact type matches are included, default is <c>false</c> which also allows inherited types</param>
            <returns>A filtered property collection</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.OfPropertyType``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Boolean)">
            <summary>
            Filters a collection of properties by type
            </summary>
            <typeparam name="T">A type</typeparam>
            <param name="properties">A collection of properties</param>
            <param name="strictType">If <c>true</c>, only exact type matches are included, default is <c>false</c> which also allows inherited types</param>
            <returns>A filtered property collection</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.NamedLike(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean)">
            <summary>
            Filters a collection of properties by name.
            </summary>
            <param name="properties">A collection of properties</param>
            <param name="mode">The search text matching strategy i.e. <c>Contains</c>, <c>StartsWith</c>, <c>EndsWith</c> or <c>Equals</c></param>
            <param name="propertyNameSearchValues">The full or partial property name to search for</param>
            <param name="ignoreCase">If <c>true</c>, filter will include properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A filtered property collection</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.IsNullable(System.Type)">
            <summary>
            Tests whether this type is a nullable value type.
            </summary>
            <param name="type">A runtime type.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.Extensions.IsNumeric(System.Type,System.Boolean)">
            <summary>
            Tests whether this type is a numeric value type.
            </summary>
            <param name="type">A runtime type.</param>
            <param name="includeChar">If <c>true</c>, <c>System.Char</c> will be considered numeric, default is <c>false</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException">
            <summary>
            A specialized exception for errors in object property mapping
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="mem"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.Reflection.MemberInfo,System.Exception)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="mem"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.Reflection.MemberInfo,System.String)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="mem"></param>
            <param name="message"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException.#ctor(System.Type,System.Type,System.Reflection.MemberInfo,System.String,System.Exception)">
            <summary>
            Creates a new <c>ObjectMappingException</c>
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="mem"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException">
            <summary>
            A specialized exception for errors in object property mapping
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.String)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="message">A message</param>
            <param name="innerException">An inner exception</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="type">A reference type</param>
            <param name="mem"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.Type,System.Reflection.MemberInfo,System.Exception)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="type">A reference type</param>
            <param name="mem"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.Type,System.Reflection.MemberInfo,System.String)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="type">A reference type</param>
            <param name="mem"></param>
            <param name="message"></param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectMemberException.#ctor(System.Type,System.Reflection.MemberInfo,System.String,System.Exception)">
            <summary>
            Creates a new <c>ObjectMemberException</c>
            </summary>
            <param name="type">A reference type</param>
            <param name="mem"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Horseshoe.NET.ObjectsAndTypes.ObjectUtil">
            <summary>
            A suite of utility methods for object handling, reflection and manipulation.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.IsNull(System.Object)">
            <summary>
            Reports whether an object is <c>null</c> (including <c>DBNull</c>)
            </summary>
            <param name="obj"></param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.MapProperties(System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the properties of <c>dest</c> with the property values of <c>src</c>
            </summary>
            <param name="src">The source <c>object</c></param>
            <param name="dest">The target <c>object</c></param>
            <param name="tryMapAll"></param>
            <param name="preventNullOverwrite">If <c>true</c>, prevents a non-null destination property from being overwritten by null, default is <c>false</c> and this is not commonly used.</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <param name="ignoreErrors">If <c>true</c>, bypasses mapping errors leaving the values unchanged, default is <c>false</c>.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
            <exception cref="T:Horseshoe.NET.ObjectsAndTypes.ObjectMappingException"></exception>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.Duplicate(System.Object,System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Creates a shallow duplicate of an <c>object</c>
            </summary>
            <param name="src">The source <c>object</c></param>
            <param name="args">Constructor args, optional for types with a no-arg constructor</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <param name="ignoreErrors">If <c>true</c>, bypasses mapping errors leaving the values unchanged, default is <c>false</c>.</param>
            <returns>A new <c>object</c> identical to <c>src</c></returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.GetInstancePropertyValues(System.Object,System.Type,System.Boolean,Horseshoe.NET.Compare.CompareMode,Microsoft.Extensions.Primitives.StringValues,System.Boolean,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Gets the public instance properties of <c>instance</c>, values included
            </summary>
            <param name="instance">An <c>object</c></param>
            <param name="propertyTypeFilter">Optional. A C# type to compare against property types, this includes subtypes if <c>strictPropertyTypeFilter == false</c>.  All other properties are filtered out.</param>
            <param name="strictPropertyTypeFilter">Optional. If <c>propertyTypeFilter</c> is supplied, this parameter indicates whether to exclude subtypes, default is <c>false</c>.</param>
            <param name="propertyNameCompareMode">The compare mode, e.g. Equals, Contains, Between, etc.</param>
            <param name="propertyNameCriteria">Optional. The property name criteria search value(s) if filtering on property name.</param>
            <param name="propertyNameIgnoreCase">
            <para>
            Set to <c>true</c> (recommended) to ignore the letter case of the property names being compared by this filter, default is <c>false</c>.
            </para>
            <para>
            While operating systems like Windows are not case-sensitive, others are.  So are <c>string</c>s in practically every programming
            language.  As such, Horseshoe.NET requires opt-in for case-insensitivity, i.e. setting this parameter to <c>true</c>.
            </para>
            </param>
            <param name="propertyFilter"></param>
            <returns>A property value array</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.GetInstancePropertyValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the public instance property of <c>instance</c> whose name matches <c>propertyName</c>, value included
            </summary>
            <param name="instance">An <c>object</c></param>
            <param name="propertyName">The property name</param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property value</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.SetInstancePropertyValue(System.Object,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the value of the indicated instance property
            </summary>
            <param name="instance">An <c>object</c> whose property to set</param>
            <param name="propertyName">The property name</param>
            <param name="newValue">An <c>object</c></param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <param name="strict">If a property matching the supplied name does not exist then <c>strict == true</c> causes an exception to be thrown, default is <c>false</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.GetNestedInstancePropertyValue(System.Object,System.String,System.Boolean)">
            <summary>
            Experimental.  Gets the value of a nested property, identified in dot (.) notation, for example: <c>"myProperty.someValue"</c> which would reference <c>myInstance.myProperty.someValue</c>.
            </summary>
            <param name="instance">An <c>object</c></param>
            <param name="fullName">The full nested property name, e.g. <c>"myProperty.someValue"</c></param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property value</returns>
        </member>
        <member name="M:Horseshoe.NET.ObjectsAndTypes.ObjectUtil.GetNestedInstancePropertyValue``1(System.Object,System.String,System.Boolean)">
            <summary>
            Experimental.  Gets the value of a nested property, identified in dot (.) notation, for example: <c>"myProperty.someValue"</c> which would reference <c>myInstance.myProperty.someValue</c>.
            </summary>
            <typeparam name="T">A reference type</typeparam>
            <param name="instance">An <c>object</c></param>
            <param name="fullName">The full nested property name, e.g. <c>"myProperty.someValue"</c></param>
            <param name="ignoreCase">If <c>true</c>, allows mapping of properties that are identically named if not for the letter case, default is <c>false</c>.</param>
            <returns>A property value</returns>
        </member>
        <member name="T:Horseshoe.NET.ReconstitutedException">
            <summary>
            A specialized exception for rehydrating instances of <c>ExceptionInfo</c> that may come in HTTP responses.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ExceptionInfo">
            <summary>
            A basic <c>Exception</c> descriptor class suitable for JSON serialization
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.FullType">
            <summary>
            The fully qualified class name of the original exception
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.Type">
            <summary>
            The class name of the original exception
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.Message">
            <summary>
            The message copied over from the original exception
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.StackTrace">
            <summary>
            The stack trace copied over from the original exception
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.InnerException">
            <summary>
            Inner exception(s) (in the form of ExceptionInfo) copied over from the original exception 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.DateTime">
            <summary>
            When the exception occurred (approx.) or, more specifically, when this instance of <c>ExceptionInfo</c> was created from <c>Exception</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ExceptionInfo.MachineName">
            <summary>
            Where the exception occurred, e.g. remote web server
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.#ctor">
            <summary>
            Creates a new <c>ExceptionInfo</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fullType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.#ctor(System.String,System.String,System.String,Horseshoe.NET.ExceptionInfo)">
            <summary>
            
            </summary>
            <param name="fullType"></param>
            <param name="message"></param>
            <param name="stackTrace"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.From(System.Exception)">
            <summary>
            Creates a recursive instance of <c>ExceptionInfo</c> from an exception and all of its inner exceptions
            </summary>
            <param name="ex">And exception</param>
            <returns>An <c>ExceptionInfo</c> instance</returns>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.ToException">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.ThrowReconstituted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ExceptionInfo.op_Implicit(System.Exception)~Horseshoe.NET.ExceptionInfo">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Horseshoe.NET.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Extensions.GetDisplayName(System.Reflection.Assembly,System.Int32)">
            <summary>
            Display an assembly name and version
            </summary>
            <param name="assembly">An assembly</param>
            <param name="minDepth">A value between 1 and 4 determining how many 0's to display</param>
            <returns>Display name</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.GetDisplayName(System.Reflection.AssemblyName,System.Int32)">
            <summary>
            Display an assembly name and version
            </summary>
            <param name="assemblyName">An assembly name</param>
            <param name="minDepth">A value between 1 and 4 determining how many 0's to display</param>
            <returns>Display name</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.GetDisplayVersion(System.Reflection.Assembly,System.Int32)">
            <summary>
            Display an assembly version
            </summary>
            <param name="assembly">An assembly</param>
            <param name="minDepth">A value between 1 and 4 determining how many 0's to display</param>
            <returns>Display version</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.GetDisplayVersion(System.Reflection.AssemblyName,System.Int32)">
            <summary>
            Display an assembly version
            </summary>
            <param name="assemblyName">An assembly name</param>
            <param name="minDepth">A value between 1 and 4 determining how many 0's to display</param>
            <returns>Display version</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.Display(System.Version,System.Int32)">
            <summary>
            Display an assembly version
            </summary>
            <param name="version">An assembly version</param>
            <param name="minDepth">A value between 1 and 4 determining how many 0's to display</param>
            <returns>Display version</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.Render(System.Exception,Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Prepares an exception for viewing in a console or other text field (e.g. &lt;textarea&gt;, &lt;pre&gt;, etc.)
            </summary>
            <param name="exception">An exception.</param>
            <param name="typeRendering">If <c>true</c> use the fully qualified type name (default is <c>false</c>).</param>
            <param name="includeDateTime">If <c>true</c> renders the approximate date and time the source exception was raised (default is <c>false</c>).</param>
            <param name="includeMachineName">If <c>true</c> renders the machine name where the exception probably occurred (default is <c>false</c>).</param>
            <param name="includeStackTrace">If <c>true</c> renders the stack trace (default is <c>false</c>).</param>
            <param name="indent">Number of spaces to indent detail lines in the output.</param>
            <param name="recursive">If <c>true</c> renders inner exceptions (default is <c>false</c>).</param>
            <returns>Console-formatted exception dump</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.Render(Horseshoe.NET.ExceptionInfo,Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Prepares an exception for viewing in a console or other text field (e.g. &lt;textarea&gt;, &lt;pre&gt;, etc.).
            </summary>
            <param name="exceptionInfo">An exception info.</param>
            <param name="typeRendering">If <c>Fqn</c> (default) display the fully qualified type name.</param>
            <param name="includeDateTime">If <c>true</c> renders the approximate date and time the source exception was raised (default is <c>false</c>).</param>
            <param name="includeMachineName">If <c>true</c> renders the machine name where the exception probably occurred (default is <c>false</c>).</param>
            <param name="includeStackTrace">If <c>true</c> renders the stack trace (default is <c>false</c>).</param>
            <param name="indent">Number of spaces to indent detail lines in the output.</param>
            <param name="recursive">If <c>true</c> renders inner exceptions (default is <c>false</c>).</param>
            <returns>Console-formatted exception dump.</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.RenderMessage(System.Exception,Horseshoe.NET.ExceptionTypeRenderingPolicy)">
            <summary>
            Prepares an exception for viewing in a console or other text field (e.g. &lt;textarea&gt;, &lt;pre&gt;, etc.)
            </summary>
            <param name="exception">An exception.</param>
            <param name="typeRendering">If <c>Fqn</c> (default) display the fully qualified type name.</param>
            <returns>Console-formatted exception dump.</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.RenderMessage(Horseshoe.NET.ExceptionInfo,Horseshoe.NET.ExceptionTypeRenderingPolicy)">
            <summary>
            Prepares an exception for viewing in a console or other text field (e.g. &lt;textarea&gt;, &lt;pre&gt;, etc.)
            </summary>
            <param name="exceptionInfo">An exception</param>
            <param name="typeRendering">If <c>Fqn</c> (default) display the fully qualified type name</param>
            <returns>Console-formatted exception dump</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.RenderHtml(System.Exception,Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Prepares an exception for viewing in a web browser
            </summary>
            <param name="exception">An exception</param>
            <param name="typeRendering">If <c>Fqn</c> (default) display the fully qualified type name</param>
            <param name="includeDateTime">If <c>true</c> renders the approximate date and time the source exception was raised (default is <c>false</c>).</param>
            <param name="includeMachineName">If <c>true</c> renders the machine name where the exception probably occurred (default is <c>false</c>).</param>
            <param name="includeStackTrace">If <c>true</c> renders the stack trace (default is <c>false</c>)</param>
            <param name="indent">Number of spaces to indent detail lines in the output</param>
            <param name="recursive">If <c>true</c> renders inner exceptions (default is <c>false</c>)</param>
            <returns>HTML-formatted exception dump</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.RenderHtml(Horseshoe.NET.ExceptionInfo,Horseshoe.NET.ExceptionTypeRenderingPolicy,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Prepares an exception for viewing in a web browser
            </summary>
            <param name="exceptionInfo">An exception</param>
            <param name="typeRendering">If <c>Fqn</c> (default) display the fully qualified type name</param>
            <param name="includeDateTime">If <c>true</c> renders the approximate date and time the source exception was raised (default is <c>false</c>).</param>
            <param name="includeMachineName">If <c>true</c> renders the machine name where the exception probably occurred (default is <c>false</c>).</param>
            <param name="includeStackTrace">If <c>true</c> renders the stack trace (default is <c>false</c>)</param>
            <param name="indent">Number of spaces to indent detail lines in the output</param>
            <param name="recursive">If <c>true</c> renders inner exceptions (default is <c>false</c>)</param>
            <returns>HTML-formatted exception dump</returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Byte},System.Byte@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Int16},System.Int16@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Int32},System.Int32@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Int64},System.Int64@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Single},System.Single@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Double},System.Double@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Decimal},System.Decimal@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.DateTime},System.DateTime@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Extensions.TryHasValue(System.Nullable{System.Boolean},System.Boolean@)">
            <summary>
            
            </summary>
            <param name="inValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Email.Sms.Carrier">
            <summary>
            Known mobile carriers with email-to-SMS text messaging
            </summary>
            <remarks>
            Sources: 
            <para>
            <a href="http://acme.highpoint.edu/~msetzler/IntroPSC/introReads/hacknmod.com%20-%20email-to-text-messages-for-att-verizon.pdf">http://acme.highpoint.edu/~msetzler/IntroPSC/introReads/hacknmod.com%20-%20email-to-text-messages-for-att-verizon.pdf</a>
            </para>
            <para>
            <a href="https://www.digitaltrends.com/mobile/how-to-send-a-text-from-your-email-account/">https://www.digitaltrends.com/mobile/how-to-send-a-text-from-your-email-account/</a>
            </para>
            <para>
            <a href="https://www.reddit.com/r/mintmobile/comments/ps74h0/what_is_mint_mobiles_emailtotext_domain/">https://www.reddit.com/r/mintmobile/comments/ps74h0/what_is_mint_mobiles_emailtotext_domain/</a>
            </para>
            </remarks>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.Alltel">
            <summary>
            Alltel
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.ATT">
            <summary>
            AT&amp;T
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.Boost">
            <summary>
            Boost
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.CricketWireless">
            <summary>
            Cricket Wireless
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.GoogleProjectFI">
            <summary>
            Google Project FI
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.MintMobile">
            <summary>
            Mint Mobile
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.Nextel">
            <summary>
            Nextel
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.RepublicWireless">
            <summary>
            Republic Wireless
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.SpectrumMobile">
            <summary>
            Spectrum Mobile
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.SprintPCS">
            <summary>
            Sprint PCS
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.StraightTalk">
            <summary>
            StraightTalk
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.Ting">
            <summary>
            Ting
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.TMobile">
            <summary>
            T-Mobile
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.USCellular">
            <summary>
            US Cellular
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.Verizon">
            <summary>
            Verizon
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Email.Sms.Carrier.VirginMobile">
            <summary>
            Virgin Mobile
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Email.Sms.SmsSettings">
            <summary>
            Configuration settings for Horseshoe.NET.Email.Sms
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.Sms.SmsSettings.DefaultFrom">
            <summary>
            Gets or sets the default sender address used by SMS.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Sms:From and OrganizationalDefaultSettings: key = Sms.From)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Email.Sms.SmsUtil">
            <summary>
            Utility methods for email-to-sms messaging
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.SmsUtil.GetDescription(Horseshoe.NET.Email.Sms.Carrier)">
            <summary>
            Gets a carrier's name based off its <c>enum</c> value
            </summary>
            <param name="carrier">A carrier <c>enum</c> value</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.SmsUtil.ResolveCarrier(System.String)">
            <summary>
            Gets a carrier's <c>enum</c> value based off its name
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.SmsUtil.BuildTextRecipientAddress(System.String,Horseshoe.NET.Email.Sms.Carrier)">
            <summary>
            Builds the email address from the mobile number and carrier's SMS gateway
            </summary>
            <param name="mobileNumber">A mobile number</param>
            <param name="carrier">A carrier</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.SmsUtil.ValidateMobileNumber(System.String)">
            <summary>
            Accepts a US 10-digit phone number in a variety of formats and extracts just the digits (excluding +1) for 
            </summary>
            <param name="mobileNumber"></param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException">If not a valid 10-digit US phone number</exception>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.SmsUtil.GetSmsGateway(Horseshoe.NET.Email.Sms.Carrier)">
            <summary>
            Gets the SMS gateway for the specified carrier (e.g. the 'example.com' in '5554443333@example.com')
            </summary>
            <param name="carrier">A carrier</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException">If the supplied carrier is not associated with an SMS gateway</exception>
        </member>
        <member name="T:Horseshoe.NET.Email.Sms.TextMessage">
            <summary>
            Utility methods for generating email-based text messages
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.TextMessage.SendViaEmail(System.String,System.String,System.Nullable{Horseshoe.NET.Email.Sms.Carrier},System.String,Horseshoe.NET.Email.SmtpConnectionInfo,System.Action{System.String,System.String})">
            <summary>
            Sends an email to be converted by the carrier into a text message
            </summary>
            <param name="message">The message text</param>
            <param name="mobileNumber">The mobile number to which the eventual text message should be sent</param>
            <param name="carrier">The carrier</param>
            <param name="from">The sender's email address</param>
            <param name="connectionInfo">SMTP connection info</param>
            <param name="textSent">An action to perform when the text has been sent, includes recipient email address and message text</param>
            <exception cref="T:Horseshoe.NET.ValidationException">if any critical part of the email is missing</exception>
        </member>
        <member name="M:Horseshoe.NET.Email.Sms.TextMessage.SendViaEmail(System.String,System.String,System.String,System.Nullable{Horseshoe.NET.Email.Sms.Carrier},System.String,Horseshoe.NET.Email.SmtpConnectionInfo,System.Action{System.String,System.String})">
            <summary>
            Sends an email to be converted by the carrier into a text message
            </summary>
            <param name="subject"></param>
            <param name="message">The message text</param>
            <param name="mobileNumber">The mobile number to which the eventual text message should be sent</param>
            <param name="carrier">The carrier</param>
            <param name="from">The sender's email address</param>
            <param name="connectionInfo">SMTP connection info</param>
            <param name="textSent"></param>
            <exception cref="T:Horseshoe.NET.ValidationException">if any critical part of the email is missing</exception>
        </member>
        <member name="T:Horseshoe.NET.Email.EmailSettings">
            <summary>
            Configuration settings for Horseshoe.NET.Email
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultSmtpServer">
            <summary>
            Gets or sets the default SMTP server used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:SmtpServer and OrganizationalDefaultSettings: key = Email.SmtpServer)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultPort">
            <summary>
            Gets or sets the default SMTP port used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:SmtpPort and OrganizationalDefaultSettings: key = Email.SmtpPort)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultEnableSsl">
            <summary>
            Gets or sets the SSL setting used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:SmtpEnableSsl and OrganizationalDefaultSettings: key = Email.SmtpEnableSsl)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultCredentials">
            <summary>
            Gets or sets the default SMTP login credentials used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:SmtpUserName|Password|IsEncryptedPassword|Domain and OrganizationalDefaultSettings: key = Email.SmtpCredentials)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultFrom">
            <summary>
            Gets or sets the default sender address used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:From and OrganizationalDefaultSettings: key = Email.From)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.EmailSettings.DefaultFooterText">
            <summary>
            Gets or sets the default footer text used by PlainEmail and HtmlEmail.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Email:FooterText and OrganizationalDefaultSettings: key = Email.Footer)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Email.HtmlEmail">
            <summary>
            Utility methods for generating HTML formatted emails
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Email.HtmlEmail.Send(System.String,System.String,Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues,System.String,Microsoft.Extensions.Primitives.StringValues,System.String,System.Text.Encoding,Horseshoe.NET.Email.SmtpConnectionInfo)">
            <summary>
            Sends a plain email
            </summary>
            <param name="subject">Email subject</param>
            <param name="body">Email content</param>
            <param name="to">Recipient email address(es)</param>
            <param name="cc">CC: email address(es)</param>
            <param name="bcc">BCC: email address(es)</param>
            <param name="from">Sender email address</param>
            <param name="attach">Optional attachment file path(s)</param>
            <param name="footerHtml">Optional footer</param>
            <param name="encoding">Optional email body encoding</param>
            <param name="connectionInfo">SMTP connection info</param>
            <exception cref="T:Horseshoe.NET.ValidationException">if any critical part of the email is missing</exception>
        </member>
        <member name="T:Horseshoe.NET.Email.PlainEmail">
            <summary>
            Utility methods for generating unformatted emails
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Email.PlainEmail.Send(System.String,System.String,Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues,System.String,Microsoft.Extensions.Primitives.StringValues,System.String,System.Text.Encoding,Horseshoe.NET.Email.SmtpConnectionInfo)">
            <summary>
            Sends a plain email
            </summary>
            <param name="subject">Email subject</param>
            <param name="body">Email content</param>
            <param name="to">Recipient email address(es)</param>
            <param name="cc">CC: email address(es)</param>
            <param name="bcc">BCC: email address(es)</param>
            <param name="from">Sender email address</param>
            <param name="attach">Optional attachment file path(s)</param>
            <param name="footerText">Optional footer text</param>
            <param name="encoding">Optional email body encoding</param>
            <param name="connectionInfo">SMTP connection info</param>
            <exception cref="T:Horseshoe.NET.ValidationException">if any critical part of the email is missing</exception>
        </member>
        <member name="T:Horseshoe.NET.Email.SmtpConnectionInfo">
            <summary>
            Connection information for building an <c>SmtpClient</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.SmtpConnectionInfo.Server">
            <summary>
            The SMTP server name or DNS alias
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.SmtpConnectionInfo.Port">
            <summary>
            An optional TCP port, not required if server is listening on the standard port for SMTP
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.SmtpConnectionInfo.Credentials">
            <summary>
            SMTP server credentials
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.SmtpConnectionInfo.EnableSsl">
            <summary>
            Use <c>true</c> to enable SSL on the SMTP client connection
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Email.SmtpConnectionInfo.Source">
            <summary>
            The connection info source, for debugging
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Email.SmtpUtil">
            <summary>
            Email utility methods primarily for Horseshoe.NET
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Email.SmtpUtil.GetSmtpClient(Horseshoe.NET.Email.SmtpConnectionInfo,System.Action{Horseshoe.NET.Email.SmtpConnectionInfo})">
            <summary>
            Creates an <c>SmtpClient</c> (from connection info or settings) for generating emails
            </summary>
            <param name="connectionInfo">An optional <c>SmtpConnectionInfo</c> instance</param>
            <param name="resultantConnectionInfo"></param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Lib">
            <summary>
            Information about this Horseshoe.NET library.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.Assembly">
            <summary>
            Gets the current Horseshoe.NET assembly.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.AssemblyName">
            <summary>
            Gets the current Horseshoe.NET assembly's <c>AssemblyName</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.Name">
            <summary>
            Gets the current Horseshoe.NET assembly's name.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.FullName">
            <summary>
            Gets the current Horseshoe.NET assembly's full name.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.Version">
            <summary>
            Gets the current Horseshoe.NET assembly's version (3+ levels).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.DisplayName">
            <summary>
            Gets the current Horseshoe.NET assembly's display name (w/ version 3+ levels).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.Assemblies">
            <summary>
            Gets all currently loaded Horseshoe.NET assemblies.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.AssemblyNames">
            <summary>
            Gets all currently loaded Horseshoe.NET assemblies' <c>AssemblyName</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.Names">
            <summary>
            Gets all currently loaded Horseshoe.NET assemblies' names.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.FullNames">
            <summary>
            Gets all currently loaded Horseshoe.NET assemblies' full names.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Lib.DisplayNames">
            <summary>
            Gets all currently loaded Horseshoe.NET assemblies' display name.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Lib.TryInvokeStaticMethod(System.String,System.String,System.String,System.String,System.Boolean@,System.Object[])">
            <summary>
            Tries to invoke a method from an assembly that may or may not be loaded, if not then fails gracefully.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="partialNamespace">The namespace part beyond the assembly name, if applicable.</param>
            <param name="className">The class name.</param>
            <param name="methodName">The method name.</param>
            <param name="methodInvoked">Out parameter, indicates whether the method in question was invoked.</param>
            <param name="args">Arguments that must match the method parameters, if any.</param>
            <returns>The method result</returns>
        </member>
        <member name="M:Horseshoe.NET.Lib.TryInvokeStaticMethod``1(System.String,System.String,System.String,System.String,System.Boolean@,System.Object[])">
            <summary>
            Tries to invoke a method from an assembly that may or may not be loaded, if not then fails gracefully.
            </summary>
            <typeparam name="T">The return type of the method.</typeparam>
            <param name="assemblyName">The assembly name.</param>
            <param name="partialNamespace">The namespace part beyond the assembly name, if applicable.</param>
            <param name="className">The class name.</param>
            <param name="methodName">The method name.</param>
            <param name="methodInvoked">Out parameter, indicates whether the method in question was invoked.</param>
            <param name="args">Arguments that must match the method parameters, if any.</param>
            <returns>The method result</returns>
        </member>
        <member name="T:Horseshoe.NET.Machine">
            <summary>
            A set of properties pertaining to the local computer / device.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPAddress">
            <summary>
            Machine's IP address
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPv4Address">
            <summary>
            Machine's first IPv4 address
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPv6Address">
            <summary>
            Machine's first IPv6 address
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPAddresses">
            <summary>
            Machine's IP addresses
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPv4Addresses">
            <summary>
            Machine's IPv4 addresses
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.IPv6Addresses">
            <summary>
            Machine's IPv6 addresses
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.Name">
            <summary>
            Machine name
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Machine.FullyQualifiedName">
            <summary>
            Machine's DNS name
            </summary>
        </member>
        <member name="T:Horseshoe.NET.NumberUtil">
            <summary>
            A collection of utility methods for different numeric types.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.Trunc(System.Double,System.Int32)">
            <summary>
            Rounds off a <c>double</c> value to the supplied number of decimal places.
            </summary>
            <param name="value">A <c>double</c> value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Int16,System.Boolean)">
            <summary>
            Evaluates a <c>short</c> value as a <c>byte</c>.
            </summary>
            <param name="value">A <c>short</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Int32,System.Boolean)">
            <summary>
            Evaluates an <c>int</c> value as a <c>byte</c>.
            </summary>
            <param name="value">An <c>int</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Int64,System.Boolean)">
            <summary>
            Evaluates a <c>long</c> value as a <c>byte</c>.
            </summary>
            <param name="value">A <c>long</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Decimal,System.Boolean)">
            <summary>
            Evaluates a <c>decimal</c> value as a <c>byte</c>.
            </summary>
            <param name="value">A <c>decimal</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Single,System.Boolean)">
            <summary>
            Evaluates a <c>float</c> value as a <c>byte</c>.
            </summary>
            <param name="value">A <c>float</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsByte(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as a <c>byte</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>byte</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsShort(System.Int32,System.Boolean)">
            <summary>
            Evaluates an <c>int</c> value as a <c>short</c>.
            </summary>
            <param name="value">An <c>int</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>short</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsShort(System.Int64,System.Boolean)">
            <summary>
            Evaluates a <c>long</c> value as a <c>short</c>.
            </summary>
            <param name="value">A <c>long</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>short</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsShort(System.Decimal,System.Boolean)">
            <summary>
            Evaluates a <c>decimal</c> value as a <c>short</c>.
            </summary>
            <param name="value">A <c>decimal</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>short</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsShort(System.Single,System.Boolean)">
            <summary>
            Evaluates a <c>float</c> value as a <c>short</c>.
            </summary>
            <param name="value">A <c>float</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>short</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsShort(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as a <c>short</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>short</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsInt(System.Int64,System.Boolean)">
            <summary>
            Evaluates a <c>long</c> value as an <c>int</c>.
            </summary>
            <param name="value">A <c>long</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>int</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsInt(System.Decimal,System.Boolean)">
            <summary>
            Evaluates a <c>decimal</c> value as an <c>int</c>.
            </summary>
            <param name="value">A <c>decimal</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>int</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsInt(System.Single,System.Boolean)">
            <summary>
            Evaluates a <c>float</c> value as an <c>int</c>.
            </summary>
            <param name="value">A <c>float</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>int</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsInt(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as an <c>int</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>int</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsLong(System.Decimal,System.Boolean)">
            <summary>
            Evaluates a <c>decimal</c> value as a <c>long</c>.
            </summary>
            <param name="value">A <c>decimal</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>long</c> to <c>long</c> regardless if the value is greater than the max value of <c>long</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>long</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsLong(System.Single,System.Boolean)">
            <summary>
            Evaluates a <c>float</c> value as a <c>long</c>.
            </summary>
            <param name="value">A <c>float</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>long</c> to <c>long</c> regardless if the value is greater than the max value of <c>long</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>long</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsLong(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as a <c>long</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>long</c> to <c>long</c> regardless if the value is greater than the max value of <c>long</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>long</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsDecimal(System.Single,System.Boolean)">
            <summary>
            Evaluates a <c>float</c> value as a <c>decimal</c>.
            </summary>
            <param name="value">A <c>float</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>decimal</c> to <c>decimal</c> regardless if the value is greater than the max value of <c>decimal</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>decimal</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsDecimal(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as a <c>decimal</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>decimal</c> to <c>decimal</c> regardless if the value is greater than the max value of <c>decimal</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>decimal</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Horseshoe.NET.NumberUtil.EvalAsFloat(System.Double,System.Boolean)">
            <summary>
            Evaluates a <c>double</c> value as a <c>float</c>.
            </summary>
            <param name="value">A <c>double</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>float</c> to <c>float</c> regardless if the value is greater than the max value of <c>float</c> or less than the min value, the default is <c>false</c>.</param>
            <returns>A <c>float</c> whose pre-cast value is <c>value</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Delete">
            <summary>
            Factory methods for deleting data rows and / or tables (because of varying syntaxes a concrete DB platform must be supplied).
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Delete.Table(Horseshoe.NET.Db.DbPlatform,System.String,Horseshoe.NET.Db.IFilter,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Boolean,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a connection and deletes some or all of the rows in a table with option to drop.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="where">A filter indicating which rows to delete.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="drop">If <c>true</c>, deletes the table database object (rather than just delete rows), default is <c>false</c>.</param>
            <param name="purge">Oracle DB only. If <c>true</c> and if <c>drop == true</c>, deletes the table database object (rather than just delete rows) and releases the space associated with it in a single step, default is <c>false</c>.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Delete.Table(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,Horseshoe.NET.Db.IFilter,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Deletes some or all of the rows in a table with option to drop using an existing open connection.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="where">A filter indicating which rows to delete.</param>
            <param name="drop">If <c>true</c>, deletes the table database object (rather than just delete rows), default is <c>false</c>.</param>
            <param name="purge">Oracle DB only. If <c>true</c> and if <c>drop == true</c>, deletes the table database object (rather than just delete rows) and releases the space associated with it in a single step, default is <c>false</c>.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Execute">
            <summary>
            Factory methods for executing non-query SQL statements.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Execute.Procedure(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Opens a connection and executes a non-query stored procedure.
            </summary>
            <param name="procedureName">The name of the stored procedure being executed.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Execute.Procedure(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a non-query stored procedure on an open connection.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being executed.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Execute.SQL(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Opens a connection and executes a non-query SQL statement.
            </summary>
            <param name="statement">The SQL statement to execute.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Execute.SQL(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a non-query SQL statement on an open connection.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">The SQL statement to execute.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of affected rows.</returns>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Insert">
            <summary>
            Factory methods for inserting DB table rows.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Insert.Table(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a connection and inserts values into a table row.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Insert.Table(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Inserts values into a table row using an existing open connection.
            </summary>
            <param name="conn">An open DB connection</param>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Insert.Table(System.Nullable{System.Int32}@,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,System.String,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a connection and inserts values into a table row.
            </summary>
            <param name="identity">The id of the inserted row.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="getIdentitySql">An optional select statement for retrieving the identity of the inserted row.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Insert.Table(System.Nullable{System.Int32}@,System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.String,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Inserts values into a table row using an existing open connection.
            </summary>
            <param name="identity">The id of the inserted row.</param>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to insert (uses <c>DbParameter</c> as column info).</param>
            <param name="getIdentitySql">An optional select statement for retrieving the identity of the inserted row.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="T:Horseshoe.NET.OleDb.OleDbConnectionInfo">
            <summary>
            A connection info specially suited to OLE DB
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbConnectionInfo.#ctor">
            <summary>
            Creates new <c>OleDbConnectionInfo</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbConnectionInfo.#ctor(Horseshoe.NET.Db.ConnectionInfo)">
            <summary>
            Creates new <c>OleDbConnectionInfo</c> from another
            </summary>
            <param name="connectionInfo">Another <c>OleDbConnectionInfo</c></param>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbConnectionInfo.BuildConnectionString">
            <summary>
            Builds a connection string for connecting to an OLE DB data source
            </summary>
            <returns>A connection string.</returns>
        </member>
        <member name="T:Horseshoe.NET.OleDb.OleDbSettings">
            <summary>
            Configuration settings as C# properties
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultConnectionStringName">
            <summary>
            Gets or sets the default OLEDB connection string name.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:OleDb:ConnectionStringName)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultConnectionString">
            <summary>
            Gets the default OLEDB connection string.  Note: Overrides other settings (i.e. OrganizationalDefaultSettings: key = OleDb.ConnectionString)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbSettings.SetDefaultConnectionString(System.String,System.Boolean)">
            <summary>
            Sets the default OLEDB connection string used by DataAccess. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultDataSource">
            <summary>
            Gets or sets the default OLEDB data source.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:OleDb:DataSource and OrganizationalDefaultSettings: key = OleDb.DataSource)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultCredentials">
            <summary>
            Gets or sets the default OLEDB credentials.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:OleDb:UserName|Password and OrganizationalDefaultSettings: key = OleDb.Credentials)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultAdditionalConnectionAttributes">
            <summary>
            Gets or sets the default additional OLEDB connection attributes.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:OleDb:AdditionalConnectionAttributes and OrganizationalDefaultSettings: key = OleDb.AdditionalConnectionAttributes)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.OleDb.OleDbSettings.DefaultConnectionTimeout">
            <summary>
            Gets or sets the default OLEDB connection timeout.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:OleDb:ConnectionTimeout and OrganizationalDefaultSettings: key = OleDb.ConnectionTimeout)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.OleDb.OleDbUtil">
            <summary>
            A suite of factory and utility methods for <c>Horseshoe.NET.OleDb</c>
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbUtil.BuildConnectionString(System.String,System.Nullable{Horseshoe.NET.Credential},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Int32})">
            <summary>
            Builds a connection string for OLE DB from the supplied data source and other parts.
            </summary>
            <param name="dataSource">An OLE DB data source name or DNS alias</param>
            <param name="credentials">User name and password.</param>
            <param name="additionalConnectionAttributes">Additional connection attributes.</param>
            <param name="connectionTimeout">The time to wait while trying to establish a connection before terminating the attempt and generating an error.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbUtil.BuildConnectionStringFromConfig">
            <summary>
            Builds a connection string piecemeal from configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.OleDbUtil.LaunchConnection(Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Crypto.CryptoOptions,Horseshoe.NET.TraceJournal)">
            <summary>
            Creates and opens a DB connection from the supplied connection information
            </summary>
            <param name="connectionInfo">Connection information.</param>
            <param name="cryptoOptions">Options for decrypting DB passwords.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Query">
            <summary>
            Factory methods for querying database objects
            </summary>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Query.SQL">
            <summary>
            Factory methods for executing SQL query statements
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsCollection``1(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsCollectionAsync``1(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsCollection``1(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsCollectionAsync``1(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsObjects(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsObjectsAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsObjects(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsObjectsAsync(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsScalar(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query. 
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsScalarAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsScalar(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsScalarAsync(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataReader(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query. 
            Returns the raw data reader.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataReaderAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query. 
            Returns the raw data reader.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataReader(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataReaderAsync(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataTable(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes the user-supplied SQL query.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.SQL.AsDataTable(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a SQL statement using an existing open connection.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="statement">Typically a SQL 'select' statement</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Query.Table">
            <summary>
            Factory methods for executing table or view based queries
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsCollection``1(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsCollectionAsync``1(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsCollection``1(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsCollectionAsync``1(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsObjects(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsObjectsAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsObjects(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsObjectsAsync(System.Data.OleDb.OleDbConnection,System.String,Horseshoe.NET.Db.DbCapture,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsScalar(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.String,Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="column">The column in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsScalarAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.String,Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="column">The column in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsScalar(System.Data.OleDb.OleDbConnection,System.String,System.String,Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="column">The column in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsScalarAsync(System.Data.OleDb.OleDbConnection,System.String,System.String,Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="column">The column in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataReader(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view. 
            Returns the raw data reader.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataReaderAsync(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view. 
            Returns the raw data reader.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataReader(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataReaderAsync(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataTable(System.String,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied table or view.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Table.AsDataTable(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Db.IFilter,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied table or view using an existing open connection.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="tableName">Typically a table or view to query.</param>
            <param name="columns">The columns in the table or view to return in the result.</param>
            <param name="where">A filter which renders to a SQL 'where' clause.</param>
            <param name="groupBy">A column name or names to render to a SQL 'group by' clause.</param>
            <param name="orderBy">A column name or names to render to a SQL 'order by' clause for server-side row ordering.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Query.Procedure">
            <summary>
            Factory methods for executing stored procedures
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsCollection``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsCollectionAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsCollection``1(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsCollectionAsync``1(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsObjects(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsObjectsAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsObjects(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsObjectsAsync(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsScalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsScalarAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsScalar(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsScalarAsync(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure. 
            Returns the raw data reader.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataReaderAsync(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure. 
            Returns the raw data reader.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataReader(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataReaderAsync(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied stored procedure.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.Procedure.AsDataTable(System.Data.OleDb.OleDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied stored procedure using an existing open connection.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="procedureName">The name of the stored procedure being queried.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Query.TableFunction">
            <summary>
            Factory methods for executing functions
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsCollection``1(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsCollectionAsync``1(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsCollection``1(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsCollectionAsync``1(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.RowParser{``0},Horseshoe.NET.Db.sorter{``0},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection. 
            The data can be parsed deliberately (via explicit user-supplied parser) or, by default, automatically (mapped from DB column names) into a collection.
            </summary>
            <typeparam name="T">The type of items to return in the collection.</typeparam>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="rowParser">Builds an instance of <c>T</c> from row data.</param>
            <param name="sorter">A mechanism for sorting instances of <c>T</c> before returning them to the caller.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as a colletion of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsObjects(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsObjectsAsync(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsObjects(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsObjectsAsync(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection.
            Data is presented as plain <c>object[]</c>s.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The data as <c>object[]</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsScalar(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsScalarAsync(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsScalar(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsScalarAsync(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection.
            Returns the selected datum or the first field of the first row of the result set.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The first field of the first row of the result set.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataReader(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function. 
            Returns the raw data reader.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataReaderAsync(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function. 
            Returns the raw data reader.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataReader(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataReaderAsync(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.DbCapture,System.Boolean,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection. 
            Returns the raw data reader.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="dbCapture">A <c>DbCapture</c> instance stores certain metadata only available during live query execution.</param>
            <param name="keepOpen">Whether to keep a live connection open after exposing the reader to the caller.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The raw data reader</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataTable(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.OleDb.OleDbConnectionInfo,Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a database connection and executes a query on the user-supplied function.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Query.TableFunction.AsDataTable(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Text.AutoTruncate,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Executes a query on the user-supplied function using an existing open connection.
            Returns the data as a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expressions or entire SQL statements.</param>
            <param name="functionName">The name of the function being called.</param>
            <param name="parameters">An optional collection of <c>DbParamerter</c>s to inject into the statement or pass separately into the call.</param>
            <param name="autoTrunc">A mechanism for handling raw string data (e.g. 'trim' or 'zap' which nullifies empty strings).</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>A <see cref="T:System.Data.DataTable"/></returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="T:Horseshoe.NET.OleDb.Update">
            <summary>
            Factory methods for updating database tables.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Update.Table(Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.Filter,Horseshoe.NET.OleDb.OleDbConnectionInfo,System.Nullable{System.Int32},Horseshoe.NET.Crypto.CryptoOptions,System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Creates a connection and updates a database table.
            </summary>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to update (uses <c>DbParameter</c> as column info).</param>
            <param name="where">A filter indicating which rows to update.</param>
            <param name="connectionInfo">Connection information e.g. a connection string or the info needed to build one.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="cryptoOptions">Options for password decryption, if applicable.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of updated rows.</returns>
        </member>
        <member name="M:Horseshoe.NET.OleDb.Update.Table(System.Data.OleDb.OleDbConnection,Horseshoe.NET.Db.DbPlatform,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},Horseshoe.NET.Db.Filter,System.Nullable{System.Int32},System.Action{System.Data.OleDb.OleDbCommand},Horseshoe.NET.TraceJournal)">
            <summary>
            Updates a database table using an existing open connection.
            </summary>
            <param name="conn">An open DB connection.</param>
            <param name="platform">A DB platform lends hints about how to render SQL expression or entire SQL statements.</param>
            <param name="tableName">A table name.</param>
            <param name="columns">The table columns and values to update (uses <c>DbParameter</c> as column info).</param>
            <param name="where">A filter indicating which rows to update.</param>
            <param name="commandTimeout">The wait time before terminating an attempt to execute a command and generating an error.</param>
            <param name="alterCommand">Allows access to the underlying DB command for final inspection or alteration before executing.</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <returns>The number of updated rows.</returns>
        </member>
        <member name="T:Horseshoe.NET.OrganizationalDefaultSettings">
            <summary>
            You may wish to compile Horseshoe.NET and "bake in" organizational defaults
            (for example, a corporate SMPT server) precluding the need for adding such
            values via confguration file. This class exists for that purpose.
            </summary>
            <remarks>
            <para>
            Alternatively, you may set or override these defaults at any time via 
            configuration file, using settings' setters or by supplying the desired values as 
            optional parameters to the utility methods they apply to.
            </para>
            <para>
            Instructions:
            </para>
            <para>
            Uncomment the organizational defaults below that you would like to employ.
            Modify the values accordingly, however, do NOT modify the keys and please
            ensure the data type of the modified values still matches that of the sample value.
            </para>
            <para>
            Hint:
            </para>
            <para>
            Before downloading a new version of this source code and re-compiling 
            make a backup copy of this file. Then, restore your customizations to the new
            version of this file one at a time ensuring that each one has neither
            been renamed nor removed. Finally, check to see if new organizational defaults
            were added in the new version and if your organization can use them.
            </para>
            <para>
            Then, copy your customizations from the backup file and paste them here.
            </para>
            </remarks>
        </member>
        <member name="M:Horseshoe.NET.OrganizationalDefaultSettings.Get``1(System.String)">
            <summary>
            Gets an organizational default setting.
            </summary>
            <param name="key">The lookup key.</param>
            <returns>The value corresponding to <c>key</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.OrganizationalDefaultSettings.GetInstance``1(System.String,System.Boolean)">
            <summary>
            Gets an organizational default setting.
            </summary>
            <param name="key">The lookup key.</param>
            <param name="nonPublic">If <c>true</c>, a public or nonpublic default constructor can be used, default is <c>false</c> (public default constructor only).</param>
            <returns>An instance of the type specified by <c>key</c>.</returns>
        </member>
        <member name="T:Horseshoe.NET.PrunePolicy">
            <summary>
            Dictates how to treat <c>null</c> items when zapping a collection.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.PrunePolicy.None">
            <summary>
            Do not remove <c>null</c> items.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.PrunePolicy.Leading">
            <summary>
            Only remove <c>null</c> items from the beginning of a collection.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.PrunePolicy.Trailing">
            <summary>
            Only remove <c>null</c> items from the end of a collection.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.PrunePolicy.LeadingAndTrailing">
            <summary>
            Only remove <c>null</c> items from the beginning and end of a collection.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.PrunePolicy.All">
            <summary>
            Remove all <c>null</c> items.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.RevealCharCategory">
            <summary>
            Indicates which <c>char</c> categories to reveal.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.None">
            <summary>
            Does not reveal <c>char</c>s of any category.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.Whitespaces">
            <summary>
            Reveals ASCII whitespaces i.e. space, non-breaking space, tab and new lines (for further whitespace granularity use <c>WhitespacePolicy</c>).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.ASCIIChars">
            <summary>
            Reveals printable ASCII <c>char</c> codes (not including extended ASCII).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.ControlChars">
            <summary>
            Reveals ASCII control <c>char</c>s (includes extended ASCII controls but does not include tab or new lines which Horseshoe.NET categorizes as whitespaces).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.Others">
            <summary>
            Reveals all other <c>char</c> categories i.e. extended printable ASCII and Unicode (characters, symbols, non-printables, etc.).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.RevealCharCategory.All">
            <summary>
            Reveals all <c>char</c> categories i.e. whitespaces, printable ASCII <c>char</c> codes, ASCII control <c>char</c>s, extended printable ASCII and Unicode (characters, symbols, non-printables, etc.).
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.TextConstants">
            <summary>
            A collection of text common text values for Horseshoe.NET or anybody
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextConstants.Null">
            <summary>
            How to represent a null reference in most common scenarios
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextConstants.Empty">
            <summary>
            How to represent an empty <c>string</c> in most common scenarios
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.RevealOptions">
            <summary>
            Customizations for revealing <c>char</c>s and <c>string</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfNull">
            <summary>
            If the input <c>string</c> is null, display this.  This property is customizable.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfEmpty">
            <summary>
            If the input <c>string</c> is empty, display this.  This property is customizable.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfWhitespace">
            <summary>
            If the input <c>string</c> is whitespace, display this.  This property is customizable.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfSpace">
            <summary>
            Value revealing an ASCII space
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfNbSpace">
            <summary>
            Value revealing a non-breaking space
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfTab">
            <summary>
            Value revealing a tab
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfCr">
            <summary>
            Value revealing a carriage return
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfLf">
            <summary>
            Value revealing a line feed
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.ValueIfCrLf">
            <summary>
            Value revealing a carriage return / line feed combination
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.CharsToReveal">
            <summary>
            Reveals ASCII character codes (not including extended ASCII).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.WhitespacesToReveal">
            <summary>
            When combined with <c>RevealCharCategory.RevealWhitespaces</c> indicates which whitespaces to reveal.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.PreserveNewLines">
            <summary>
            When combined with <c>RevealNewLines</c> renders actual new lines to the output in addition to revealed new lines.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.Default">
            <summary>
            A global <c>RevealOptions</c> instance that instructs Horseshoe.NET to reveal only blank and null strings.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.RevealOptions.All">
            <summary>
            A global <c>RevealOptions</c> instance that instructs Horseshoe.NET to reveal every <c>char</c> in a string or whether it is blank or null.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.AutoTruncate">
            <summary>
            Instructs certain processes how to handle <c>string</c> data.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.AutoTruncate.None">
            <summary>
            No action required.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.AutoTruncate.Trim">
            <summary>
            Strings must have whitespaces trimmed off the beginning and end.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.AutoTruncate.Zap">
            <summary>
            Strings must have whitespaces trimmed off the beginning and end; also, zero-length string must be converted to <c>null</c>.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.AutoTruncate.EmptyStringsOnly">
            <summary>
            Causes <c>Zap</c> to ignore non-empty whitespace strings. 
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.Deserialize">
            <summary>
            Factory methods for object deserialization (e.g. JSON, possibly XML in the future).
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.Deserialize.Json(System.String,System.Type,System.Func{System.String,System.String})">
            <summary>
            Deserializes an object from JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <param name="json">A JSON string.</param>
            <param name="objectType">A reference type.</param>
            <param name="onBeforeDeserialize">An action to perform pre-deserialization.</param>
            <returns>An object deserialized from the supplied JSON string.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.Deserialize.JsonAsync(System.String,System.Type,System.Func{System.String,System.String})">
            <summary>
            Deserializes an object from JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <param name="json">A JSON string.</param>
            <param name="objectType">A reference type.</param>
            <param name="onBeforeDeserialize">An action to perform pre-deserialization.</param>
            <returns>An object deserialized from the supplied JSON string.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.Deserialize.Json``1(System.String,System.Func{System.String,System.String})">
            <summary>
            Deserializes an object from JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <typeparam name="E">A reference type.</typeparam>
            <param name="json">A JSON string.</param>
            <param name="onBeforeDeserialize">An action to perform pre-deserialization.</param>
            <returns>An object deserialized from the supplied JSON string.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.Deserialize.JsonAsync``1(System.String,System.Func{System.String,System.String})">
            <summary>
            Deserializes an object from JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <typeparam name="E">A reference type.</typeparam>
            <param name="json">A JSON string.</param>
            <param name="onBeforeDeserialize">An action to perform pre-deserialization.</param>
            <returns>An object deserialized from the supplied JSON string.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Text.Extensions">
            <summary>
            A collection of extension methods for <c>string</c> and <c>char</c> interpretation and <c>string</c> manipulation.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.Fill(System.String,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Fill(System.String,System.Int32,System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.FitCenter(System.String,System.Int32,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.FitLeft(System.String,System.Int32,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.FitRight(System.String,System.Int32,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.HasWhitespace(System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.HasWhitespace(System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.MultilineTrim(System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.MultilineTrim(System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.PadCenter(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.PadLeft(System.String,System.Int32,System.String,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.PadRight(System.String,System.Int32,System.String,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.Repeat(System.String,System.Int32)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Repeat(System.String,System.Int32)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.CropCenter(System.String,System.Int32,System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.CropLeft(System.String,System.Int32,System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.CropRight(System.String,System.Int32,System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String,System.String)">
            <summary>
            Appends a <c>string</c> to a <c>StringBuilder</c> if <c>criteria == true</c>.  If <c>false</c> then nothing is appended 
            unless <c>valueIfFalse</c> has a value, then that is appended.
            </summary>
            <param name="sb">A <c>StringBuilder</c>.</param>
            <param name="criteria"><c>true</c> or <c>false</c></param>
            <param name="valueIfTrue">The value to append if <c>criteria == true</c>.</param>
            <param name="valueIfFalse">An optional value to append if <c>criteria == false</c>. If <c>null</c> then nothing is appended.</param>
            <returns>The <c>StringBuilder</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object,System.Object)">
            <summary>
            Appends an <c>object</c> to a <c>StringBuilder</c> if <c>criteria == true</c>.  If <c>false</c> then nothing is appended 
            unless <c>valueIfFalse</c> has a value, then that is appended.
            </summary>
            <param name="sb">A <c>StringBuilder</c>.</param>
            <param name="criteria"><c>true</c> or <c>false</c></param>
            <param name="valueIfTrue">The value to append if <c>criteria == true</c>.</param>
            <param name="valueIfFalse">An optional value to append if <c>criteria == false</c>. If <c>null</c> then nothing is appended.</param>
            <returns>The <c>StringBuilder</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.AppendLineIf(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Appends a new line to a <c>StringBuilder</c> if <c>criteria == true</c>.
            </summary>
            <param name="sb">A <c>StringBuilder</c>.</param>
            <param name="criteria"><c>true</c> or <c>false</c></param>
            <returns>The <c>StringBuilder</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String,System.String)">
            <summary>
            Appends a new line of content to a <c>StringBuilder</c> if <c>criteria == true</c>.  If <c>false</c> then nothing is appended 
            unless <c>valueIfFalse</c> has a value, then that is appended to a new line.
            </summary>
            <param name="sb">A <c>StringBuilder</c>.</param>
            <param name="criteria"><c>true</c> or <c>false</c></param>
            <param name="valueIfTrue">The value to append if <c>criteria == true</c>.</param>
            <param name="valueIfFalse">An optional value to append if <c>criteria == false</c>. If <c>null</c> then nothing is appended.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.ReplaceLast(System.String,System.String,System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.ReplaceLast(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.ToSecureString(System.String)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.ConvertToSecureString(System.String)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.ToUnsecureString(System.Security.SecureString)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.ConvertToUnsecureString(System.Security.SecureString)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.IsASCIIPrintable(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.IsASCIIPrintable(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.IsASCIIPrintable(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:Horseshoe.NET.Text.TextUtil.IsASCIIPrintable(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.ContainsAny(System.String,System.String[])">
            <summary>
            Tests to see if <c>text</c> contains at least one of a group of <c>string</c>s.
            </summary>
            <param name="text">A <c>string</c> to search.</param>
            <param name="contentsToSearchFor">A group of <c>string</c> to search for.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Tests to see if <c>text</c> contains at least one of a group of <c>string</c>s, not case-sensitive if <c>ignoreCase == true</c>.
            </summary>
            <param name="text">A <c>string</c> to search.</param>
            <param name="contentsToSearchFor">A group of <c>string</c> to search for.</param>
            <param name="ignoreCase">If <c>true</c> the search is not case-senstive, default is <c>false</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.In(System.Char,System.Int32[])">
            <summary>
            Inspired by SQL, determines if an item is one of a supplied array of values
            </summary>
            <param name="chr">The item to locate</param>
            <param name="charCodes">The collection to search</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.IsNewLine(System.Char)">
            <summary>
            Determines if character is carriage return (\r) or line feed (\n)
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.GetCleanedWhitespaceCharacters(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the count of whitespace <c>char</c>s that were eliminated or converted during a 'clean' operation.
            </summary>
            <param name="journal"></param>
            <returns>Affected whitespace <c>char</c> count</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.GetCleanedNonprintableCharacters(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the count of nonprintable <c>char</c>s that were eliminated or converted during a 'clean' operation.
            </summary>
            <param name="journal"></param>
            <returns>Affected nonprintable <c>char</c> count</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.GetCleanedUnicodeCharacters(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the count of Unicode <c>char</c>s that were eliminated or converted during a 'clean' operation.
            </summary>
            <param name="journal"></param>
            <returns>Affected Unicode <c>char</c> count</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.GetCleanedOtherCharacters(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the count of other <c>char</c>s that were eliminated or converted during a 'clean' operation.
            </summary>
            <param name="journal"></param>
            <returns>Other affected <c>char</c> count</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.Extensions.GetTotalCleanedCharacters(Horseshoe.NET.TraceJournal)">
            <summary>
            Gets the total count of <c>char</c>s that were eliminated or converted during a 'clean' operation.
            </summary>
            <param name="journal"></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Text.HorizontalPosition">
            <summary>
            Typically used in situations when text is padded to a fixed size.  Where the padding is placed can "align" the visible text.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.HorizontalPosition.Left">
            <summary>
            Pad right so that text is left aligned
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.HorizontalPosition.Center">
            <summary>
            Pad both sides so that text is centered
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.HorizontalPosition.Right">
            <summary>
            Pad left so that text is right aligned
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.JsonProvider">
            <summary>
            Which JSON library is installed or which one to use if both are installed.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.JsonProvider.None">
            <summary>
            No JSON library was installed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.JsonProvider.NewtonsoftJson">
            <summary>
            Uses Newtonsoft.Json library
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.JsonProvider.SystemTextJson">
            <summary>
            Uses System.Text.Json library
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.Serialize">
            <summary>
            Factory methods for object serialization (e.g. JSON, possibly XML in the future).
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.Serialize.Json(System.Object,System.Boolean)">
            <summary>
            Serializes an object to JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <param name="obj">An object to serialize.</param>
            <param name="indented">Whether to render serialized result in human-friendly indented style.</param>
            <returns>A JSON <c>string</c> serialized from <c>obj</c>.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.Serialize.JsonAsync(System.Object,System.Boolean)">
            <summary>
            Serializes an object to JSON (either <c>System.Text.Json</c> or <c>Newtonsoft.Json</c> is required).
            </summary>
            <param name="obj">An object to serialize.</param>
            <param name="indented">Whether to render serialized result in human-friendly indented style.</param>
            <returns>A JSON <c>string</c> serialized from <c>obj</c>.</returns>
            <exception cref="T:Horseshoe.NET.UtilityException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Text.CharLib">
            <summary>
            A <c>char</c> categorization library for text cleaning and Unicode-to-ASCII conversions. 
            </summary>
            <remarks>
            <para>
            Unicode ref: https://en.wikipedia.org/wiki/List_of_Unicode_characters#Basic_Latin
            </para>
            <para>
            Punctuation ref: https://en.wikipedia.org/wiki/Punctuation  (I stopped right before Armenian)
            </para>
            </remarks>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ASCIIWhitespaces">
            <summary>
            A subset of whitespace characters
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetASCIIWhitespacesExceptNewLines">
            <summary>
            A subset of whitespace characters
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetNewLines">
            <summary>
            The subset of ASCII whitespace <c>char</c>s comprising only carriage return (<c>\r</c>) and line feed (<c>\n</c>)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ASCIIAlpha">
            <summary>
            ASCII alphabetic <c>char</c>s (i.e. upper and lowercase A - Z).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetUCaseASCIIAlpha">
            <summary>
            Upper case ASCII alphabetic <c>char</c>s (i.e. A - Z).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetLCaseASCIIAlpha">
            <summary>
            Lower case ASCII alphabetic <c>char</c>s (i.e. a - z).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ASCIINumeric">
            <summary>
            ASCII alphabetic <c>char</c>s (i.e. 0 - 9).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllASCIIAlphaNumeric">
            <summary>
            ASCII alpanumeric <c>char</c>s (i.e. A - Z and 0 - 9).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetUCaseASCIIAlphaNumeric">
            <summary>
            Upper case ASCII alpanumeric <c>char</c>s (i.e. A - Z and 0 - 9).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetLCaseASCIIAlphaNumeric">
            <summary>
            Lower case ASCII alpanumeric <c>char</c>s (i.e. a - z and 0 - 9).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ASCIISymbols">
            <summary>
            ASCII punctuation and symbols.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.CharLib.GetAllASCIIPrintables(Horseshoe.NET.Text.WhitespacePolicy)">
            <summary>
            Gets all ASCII printable <c>char</c>s potentially including any whitespaces indicated in <c>whitespacePolicy</c>.
            </summary>
            <param name="whitespacePolicy">Which whitespaces to include. Note: <c>IncludeNonBreakingSpace</c> has no effect because it belongs in the extended ASCII set.</param>
            <returns>An array of all ASCII printable <c>char</c>s.</returns>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ASCIINonprintables">
            <summary>
            ASCII control characters (not including tabs and new lines)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ExtendedASCIIWhitespaces">
            <summary>
            Extended ASCII whitespaces (includes only the non-breaking space).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllWhitespaces">
            <summary>
            The complete set of ASCII and extended ASCII whitespace characters.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetWhitespacesExceptNewLines">
            <summary>
            The complete set of ASCII and extended ASCII whitespace characters (except new lines).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ExtendedASCIIAlpha">
            <summary>
            Extended ASCII Latin <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetUCaseExtendedASCIIAlpha">
            <summary>
            Upper case extended ASCII Latin <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetLCaseExtendedASCIIAlpha">
            <summary>
            Lower case extended ASCII Latin <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllExtendedASCIIAlpha">
            <summary>
            ASCII and extended ASCII Latin <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllExtendedASCIIAlphaNumeric">
            <summary>
            ASCII and extended ASCII alphanumeric <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetUCaseExtendedASCIIAlphaNumeric">
            <summary>
            Upper case ASCII and extended ASCII alphanumeric <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.SubsetLCaseExtendedASCIIAlphaNumeric">
            <summary>
            Lower case ASCII and extended ASCII alphanumeric <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ExtendedASCIISymbols">
            <summary>
            Extended ASCII punctuation and symbols.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.CharLib.GetAllExtendedASCIIPrintables(Horseshoe.NET.Text.WhitespacePolicy)">
            <summary>
            Gets all ASCII and extended ASCII printable <c>char</c>s including any whitespaces indicated in <c>whitespacePolicy</c>.
            </summary>
            <param name="whitespacePolicy">Which whitespaces to include. Note: <c>IncludeNonBreakingSpace</c> has no effect because it belongs in the extended ASCII set.</param>
            <returns>An array of all ASCII printable <c>char</c>s.</returns>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.ExtendedASCIINonprintables">
            <summary>
            Extended ASCII control <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllExtendedASCIINonprintables">
            <summary>
            ASCII and extended ASCII control <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.OtherNonprintables">
            <summary>
            Other Unicode non-printable <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllNonprintables">
            <summary>
            ASCII and extended ASCII control <c>char</c>s and Unicode non-printable <c>char</c>s.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeLatinToASCIIAlphaConversions">
            <summary>
            A Unicode Latin-to-ASCII conversion chart. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeLatinToASCIIAlphaComplexConversions">
            <summary>
            A Unicode Latin-to-ASCII conversion chart for Unicode <c>char</c>s that can be represented by multiple ASCII <c>char</c>s. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeExtendedLatinToASCIIAlphaConversions">
            <summary>
            A Unicode extended Latin-to-ASCII conversion chart. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeExtendedLatinToASCIIAlphaComplexConversions">
            <summary>
            A Unicode extended Latin-to-ASCII conversion chart for Unicode <c>char</c>s that can be represented by multiple ASCII <c>char</c>s. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeGreekToASCIIAlphaConversions">
            <summary>
            A Unicode Greek-to-ASCII conversion chart. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeExtendedGreekToASCIIAlphaConversions">
            <summary>
            A Unicode extended Greek-to-ASCII conversion chart. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeGreekToASCIIAlphaComplexConversions">
            <summary>
            A Unicode Greek-to-ASCII conversion chart for Unicode <c>char</c>s that can be represented by multiple ASCII <c>char</c>s. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeCyrillicToASCIIAlphaConversions">
            <summary>
            A Unicode extended Cyrillic-to-ASCII conversion chart. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeCyrillicToASCIIAlphaComplexConversions">
            <summary>
            A Unicode Cyrillic-to-ASCII conversion chart for Unicode <c>char</c>s that can be represented by multiple ASCII <c>char</c>s. 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeSymbolsToASCIIConversions">
            <summary>
            A Unicode symbols-to-ASCII conversion chart. Included are letter-like, number-like, punctation-like and other symbols.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.UnicodeSymbolsToASCIIComplexConversions">
            <summary>
            A Unicode symbols-to-ASCII conversion chart for Unicode <c>char</c>s that can be represented by multiple ASCII <c>char</c>s. 
            Included are letter-like, number-like, punctation-like, math/programming, emoji, meta and other symbols.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllUnicodeToASCIIConversions">
            <summary>
            A collection of all the single <c>char</c>-based Unicode-to-ASCII conversion charts.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.CharLib.AllUnicodeToASCIIComplexConversions">
            <summary>
            A collection of all the multi-<c>char</c>-based Unicode-to-ASCII conversion charts.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.WhitespacePolicy">
            <summary>
            Determines which whitespaces to include in an operation and other actions such as normalize and combine.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.None">
            <summary>
            Includes no whitespaces or new lines.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeASCIISpace">
            <summary>
            Include normal spaces.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeNonbreakingSpace">
            <summary>
            Include non-breaking spaces.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeAllSpaces">
            <summary>
            Include both normal and non-breaking spaces.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeTab">
            <summary>
            Includes tabs.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeNewLines">
            <summary>
            Includes new lines.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeAllASCIIWhitespaces">
            <summary>
            Includes all whitespaces (except non-breaking spaces) and new lines.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.IncludeAllWhitespaces">
            <summary>
            Includes all whitespaces and new lines.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.NormalizeWhitespaces">
            <summary>
            Converts all whitespaces to normal spaces.  Often used in conjunction with <c>CombineSpaces</c>.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.WhitespacePolicy.CombineSpaces">
            <summary>
            Combines multiple contiguous spaces into one.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.TextClean.TextClean">
            <summary>
            A set of factory methods for removing or replaceing non-ASCII characters in string.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextClean.TextClean.Remove(System.String,System.Char[])">
            <summary>
            Searches a string for certain <c>char</c>s and returns a copy of the original string without those <c>char</c>s.
            </summary>
            <param name="text">A text <c>string</c> to evaluate.</param>
            <param name="chars">A set of <c>char</c>s to remove from <c>text</c>.</param>
            <returns>A copy of the original string without the unwanted <c>char</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextClean.TextClean.RemoveWhitespace(System.String,System.Boolean)">
            <summary>
            Searches a string for whitespace <c>char</c>s and returns a copy of the original string without those <c>char</c>s.
            </summary>
            <param name="text">A text <c>string</c> to evaluate.</param>
            <param name="preserveNewlines">Indicates whether to leave in new lines <c>char</c>s, default is <c>false</c>.</param>
            <returns>A copy of the original string without the unwanted <c>char</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextClean.TextClean.RemoveNewlines(System.String)">
            <summary>
            Searches a string for new line <c>char</c>s and returns a copy of the original string without those <c>char</c>s.
            </summary>
            <param name="text">A text <c>string</c> to evaluate.</param>
            <returns>A copy of the original string without the unwanted <c>char</c>s.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextClean.TextClean.CombineWhitespace(System.String,System.Boolean)">
            <summary>
            Searches a string for whitespace <c>char</c>s and returns a copy of the original string combining multiple whitespace <c>char</c>s into one.
            </summary>
            <param name="text">A text <c>string</c> to evaluate.</param>
            <param name="preserveNewlines">Indicates whether to leave in new lines <c>char</c>s, default is <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextClean.TextClean.ToASCIIPrintable(System.String,Horseshoe.NET.TraceJournal,Horseshoe.NET.Text.WhitespacePolicy,Horseshoe.NET.Text.TextClean.NonprintablesPolicy,System.String,System.Boolean)">
            <summary>
            Convert essentially any text to its closest ASCII representation
            </summary>
            <param name="text">The source text to convert</param>
            <param name="journal">A trace journal to which each step of the process is logged.</param>
            <param name="whitespacePolicy">Whitespace handling instructions</param>
            <param name="nonprintablesPolicy">Nonprintables display instructions</param>
            <param name="substitute">How to display non-printables (if <c>NonprintablesPolicy.Substitute</c>) and unknown chars</param>
            <param name="extendedASCII"><c>true</c> to allow extended ASCII chars in the output</param>
            <returns>An ASCII string</returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TextClean.NonprintablesPolicy">
            <summary>
            Indicates how to handle non-printable <c>char</c>s when converting to ASCII.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextClean.NonprintablesPolicy.Drop">
            <summary>
            Remove from the result
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextClean.NonprintablesPolicy.Substitute">
            <summary>
            Sunstitute with an ASCII char (e.g. '?')
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.BorderPolicy">
            <summary>
            Whether to render borders and which borders to render on the <c>TextGrid</c>.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.None">
            <summary>
            No borders (default)
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.Outer">
            <summary>
            Renders outside border
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.InnerVertical">
            <summary>
            Renders vertical inner borders
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.InnerHorizontal">
            <summary>
            Renders horizontal inner borders
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.Inner">
            <summary>
            Renders all inner borders
            Renders all inner borders
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TextGrid.BorderPolicy.All">
            <summary>
            Renders all borders
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.Column`1">
            <summary>
            A configurable collection of values comprising a grid column.
            </summary>
            <typeparam name="T">A type.</typeparam>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.Title">
            <summary>
            Column titles, if set, are rendered across the top of the grid above each column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.Format">
            <summary>
            An optional format for item rendering.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.DisplayNullAs">
            <summary>
            How to display null items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.TitleAlign">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.ItemAlign">
            <summary>
            The alignment of the data items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.TargetWidth">
            <summary>
            The desired width of the column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.CalculatedWidth">
            <summary>
            The natural of the column (i.e. the max width of the items and title).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.Column`1.WidthToRender">
            <summary>
            The final width of this column.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.#ctor">
            <summary>
            Creates a new <c>Column</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.#ctor(System.Int32)">
            <summary>
            Creates a new <c>Column</c>.
            </summary>
            <param name="capacity">Specifies the initial capacity.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <c>Column</c>.
            </summary>
            <param name="collection">Elements to copy into this <c>Column</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.Prerender">
            <summary>
            Makes some pre-render calculations.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.RenderItem(`0)">
            <summary>
            Renders each individual item.
            </summary>
            <param name="item">The item to render.</param>
            <returns>The rendered item.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.RenderCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders an individual cell with padding if applicable.
            </summary>
            <param name="index">The row index.</param>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.Column`1.RenderTitleCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders the title cell with padding if applicable.
            </summary>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.CurrencyColumn">
            <summary>
            A specialized <c>TextGrid</c> column for storing and displaying monetary values.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.CurrencyColumn.Format">
            <summary>
            A default, basic currency format.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.CurrencyColumn.TitleAlign">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.CurrencyColumn.ItemAlign">
            <summary>
            The alignment of the data items.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.CurrencyColumn.#ctor">
            <summary>
            Creates a new <c>CurrencyColumn</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.CurrencyColumn.#ctor(System.Int32)">
            <summary>
            Creates a new <c>CurrencyColumn</c>.
            </summary>
            <param name="capacity">Specifies the initial capacity.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.CurrencyColumn.#ctor(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Creates a new <c>CurrencyColumn</c>.
            </summary>
            <param name="collection">Elements to copy into this <c>Column</c>.</param>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.IColumn">
            <summary>
            Template for columns that can be used to render <c>TextGrid</c>s
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.Title">
            <summary>
            Column titles, if set, are rendered across the top of the grid above each column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.Format">
            <summary>
            An optional format for item rendering.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.DisplayNullAs">
            <summary>
            How to display null items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.TitleAlign">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.ItemAlign">
            <summary>
            The alignment of the data items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.TargetWidth">
            <summary>
            The desired width of the column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.CalculatedWidth">
            <summary>
            The natural of the column (i.e. the max width of the items and title).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.WidthToRender">
            <summary>
            The final width of this column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.IColumn.Count">
            <summary>
            The number of items in the column.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.IColumn.Prerender">
            <summary>
            Code to execute before rendering a column (e.g. calculate column width)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.IColumn.RenderCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders an individual cell with padding if applicable.
            </summary>
            <param name="index">The row index.</param>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.IColumn.RenderTitleCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders the title cell with padding if applicable.
            </summary>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.NCurrencyColumn">
            <summary>
            A specialized <c>TextGrid</c> column for storing and displaying nullable monetary values.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.Format">
            <summary>
            A default, basic currency format.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.DisplayNullAs">
            <summary>
            How to display null items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.TitleAlign">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.ItemAlign">
            <summary>
            The alignment of the data items.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.#ctor">
            <summary>
            Creates a new <c>NCurrencyColumn</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.#ctor(System.Int32)">
            <summary>
            Creates a new <c>NCurrencyColumn</c>.
            </summary>
            <param name="capacity">Specifies the initial capacity.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.NCurrencyColumn.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Creates a new <c>NCurrencyColumn</c>.
            </summary>
            <param name="collection">Elements to copy into this <c>Column</c>.</param>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.TextGrid">
            <summary>
            A container, formatter and displayer of tabular data.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.Columns">
            <summary>
            The columns that comprise this grid.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.MaxCount">
            <summary>
            The longest of the column counts.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.TargetWidth">
            <summary>
            The desired width of the grid.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.BorderPolicy">
            <summary>
            Whether to render borders and which borders to render on the <c>TextGrid</c>.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingLeft">
            <summary>
            Gets or sets the left cell padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingRight">
            <summary>
            Gets or sets the right cell padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingTop">
            <summary>
            Gets or sets the top cell padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingBottom">
            <summary>
            Gets or sets the bottom cell padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPadding">
            <summary>
            Simultaneously sets the left, right, top and bottom cell padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingLeftColumnLeft">
            <summary>
            Gets or sets a distinct left cell padding on cells in the left column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CellPaddingRightColumnRight">
            <summary>
            Gets or sets a distinct right cell padding on cells in the right column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.OuterPaddingLeft">
            <summary>
            Gets or sets the left outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.OuterPaddingRight">
            <summary>
            Gets or sets the right outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.OuterPaddingTop">
            <summary>
            Gets or sets the top outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.OuterPaddingBottom">
            <summary>
            Gets or sets the bottom outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.OuterPadding">
            <summary>
            Simultaneously sets the left, right, top and bottom outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CombinedHorizontalOuterPadding">
            <summary>
            Gets the combined horizontal outer grid padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CombinedBorderWidths">
            <summary>
            Gets the combined vertical border widths.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CombinedHorizontalCellPadding">
            <summary>
            Gets the combined horizontal cell padding
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.CombinedRenderedTextWidth">
            <summary>
            Gets the combined final width of the rendered columns.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.TotalWidth">
            <summary>
            Gets the total width of the grid.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.TotalWidthIncludingOuterPadding">
            <summary>
            Gets the total width of the grid plus padding.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TextGrid.TotalExtra">
            <summary>
            Gets the total extra width from borders and padding.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.#ctor">
            <summary>
            Creates a new <c>TextGrid</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.#ctor(Horseshoe.NET.Text.TextGrid.IColumn[])">
            <summary>
            Creates a new <c>TextGrid</c>.
            </summary>
            <param name="columns">A collection of <c>IColumns</c> from which to build the grid.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.#ctor(System.Collections.Generic.IEnumerable{Horseshoe.NET.Text.TextGrid.IColumn})">
            <summary>
            Creates a new <c>TextGrid</c>.
            </summary>
            <param name="columns">A collection of <c>IColumns</c> from which to build the grid.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a new <c>TextGrid</c>.
            </summary>
            <param name="items">A collection of items.</param>
            <param name="columns">The number of desired columns.</param>
            <param name="targetWidth">The desired width of the <c>TextGrid</c>.</param>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.Render">
            <summary>
            Renders this text grid.
            </summary>
            <returns>A <c>string</c> representation of this text grid for displaying to a console or other text based output</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.FromCollection``1(System.Collections.Generic.IEnumerable{``0},System.Action{Horseshoe.NET.Text.TextGrid.TextGrid})">
            <summary>
            Builds a <c>TextGrid</c> from a collection of items.
            </summary>
            <typeparam name="T">The type of item to store and display in this <c>TextGrid</c>.</typeparam>
            <param name="collection">A collection of items.</param>
            <param name="formatGrid"></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TextGrid.FromDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Builds a <c>TextGrid</c> from an <c>IDictionary</c>.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
            <param name="dictionary">An <c>IDictionary</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TextGrid.TypedColumn">
            <summary>
            A specialized <c>TextGrid</c> column for storing and displaying values of a specific type.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.Type">
            <summary>
            The type of item to store and display in this grid column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.Title">
            <summary>
            Column titles, if set, are rendered across the top of the grid above each column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.Format">
            <summary>
            An optional format for item rendering.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.DisplayNullAs">
            <summary>
            How to display null items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.TitleAlign">
            <summary>
            The alignment of the title.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.ItemAlign">
            <summary>
            The alignment of the data items.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.TargetWidth">
            <summary>
            The desired width of the column.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.CalculatedWidth">
            <summary>
            The natural of the column (i.e. the max width of the items and title).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextGrid.TypedColumn.WidthToRender">
            <summary>
            The final width of this column.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.#ctor(System.Type)">
            <summary>
            Creates a new <c>TypedColumn</c>.
            </summary>
            <param name="type">The type of item to store and display in this grid column.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.#ctor(System.Type,System.Int32)">
            <summary>
            Creates a new <c>TypedColumn</c>.
            </summary>
            <param name="type">The type of item to store and display in this grid column.</param>
            <param name="capacity">Specifies the initial capacity.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new <c>TypedColumn</c>.
            </summary>
            <param name="type">The type of item to store and display in this grid column.</param>
            <param name="collection">Elements to copy into this <c>Column</c>.</param>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.Add(System.Object)">
            <summary>
            Adds an item to this column.
            </summary>
            <param name="obj">A item.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.Prerender">
            <summary>
            Makes some pre-render calculations.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.RenderItem(System.Object)">
            <summary>
            Renders each individual item.
            </summary>
            <param name="item">The item to render.</param>
            <returns>The rendered item.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.RenderCell(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders an individual cell with padding if applicable.
            </summary>
            <param name="index">The row index.</param>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextGrid.TypedColumn.RenderTitleCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Renders the title cell with padding if applicable.
            </summary>
            <param name="paddingLeft">Left padding.</param>
            <param name="paddingRight">Right padding.</param>
            <param name="paddingTop">Top padding.</param>
            <param name="paddingBottom">Bottom padding.</param>
            <returns>The cell rendered as an array.</returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TextSettings">
            <summary>
            Configuration-based settings.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.Text.TextSettings.JsonProvider">
            <summary>
            Gets or sets the default JSON provider.  Note: Overrides other settings (i.e. app|web.config: key = Horseshoe.NET:Text:JsonProvider and OrganizationalDefaultSettings: key = Text.JsonProvider)
            </summary>
        </member>
        <member name="T:Horseshoe.NET.Text.TextUtil">
            <summary>
            A collection of factory methods for <c>string</c> and <c>char</c> interpretation and <c>string</c> manipulation.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.MultilineTrim(System.String)">
            <summary>
            Trims each line of a multi-line <c>string</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <returns>A line-trimmed version of <c>text</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.HasWhitespace(System.String)">
            <summary>
            Detects whitespace <c>chars</c> in a <c>string</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Fill(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a fixed-length <c>string</c> by repeating the supplied text.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="targetLength">The target length.</param>
            <param name="allowOverflow">If <c>true</c> and if <c>text</c> length &gt; 1 then result is not truncated to <c>targetLength</c>, default is <c>false</c>.</param>
            <param name="rtl">If <c>true</c>, fills right-to-left, default is <c>false</c>.</param>
            <returns>The new fixed-length <c>string</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Pad(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Boolean)">
            <summary>
            Creates a fixed-length <c>string</c> by adding <c>char</c>s to one or both ends of <c>text</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="targetLength">The target length.</param>
            <param name="direction">The padding direction.</param>
            <param name="padding">The padding text.</param>
            <param name="leftPadding">Left padding.</param>
            <param name="cannotExceedTargetLength">If <c>true</c>, throws an exception if <c>text</c> is longer than <c>targetLength</c>, default is <c>false</c>.</param>
            <returns>The new fixed-length <c>string</c>.</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Crop(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String)">
            <summary>
            Creates a fixed-length <c>string</c> by removing <c>char</c>s from one or both ends of <c>text</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="targetLength">The target length.</param>
            <param name="direction">The padding direction.</param>
            <param name="truncateMarker">An optional truncation indicator, e.g. <c>"..."</c> or <c>TruncateMarker.Ellipsis</c>.</param>
            <returns>The new fixed-length <c>string</c>.</returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Fit(System.String,System.Int32,Horseshoe.NET.Text.HorizontalPosition,System.String,System.String,System.Nullable{Horseshoe.NET.Text.HorizontalPosition},System.String)">
            <summary>
            Creates a fixed-length <c>string</c> by either adding or removing <c>char</c>s from one or both ends of <c>text</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="targetLength">The target length.</param>
            <param name="direction">The padding direction.</param>
            <param name="padding">The padding text.</param>
            <param name="leftPadding">Left padding.</param>
            <param name="truncateDirection">The truncate direction.</param>
            <param name="truncateMarker">An optional truncation indicator, e.g. <c>"..."</c> or <c>TruncateMarker.Ellipsis</c>.</param>
            <returns>The new fixed-length <c>string</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Repeat(System.String,System.Int32)">
            <summary>
            Create a <c>string</c> by repeating <c>text</c> a specific number of time.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="numberOfTimes">A number of times to repeat <c>text</c>.</param>
            <returns>A newly constructed <c>string</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.ReplaceLast(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Searches <c>text</c> and replaces the last occurance of <c>textToReplace</c> with <c>replacementText</c>.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <param name="textToReplace">Text to replace.</param>
            <param name="replacementText">Replacement text.</param>
            <param name="ignoreCase">Whether to ignore the letter case of <c>textToReplace</c>, default is <c>false</c>.</param>
            <returns>A newly constructed <c>string</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Reveal(System.String,Horseshoe.NET.Text.RevealOptions)">
            <summary>
            Generates a long string revealing the constituent <c>char</c>s in <c>text</c> 
            (e.g. alphanumeric, controls, new lines, etc.).
            </summary>
            <param name="text">The text to reveal.</param>
            <param name="options">Customizations for revealing <c>char</c>s and <c>string</c>s.</param>
            <returns>Revealed text e.g. chars, controls, new lines, etc.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Reveal(System.Char,Horseshoe.NET.Text.RevealOptions)">
            <summary>
            Generates a string with <c>char</c> details depending on type e.g. alphanumeric, control, whitespace, etc.
            </summary>
            <param name="c">A <c>char</c> to reveal.</param>
            <param name="options">Customizations for revealing <c>char</c>s and <c>string</c>s.</param>
            <returns>Revealed <c>char</c> details.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.Reveal(System.Object)">
            <summary>
            Same as <c>(obj?.ToString() ?? "null")</c>.
            </summary>
            <param name="obj">An object</param>
            <returns>A text representation of <c>object</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.SpaceOutTitleCase(System.String)">
            <summary>
            Inserts spaces into title case text such as C# object property names.
            </summary>
            <param name="titleCaseText">A text <c>string</c>.</param>
            <returns>The altered text.</returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.ConvertToSecureString(System.String)">
            <summary>
            Creates a <c>SecureString</c> instance from text.
            </summary>
            <param name="unsecureString">A text <c>string</c>.</param>
            <returns>A <c>SecureString</c>.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.ConvertToUnsecureString(System.Security.SecureString)">
            <summary>
            Restores a <c>string</c> from a <c>SecureString</c>.
            </summary>
            <param name="secureString">A <c>SecureString</c>.</param>
            <returns>A <c>string</c>.</returns>
            <remarks>
            ref: https://blogs.msdn.microsoft.com/fpintos/2009/06/12/how-to-properly-convert-securestring-to-string/
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.ConvertToHtml(System.String)">
            <summary>
            Encodes a text <c>string</c> as HTML.
            </summary>
            <param name="text">A text <c>string</c>.</param>
            <returns>An HTML <c>string</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.IsASCIIPrintable(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns <c>true</c> if <c>text</c> contains only printable chars
            </summary>
            <param name="text">a text string</param>
            <param name="spacesAreConsideredPrintable"><c>true</c> to consider spaces as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="tabsAreConsideredPrintable"><c>true</c> to consider tabs as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="newLinesAreConsideredPrintable"><c>true</c> to consider new lines as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="extendedASCII"><c>true</c> if spaces should include non-breaking spaces</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.IsASCIIPrintable(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns <c>true</c> if <c>c</c> represents a printable char
            </summary>
            <param name="c">a char</param>
            <param name="spacesAreConsideredPrintable"><c>true</c> to consider spaces as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="tabsAreConsideredPrintable"><c>true</c> to consider tabs as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="newLinesAreConsideredPrintable"><c>true</c> to consider new lines as printable, <c>false</c> is the default indicating that Horseshoe.NET sees whitespaces as a separate category</param>
            <param name="extendedASCII"><c>true</c> if spaces should include non-breaking spaces</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.IsASCIIControl(System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns <c>true</c> if <c>c</c> represents a control
            </summary>
            <param name="c">a char</param>
            <param name="spacesAreConsideredControls"><c>true</c> matches <c>char.IsControl()</c> behavior, <c>false</c> is the default Horseshoe.NET behavior</param>
            <param name="tabsAreConsideredControls"><c>true</c> matches <c>char.IsControl()</c> behavior, <c>false</c> is the default Horseshoe.NET behavior</param>
            <param name="newLinesAreConsideredControls"><c>true</c> matches <c>char.IsControl()</c> behavior, <c>false</c> is the default Horseshoe.NET behavior</param>
            <param name="extendedASCII"><c>true</c> if extended ASCII controls should be included</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="M:Horseshoe.NET.Text.TextUtil.IsWhitespace(System.Char,System.Boolean)">
            <summary>
            Returns <c>true</c> if <c>c</c> represents a space, new line or tab (non-breaking space included if <c>extendedASCII == true</c>)
            </summary>
            <param name="c">a char</param>
            <param name="extendedASCII"><c>true</c> if non-breaking space should be included</param>
            <returns><c>true</c> or <c>false</c></returns>
        </member>
        <member name="T:Horseshoe.NET.Text.TruncateMarker">
            <summary>
            A nonexhaustive collection of constant <c>string</c> truncation indicators.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TruncateMarker.None">
            <summary>
            No indicator (equivalent to <c>string.Empty</c>).
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TruncateMarker.Ellipsis">
            <summary>
            A triple dot.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.Text.TruncateMarker.LongEllipsis">
            <summary>
            A sequence of three dots.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.TraceJournal">
            <summary>
            <para>
            A basic logging utility aimed at giving developers and testers the ability to view details of each in a chain 
            of nested method calls.  For example, a variable's value, a switch statement output, which method is being called next and why.
            </para>
            <para>
            By convention, please use concise language and always hide passwords.
            </para>
            <para>
            Each method in the chain that includes a <c>TraceJournal</c> parameter can receive the logging mechanism and 
            potentially pass it farther down the chain.  
            </para>
            <para>
            Write trace journaling into your code starting today with easy, out-of-the-box functionality.
            </para>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.TraceJournal.Level">
            <summary>
            Used to indicate depth of nested calls
            </summary>
        </member>
        <member name="F:Horseshoe.NET.TraceJournal.writeEntryAction">
            <summary>
            Write the journal entry to a file, REST service, memory, etc.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.#ctor(System.Action{System.Int32,System.String})">
            <summary>
            Creates a new <c>TraceJournal</c> instance with the supplied write action
            </summary>
            <param name="writeEntryAction">write the journal entry to a file, REST service, memory, etc. (if <c>null</c>, the default action is to add to <c>DefaultEntries</c>)</param>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.WriteEntry(System.String)">
            <summary>
            Invokes the 'write' action on <c>message</c>, the default action adds indented messages to the entry list.
            </summary>
            <param name="message">A journal entry</param>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.Write(System.Object)">
            <summary>
            Invokes the 'write' action on <c>obj</c>, the default action converts objects to indented messages and adds them to the entry list.
            </summary>
            <param name="obj">An object or message</param>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.AddAndWriteEntry(System.String,System.Object)">
            <summary>
            Adds or replaces a key / value and then invokes the 'write' action on it.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.WriteEntryAndThrow(System.Exception,System.Boolean)">
            <summary>
            Throws an exception but not before invoking the 'write' action on it.
            </summary>
            <param name="ex">An exception.</param>
            <param name="levelDown">Whether to decrement the level by one.</param>
        </member>
        <member name="P:Horseshoe.NET.TraceJournal.DefaultEntries">
            <summary>
            The default functionality is to write journal entries here for later retrieval. Caution: <c>ResetDefault()</c> clears this list.
            </summary>
        </member>
        <member name="F:Horseshoe.NET.TraceJournal.Default">
            <summary>
            Use this for easy journaling with zero setup using the default functionality
            </summary>
            <remarks><see cref="M:Horseshoe.NET.TraceJournal.ResetDefault"/></remarks>
        </member>
        <member name="M:Horseshoe.NET.TraceJournal.ResetDefault">
            <summary>
            Easily set up a journaling session with the default functionaliy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.UtilityException">
            <summary>
            A general, catch-all exception for Horseshoe.NET.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.UtilityException.#ctor(System.String)">
            <summary>
            Creates a new <c>UtilityException</c>.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Horseshoe.NET.UtilityException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>UtilityException</c>.
            </summary>
            <param name="message">A message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Horseshoe.NET.AssertionFailedException">
            <summary>
            A specialized exception for failed assertions.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssertionFailedException.#ctor">
            <summary>
            Creates a new <c>AssertionFailedException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssertionFailedException.#ctor(System.String)">
            <summary>
            Creates a new <c>AssertionFailedException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.AssertionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>AssertionFailedException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ThisShouldNeverHappenException">
            <summary>
            A specialized exception whose sole purpose is to fill in code flow logic gaps 
            that should by all counts never get thrown.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ThisShouldNeverHappenException.#ctor">
            <summary>
            Creates a new <c>ThisShouldNeverHappenException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ThisShouldNeverHappenException.#ctor(System.String)">
            <summary>
            Creates a new <c>ThisShouldNeverHappenException</c>.
            </summary>
            <param name="message">A message to never display.</param>
        </member>
        <member name="T:Horseshoe.NET.StrictSensitiveException">
            <summary>
            As specialized, inheritable exception that when caught can be ignored if 
            <c>IsStrictSensitive == true</c> and the caller can choose to switch strictness off.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.StrictSensitiveException.IsStrictSensitive">
            <summary>
            If <c>true</c> then this exception can be ignored in situations where caller can choose to switch strictness off.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.StrictSensitiveException.#ctor">
            <summary>
            Creates new <c>StrictSensitiveException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.StrictSensitiveException.#ctor(System.String)">
            <summary>
            Creates new <c>StrictSensitiveException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.StrictSensitiveException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new <c>StrictSensitiveException</c>.
            </summary>
        </member>
        <member name="T:Horseshoe.NET.ValidationException">
            <summary>
            A specialized exception for dealing with invalid data inputs,
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ValidationException.Message">
            <summary>
            A message comprised of user supplied message and any validation messages (if applicable).
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ValidationException.ValidationMessage">
            <summary>
            Sets <c>ValidationMessages</c> to a 1-length array.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ValidationException.ValidationMessages">
            <summary>
            Gets or sets an array of valication messages.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.ValidationException.HasValidationMessages">
            <summary>
            Whether this exception has any validation messages.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ValidationException.#ctor">
            <summary>
            Creates a new <c>ValidationException</c>.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.ValidationException.#ctor(System.String)">
            <summary>
            Creates a new <c>ValidationException</c>.
            </summary>
            <param name="message">A message.</param>
        </member>
        <member name="M:Horseshoe.NET.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <c>ValidationException</c>.
            </summary>
            <param name="message">A message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.DocElement">
            <summary>
            Represents the documentation-oriented XML element currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.DocElement.None">
            <summary>
            Indicates that no element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.DocElement.Assembly">
            <summary>
            Indicates that the &lt;assembly&gt; element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.DocElement.Member">
            <summary>
            Indicates that a &lt;member&gt; element is currently being processed
            </summary>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.NestedDocElement">
            <summary>
            Represents the <c>XmlDoc</c> nested element currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.None">
            <summary>
            Indicates that no element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Exception">
            <summary>
            Indicates that an &lt;exception&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
            <remarks>has "cref" attribute</remarks>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Name">
            <summary>
            Indicates that the &lt;name&gt; element of the &lt;assembly&gt; element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Param">
            <summary>
            Indicates that a &lt;param&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
            <remarks>has "name" attribute</remarks>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Remarks">
            <summary>
            Indicates that the &lt;remarks&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Returns">
            <summary>
            Indicates that the &lt;returns&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.Summary">
            <summary>
            Indicates that the &lt;summary&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
        </member>
        <member name="F:Horseshoe.NET.XmlDoc.NestedDocElement.TypeParam">
            <summary>
            Indicates that a &lt;typeparam&gt; element of a &lt;member&gt; element is currently being processed
            </summary>
            <remarks>has "name" attribute</remarks>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Assembly">
            <summary>
            Represents the singleton XML &lt;assembly&gt; element
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Assembly.Name">
            <summary>
            Represents the singleton &lt;name&gt; element of the &lt;assembly&gt; element 
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Assembly.ToString">
            <summary>
            Returns a string representation of this <c>Assembly</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Member">
            <summary>
            Represents one of possibly many &lt;member&gt; elements of an XML doc
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Member.Name">
            <summary>
            The section of the raw "name" attribute after the last dot (.)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Member.Summary">
            <summary>
            Represents the singleton &lt;summary&gt; element of a &lt;member&gt; element 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Member.Remarks">
            <summary>
            Represents the singleton &lt;remarks&gt; element of a &lt;member&gt; element 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Member.MemberType">
            <summary>
            Represents the current type (e.g. class, interface or struct - including enum) or parent type for params, properties, methods and enum values
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Member.#ctor(System.String)">
            <summary>
            Called by <c>Member</c> subclass constructors supplying <c>name</c> only
            </summary>
            <param name="name">e.g. class or interface name</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Member.ToOriginalString">
            <summary>
            Each <c>Member</c> subclass calculates its original, fully qualified name (does not include member type indicator)
            </summary>
            <returns>the restored fully qualified name</returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Member.ToString">
            <summary>
            Returns a string representation of this <c>Member</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Class">
            <summary>
            Represents <c>Class</c> documentation
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Class.Properties">
            <summary>
            The &lt;property&gt; elements
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Class.Functions">
            <summary>
            The &lt;functions&gt; elements
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Class.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Class</c>
            </summary>
            <param name="namespace">a namespace</param>
            <param name="name">the type name</param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.EnumValue">
            <summary>
            Represents a documented Enum value
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.EnumValue.MemberType">
            <summary>
            Represents the current type (e.g. class, interface or struct - including enum) or parent type for properties, methods and enum values
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.EnumValue.#ctor(Horseshoe.NET.XmlDoc.Type,System.String)">
            <summary>
            Create a new <c>EnumValue</c>
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.EnumValue.ToOriginalString">
            <summary>
            An <c>EnumValue</c>'s original, fully qualified name is ['type.namespace'.]'type.name'.'name' (does not include member type indicator)
            </summary>
            <returns>the restored fully qualified name</returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Property">
            <summary>
            Represents a property of a class, interface or struct
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Property.MemberType">
            <summary>
            Represents the current type (e.g. class, interface or struct - including enum) or parent type for properties, methods and enum values
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Property.#ctor(Horseshoe.NET.XmlDoc.Type,System.String)">
            <summary>
            Create a new <c>Property</c>
            </summary>
            <param name="type">owning type (e.g. class, struct or interface)</param>
            <param name="name">property name</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Property.ToOriginalString">
            <summary>
            A <c>Property's</c>'s original, fully qualified name is ['type.namespace'.]'type.name'.'name' (does not include member type indicator)
            </summary>
            <returns>the restored fully qualified name</returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Method">
            <summary>
            Represents method documentation
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Method.MemberType">
            <summary>
            Represents the current type (e.g. class, interface or struct - including enum) or parent type for properties, methods and enum values
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Method.TypeParams">
            <summary>
            The &lt;typeparam&gt; elements
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Method.Params">
            <summary>
            The &lt;param&gt; elements
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Method.Returns">
            <summary>
            The &lt;returns&gt; element
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Method.Exceptions">
            <summary>
            The &lt;exception&gt; elements
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Method.#ctor(Horseshoe.NET.XmlDoc.Type,System.String)">
            <summary>
            Create a new method
            </summary>
            <param name="type">this <c>Method</c>'s owning <c>Type</c></param>
            <param name="name">method name</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Method.ToOriginalString">
            <summary>
            A <c>Method's</c>'s original, fully qualified name is ['type.namespace'.]'type.name'.'name' (does not include member type indicator)
            </summary>
            <returns>the restored fully qualified name</returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Exception">
            <summary>
            Represents an exception declaration in <c>Method</c> XML documentation
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Exception.Cref">
            <summary>
            The class reference (type) of exception (from "cref" attribute)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Exception.Description">
            <summary>
            Exception conditions or other information (from XML text)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Exception.#ctor(System.String)">
            <summary>
            Create a new <c>Exception</c> XML declaration
            </summary>
            <param name="cref">class ref</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Exception.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Exception</c> XML declaration
            </summary>
            <param name="cref">class ref</param>
            <param name="description">exception conditions or other information</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Exception.ToString">
            <summary>
            Format this XML doc <c>Exception</c> as text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Enum">
            <summary>
            Represents a documented <c>Enum</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Enum.Values">
            <summary>
            Represents documented <c>Enum</c> values
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Enum.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Enum</c> XmlDoc object
            </summary>
            <param name="namespace"></param>
            <param name="name"></param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Interface">
            <summary>
            Represents a documented <c>Interface</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Interface.Properties">
            <summary>
            Represents documented <c>Interface</c> properties
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Interface.Methods">
            <summary>
            Represents documented <c>Interface</c> methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Interface.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Interface</c> XmlDoc object
            </summary>
            <param name="namespace"></param>
            <param name="name"></param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Struct">
            <summary>
            Represents a documented <c>struct</c>
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Struct.Properties">
            <summary>
            Represents documented <c>struct</c> properties
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Struct.Methods">
            <summary>
            Represents documented <c>struct</c> methods
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Struct.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Struct</c> XmlDoc object
            </summary>
            <param name="namespace"></param>
            <param name="name"></param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Type">
            <summary>
            Represents &lt;member&gt; elements of an XML doc for classes, interfaces and structs including enums
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Type.Namespace">
            <summary>
            The remainder of the raw "name" attribute after extracting the section after the last dot (.)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Type.TypeParams">
            <summary>
            Represents the type parameters for classes, interfaces and structs
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Type.MemberType">
            <summary>
            Represents the current type (e.g. class, interface or struct - including enum) or parent type for properties, methods and enum values
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.#ctor(System.String,System.String)">
            <summary>
            Create a new <c>Type</c> (or subclass) supplying <c>namespace</c> and <c>name</c>
            </summary>
            <param name="namespace"></param>
            <param name="name"></param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.ToOriginalString">
            <summary>
            A <c>Type</c>'s original, fully qualified name is ['namespace'.]'name' (does not include member type indicator)
            </summary>
            <returns>the restored fully qualified name</returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.Equals(System.Object)">
            <summary>
            Compares equality of this XmlDoc <c>Type</c> to another object
            </summary>
            <param name="obj">an object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.Equals(Horseshoe.NET.XmlDoc.Type)">
            <summary>
            Compares equality of this XmlDoc <c>Type</c> to another
            </summary>
            <param name="other">an XmlDoc <c>Type</c> to compare</param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.GetHashCode">
            <summary>
            Gets the hash code representation of this XmlDoc <c>Type</c>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.op_Equality(Horseshoe.NET.XmlDoc.Type,Horseshoe.NET.XmlDoc.Type)">
            <summary>
            Equality operator
            </summary>
            <param name="left">an XmlDoc <c>Type</c></param>
            <param name="right">another XmlDoc <c>Type</c></param>
            <returns></returns>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Type.op_Inequality(Horseshoe.NET.XmlDoc.Type,Horseshoe.NET.XmlDoc.Type)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">an XmlDoc <c>Type</c></param>
            <param name="right">another XmlDoc <c>Type</c></param>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.Param">
            <summary>
            Represents a method param or type param
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Param.Name">
            <summary>
            param name (from "name" attribute)
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.Param.Description">
            <summary>
            param description (from XML text)
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Param.#ctor(System.String)">
            <summary>
            create a new <c>Param</c> 
            </summary>
            <param name="name">param name</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Param.#ctor(System.String,System.String)">
            <summary>
            create a new <c>Param</c> 
            </summary>
            <param name="name">param name</param>
            <param name="description">param description</param>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.Param.ToString">
            <summary>
            format this <c>Param</c> as text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.XmlDocParseException">
            <summary>
            Represents compiled XML documentation (e.g. XML produced by the C# compiler) featuring the ability to parse XML documentation 
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDocParseException.#ctor(System.String)">
            <summary>
            Exception to be thrown when certain unexpected conditions are encountered while parsing XML doc 
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Horseshoe.NET.XmlDoc.XmlDoc">
            <summary>
            Represents compiled XML documentation (e.g. XML produced by the C# compiler) featuring the ability to parse XML documentation 
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.XmlDoc.Assembly">
            <summary>
            Represents the singleton XML &lt;assembly&gt; element
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.XmlDoc.Members">
            <summary>
            Represents the 0 or more XML &lt;member&gt; elements that may be in the XML documentation
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDoc.GetDocumentedNamespaces">
            <summary>
            Derives the distinct namespaces referenced in the parsed XML documentation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.XmlDoc.VerifiedNamespaces">
            <summary>
            Namespace cache used internally to validate parsed XML data. Applies to situations where the assembly referenced in the XML docs is available at runtime.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.XmlDoc.VerifiedTypes">
            <summary>
            Type cache used internally to validate parsed XML data. Applies to situations where the assembly referenced in the XML docs is available at runtime.
            </summary>
        </member>
        <member name="P:Horseshoe.NET.XmlDoc.XmlDoc.Warnings">
            <summary>
            List of warnings reported by the <c>Fill()</c> method
            </summary>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDoc.Fill(Horseshoe.NET.IO.FilePath,System.Nullable{Horseshoe.NET.IO.FilePath},System.Net.NetworkCredential,System.Boolean,Horseshoe.NET.TraceJournal)">
            <summary>
            Load an XLM documenation file to populate this <c>XmlDoc</c> instance
            </summary>
            <param name="fileUri">the file from which to load the XML documentation</param>
            <param name="assemblyDllUri">optional, the assembly dll corresponding to the documentation - can also load by adding assembly the traditional ways (e.g. install NuGet package or manually place in the home directory prior to app start)</param>
            <param name="credentials">credentials needed to access web hosted xml file</param>
            <param name="fillInMissingTypes">Adds an undocumented type implied by the existence of a member of that type</param>
            <param name="journal">a custom journal, if ommitted you can still view <c>TraceJournal.DefaultEntries</c> after method completion</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDoc.ParseMember(System.String,System.Boolean,Horseshoe.NET.TraceJournal)">
            <summary>
            Parses the "name" attribute from a &lt;member&gt; element into an XmlDoc <c>Member</c> object
            </summary>
            <param name="rawName">raw name</param>
            <param name="fillInMissingTypes">Adds an undocumented type implied by the existence of a member of that type</param>
            <param name="journal">a journal</param>
            <returns></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDoc.ParseType(System.String,Horseshoe.NET.TraceJournal)">
            <summary>
            Takes a type string from XML and returns an XmlDoc <c>Type</c> object representing that type
            </summary>
            <param name="rawType">a type string from an XML "name" attribute</param>
            <param name="journal">a journal</param>
            <returns>XmlDoc <c>Type</c></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="M:Horseshoe.NET.XmlDoc.XmlDoc.ParseSystemType(System.String,Horseshoe.NET.TraceJournal)">
            <summary>
            Takes a type string from XML and attempts to look up an actual matching system type via app domain assemblies
            </summary>
            <param name="rawType">a type string from an XML "name" attribute</param>
            <param name="journal">a journal</param>
            <returns>XmlDoc <c>Type</c></returns>
            <exception cref="T:Horseshoe.NET.ValidationException"></exception>
        </member>
        <member name="T:Horseshoe.NET.Zap">
            <summary>
            Factory methods for converting objects and strings.
            </summary>
        </member>
        <member name="M:Horseshoe.NET.Zap.Object(System.Object)">
            <summary>
            Converts <c>obj</c> for nullness (includes <c>DBNull</c>). If <c>obj</c> is a <c>string</c>, 
            then <c>string</c> conditions apply.
            </summary>
            <param name="obj">An object to convert.</param>
            <returns>The source <c>object</c>, <c>null</c> or (in the case <c>obj</c> is a <c>string</c>) a zapped <c>string</c>.</returns>
            <seealso cref="M:Horseshoe.NET.Zap.String(System.Object)"/>
        </member>
        <member name="M:Horseshoe.NET.Zap.String(System.Object)">
            <summary>
            Trims the whitespaces off a <c>string</c>'s edges and if the result is zero-length returns <c>null</c>.
            </summary>
            <param name="obj">A <c>string</c> or <c>object</c> to evaluate.</param>
            <returns>The source <c>object</c> to a <c>string</c> or <c>null</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.Boolean(System.Object,System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts <c>obj</c> to a <c>bool</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>bool</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>false</c>.</param>
            <param name="trueValues">A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="ignoreCase">Whether to ignore the letter case of <c>trueValues</c> and <c>falseValues</c>, default is <c>false</c>.</param>
            <param name="treatArbitraryAsFalse">If <c>true</c>, allows any value not in <c>trueValues</c> to return <c>false</c>, default is <c>false</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NBoolean(System.Object,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts <c>obj</c> to a <c>bool</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="trueValues">A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="ignoreCase">Whether to ignore the letter case of <c>trueValues</c> and <c>falseValues</c>, default is <c>false</c>.</param>
            <param name="treatArbitraryAsFalse">If <c>true</c>, allows any value not in <c>trueValues</c> to return <c>false</c>, default is <c>false</c>.</param>
            <returns><c>true</c> or <c>false</c></returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Byte(System.Object,System.Byte,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>byte</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>bool</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>byte</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NByte(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;byte&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>byte</c> to <c>byte</c> regardless if the value is greater than the max value of <c>byte</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;byte&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Bytes(System.Object,System.Text.Encoding)">
            <summary>
            Converts <c>obj</c> to a <c>byte</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="encoding">An optional text encoding, e.g. UTF8.</param>
            <returns>A <c>byte</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Short(System.Object,System.Int16,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>short</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>short</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>short</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NShort(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;short&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>short</c> to <c>short</c> regardless if the value is greater than the max value of <c>short</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;short&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Int(System.Object,System.Int32,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> as an <c>int</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>int</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>An <c>int</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NInt(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;int&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>int</c> to <c>int</c> regardless if the value is greater than the max value of <c>int</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;int&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Long(System.Object,System.Int64,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>long</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>long</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>long</c> to <c>long</c> regardless if the value is greater than the max value of <c>long</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>long</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NLong(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;long&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>long</c> to <c>long</c> regardless if the value is greater than the max value of <c>long</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;long&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Decimal(System.Object,System.Decimal,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>decimal</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>decimal</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0.0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>decimal</c> to <c>decimal</c> regardless if the value is greater than the max value of <c>decimal</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>decimal</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NDecimal(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;decimal&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>decimal</c> to <c>decimal</c> regardless if the value is greater than the max value of <c>decimal</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;decimal&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Float(System.Object,System.Single,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>float</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>float</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0.0</c>.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>float</c> to <c>float</c> regardless if the value is greater than the max value of <c>float</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>float</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NFloat(System.Object,System.Boolean,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;float&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="force">If <c>true</c>, casts units larger than <c>float</c> to <c>float</c> regardless if the value is greater than the max value of <c>float</c> or less than the min value, the default is <c>false</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;float&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Double(System.Object,System.Double,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>double</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>double</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0.0</c>.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>double</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NDouble(System.Object,System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;double&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="numberStyle">If supplied, indicates the expected number format.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;double&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.DateTime(System.Object,System.DateTime,System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>DateTime</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>DateTime</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>1/1/0001</c>.</param>
            <param name="dateTimeStyle">Defines the formatting options that customize string parsing for some date and time parsing methods.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>DateTime</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.NDateTime(System.Object,System.Nullable{System.Globalization.DateTimeStyles},System.IFormatProvider,System.String)">
            <summary>
            Converts <c>obj</c> to a <c>Nullable&lt;DateTime&gt;</c>.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="dateTimeStyle">Defines the formatting options that customize string parsing for some date and time parsing methods.</param>
            <param name="provider">An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <returns>A <c>Nullable&lt;DateTime&gt;</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Enum``1(System.Object,``0,System.Boolean)">
            <summary>
            Converts <c>obj</c> as an <c>enum</c> of <c>T</c>.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
            <param name="obj">An object to convert.</param>
            <param name="defaultValue">The <c>enum</c> of <c>T</c> to return if <c>obj</c> evaluates to <c>null</c>, default is <c>0</c>.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the <c>enum</c> value if it is a <c>string</c>, default is <c>false</c>.</param>
            <returns>An <c>enum</c> of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.NEnum``1(System.Object,System.Boolean)">
            <summary>
            Converts <c>obj</c> as a nullable <c>enum</c> of <c>T</c>.
            </summary>
            <typeparam name="T">An enum type.</typeparam>
            <param name="obj">An object to convert.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the <c>enum</c> value if it is a <c>string</c>, default is <c>false</c>.</param>
            <returns>A nullable <c>enum</c> of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.EnumOf(System.Type,System.Object,System.Boolean)">
            <summary>
            Converts <c>obj</c> as an <c>enum</c>.
            </summary>
            <param name="type">An enum type.</param>
            <param name="obj">An object to convert.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the <c>enum</c> value if it is a <c>string</c>, default is <c>false</c>.</param>
            <returns>An <c>enum</c> of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.NEnumOf(System.Type,System.Object,System.Boolean)">
            <summary>
            Converts <c>obj</c> as a nullable <c>enum</c>.
            </summary>
            <param name="type">An enum type.</param>
            <param name="obj">An object to convert.</param>
            <param name="ignoreCase">Whether to ignore the letter case of the <c>enum</c> value if it is a <c>string</c>, default is <c>false</c>.</param>
            <returns>A nullable <c>enum</c> of <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.Type(System.Object,System.Type,System.Boolean)">
            <summary>
            Converts <c>obj</c> to a runtime type.
            </summary>
            <param name="obj">An object to convert.</param>
            <param name="inheritedType">An optional type constraint - the type to which the returned <c>Type</c> must be assignable.</param>
            <param name="ignoreCase">Whether to ignore the letter case of <c>obj</c> if it is a <c>string</c> type name, default is <c>false</c>.</param>
            <returns>A runtime type.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.To``1(System.Object,System.Nullable{System.Globalization.DateTimeStyles},System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String,System.String,System.String,System.Text.Encoding,System.Type,System.Boolean)">
            <summary>
            Converts <c>obj</c> to the supplied type.  
            If <c>obj</c> is already assignable from the supplied type it is returned without conversion and will need to be cast.
            Note, built-in converters only exist for basic types (such as int, double, etc.) and enums.
            </summary>
            <typeparam name="T">A runtime type.</typeparam>
            <param name="obj">An object to convert.</param>
            <param name="dateTimeStyle">Applies to <c>To&lt;[datetime]&gt;()</c>. If supplied, indicates the expected date/time format.</param>
            <param name="numberStyle">Applies to <c>To&lt;[numeric-type]&gt;()</c>. If supplied, indicates the expected number format.</param>
            <param name="provider">Applies to <c>To&lt;[numeric-type-or-datetime]&gt;()</c>. An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">Applies to <c>To&lt;[numeric-type-or-datetime]&gt;()</c>. An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <param name="trueValues">Applies to <c>To&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">Applies to <c>To&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="encoding">Applies to <c>To&lt;byte[]&gt;()</c>. An optional text encoding, e.g. UTF8.</param>
            <param name="inheritedType">Applies to <c>To&lt;Type&gt;()</c>. A constraint, the type to which the returned <c>Type</c> must be assignable.</param>
            <param name="ignoreCase">Applies to <c>To&lt;[enum-type-or-bool]&gt;()</c>. If <c>true</c>, the letter case of an enum value <c>string</c> is ignored when converting to the actual <c>enum</c> value, default is <c>false</c>.</param>
            <returns>The value of <c>obj</c> converted to <c>T</c>.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.To(System.Type,System.Object,System.Nullable{System.Globalization.DateTimeStyles},System.Nullable{System.Globalization.NumberStyles},System.IFormatProvider,System.String,System.String,System.String,System.Text.Encoding,System.Type,System.Boolean)">
            <summary>
            Converts <c>obj</c> to the supplied type.  
            If <c>obj</c> is already assignable from the supplied type it is returned without conversion and will need to be cast.
            Note, built-in converters only exist for basic types (such as int, double, etc.) and enums.
            </summary>
            <param name="type">The type to convert <c>obj</c> to.</param>
            <param name="obj">An object to convert.</param>
            <param name="dateTimeStyle">Applies to <c>To&lt;[datetime]&gt;()</c>. If supplied, indicates the expected date/time format.</param>
            <param name="numberStyle">Applies to <c>To&lt;[numeric-type]&gt;()</c>. If supplied, indicates the expected number format.</param>
            <param name="provider">Applies to <c>To&lt;[numeric-type-or-datetime]&gt;()</c>. An optional format provider, e.g. <c>CultureInfo.GetCultureInfo("en-US")</c>.</param>
            <param name="locale">Applies to <c>To&lt;[numeric-type-or-datetime]&gt;()</c>. An optional locale (e.g. "en-US"), this is used to set a value for <c>provider</c> if not supplied.</param>
            <param name="trueValues">Applies to <c>To&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>true</c>.</param>
            <param name="falseValues">Applies to <c>To&lt;bool&gt;()</c>. A pipe delimited list of <c>string</c> values that evaluate to <c>false</c>.</param>
            <param name="encoding">Applies to <c>To&lt;byte[]&gt;()</c>. An optional text encoding, e.g. UTF8.</param>
            <param name="inheritedType">An optional type constraint - the type to which the returned <c>Type</c> must be assignable.</param>
            <param name="ignoreCase">Applies to <c>To&lt;[enum-type-or-bool]&gt;()</c>. If <c>true</c>, the letter case of an enum value <c>string</c> is ignored when converting to the actual <c>enum</c> value, default is <c>false</c>.</param>
            <returns>The value of <c>obj</c> converted to <c>type</c>.</returns>
            <exception cref="T:Horseshoe.NET.ConversionException"></exception>
        </member>
        <member name="M:Horseshoe.NET.Zap.Strings(System.Collections.Generic.IEnumerable{System.String},Horseshoe.NET.PrunePolicy)">
            <summary>
            Zaps a collection of <c>string</c>s and optionally prunes out the <c>null</c>s.
            </summary>
            <param name="collection">A collection of <c>string</c>s.</param>
            <param name="prunePolicy">Dictates how to treat <c>null</c> items when zapping a collection.</param>
            <returns>A collection of zapped strings.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.Strings(System.String[],Horseshoe.NET.PrunePolicy)">
            <summary>
            Zaps an array of <c>string</c>s and optionally prunes out the <c>null</c>s.
            </summary>
            <param name="array">An array of <c>string</c>s.</param>
            <param name="prunePolicy">Dictates how to treat <c>null</c> items when zapping a collection.</param>
            <returns>An array of zapped strings.</returns>
        </member>
        <member name="M:Horseshoe.NET.Zap.StringProperties(System.Object,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Zaps an <c>object</c>'s <c>string</c> properties.
            </summary>
            <param name="obj">An <c>object</c> whose <c>string</c> properties to zap.</param>
            <param name="bindingFlags">Flags for indicating which properties to zap.</param>
        </member>
        <member name="M:Horseshoe.NET.Zap.StringProperties``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Zaps an <c>object</c>'s <c>string</c> properties.
            </summary>
            <typeparam name="T">A reference type.</typeparam>
            <param name="objs">A collection of <c>object</c>s whose <c>string</c> properties to zap.</param>
            <param name="bindingFlags">Flags for indicating which properties to zap.</param>
        </member>
        <member name="M:Horseshoe.NET.Zap.StaticStringProperties(System.Type,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Zaps a <c>Types</c>'s <c>string</c> properties.
            </summary>
            <param name="type">A type.</param>
            <param name="bindingFlags">Flags for indicating which properties to zap.</param>
        </member>
        <member name="M:Horseshoe.NET.Zap.StaticStringProperties``1(System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Zaps a <c>Types</c>'s <c>string</c> properties.
            </summary>
            <typeparam name="T">A type.</typeparam>
            <param name="bindingFlags">Flags for indicating which properties to zap.</param>
        </member>
    </members>
</doc>
