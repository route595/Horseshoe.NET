using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Horseshoe.NET.Db
{
    /// <summary>
    /// Extension methods for databases
    /// </summary>
    public static class Extensions
    {
        /// <summary>
        /// Gets an array of <c>Type</c>s corresponding to the runtype types of the source query's data columns
        /// </summary>
        /// <param name="reader">An open data reader.</param>
        /// <returns>An array of <c>Type</c>s.</returns>
        public static Type[] GetFieldTypes(this IDataReader reader)
        {
            //if (reader.IsClosed)
            //{
            //    throw new UtilityException("Cannot perform this operation on a closed reader");
            //}
            var types = new List<Type>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                types.Add(reader.GetFieldType(i));
            }
            return types.ToArray();
        }

        /// <summary>
        /// Derives an array of <c>DataColumn</c>s approximating the structure of these results adapted to a <c>DataTable</c>
        /// </summary>
        /// <param name="reader">An open data reader.</param>
        /// <returns>An array of column data.</returns>
        public static DataColumn[] GetDataColumns(this IDataReader reader)
        {
            //if (reader.IsClosed)
            //{
            //    throw new UtilityException("Cannot perform this operation on a closed reader");
            //}
            var columns = new List<DataColumn>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                columns.Add
                (
                    new DataColumn
                    {
                        ColumnName = reader.GetName(i),
                        DataType = reader.GetFieldType(i)
                    }
                );
            }
            return columns.ToArray();
        }

        /// <summary>
        /// Converts this parameter to SQL syntax for inserting or updating data
        /// </summary>
        /// <param name="parameter">A DB parameter (column name and value).</param>
        /// <param name="platform">A DB platform may lend hints about how to render column names and parameters.</param>
        /// <returns></returns>
        public static string ToDMLString(this DbParameter parameter, DbPlatform? platform = null)
        {
            return string.Format
            (
                "{0} = {1}",
                DbUtil.RenderColumnName(parameter, platform: platform ?? DbSettings.DefaultPlatform ?? default),
                DbUtil.Sqlize(parameter.Value, platform: platform ?? DbSettings.DefaultPlatform ?? default)
            );
        }

        /// <summary>
        /// Gets the password-redacted connection string found or generated by Horseshoe.NET.
        /// </summary>
        /// <param name="journal"></param>
        /// <returns>A connection string.</returns>
        public static string GetConnectionString(this TraceJournal journal)
        {
            if (journal.TryGetValue("connection.string", out object value))
                return value as string;
            return null;
        }

        /// <summary>
        /// Gets the password-redacted connection string found or generated by Horseshoe.NET.
        /// </summary>
        /// <param name="journal"></param>
        /// <returns>A connection string.</returns>
        public static string GetConnectionStringSource(this TraceJournal journal)
        {
            if (journal.TryGetValue("connection.string", out object value))
                return value as string;
            return null;
        }

        /// <summary>
        /// Gets where the connection info came from.
        /// </summary>
        /// <param name="journal"></param>
        /// <returns>A <c>string</c> indicating the connection info source.</returns>
        public static string GetConnectionInfoSource(this TraceJournal journal)
        {
            if (journal.TryGetValue("connection.info.source", out object value))
                return value as string;
            return null;
        }

        /// <summary>
        /// Gets the SQL statement generated by Horseshoe.NET.
        /// </summary>
        /// <param name="journal"></param>
        /// <returns>A SQL statement.</returns>
        public static string GetSqlStatement(this TraceJournal journal)
        {
            if (journal.TryGetValue("sql.statement", out object value))
                return value as string;
            return null;
        }

        /// <summary>
        /// Writes a specially crafted display name for database methods to the trace journal. 
        /// </summary>
        /// <param name="journal">A trace journal</param>
        /// <param name="method">The method whose info to display</param>
        public static void WriteMethodDisplayName(this TraceJournal journal, MethodBase method)
        {
            var strb = new StringBuilder(method.DeclaringType.Namespace.Substring(method.DeclaringType.Namespace.LastIndexOf('.') + 1))
                .Append("+")
                .Append(method.DeclaringType.FullName.Substring(method.DeclaringType.Namespace.Length + 1).Replace("+", "."))
                .Append('.')
                .Append(method.Name)
                .Append("(")
                .Append(string.Join(",", method.GetParameters().Take(2).Select(p => p.Name)))
                .Append(")");
            journal.Write(strb);
        }

        /// <summary>
        /// Specifies a platform to set as this filter's default.
        /// </summary>
        /// <param name="filter">A filter.</param>
        /// <param name="platform">A DB platform lends hints about how to render SQL expressions and statements.</param>
        /// <returns>The filter.</returns>
        public static IFilter On(this IFilter filter, DbPlatform platform)
        {
            filter.Platform = platform;
            return filter;
        }
    }
}
